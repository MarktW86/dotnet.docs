### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Control.EventModule
  commentId: T:Microsoft.FSharp.Control.EventModule
  id: EventModule
  children:
  - Microsoft.FSharp.Control.EventModule.Add``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.IEvent{``1,``0})
  - Microsoft.FSharp.Control.EventModule.Choose``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Control.IEvent{``2,``0})
  - Microsoft.FSharp.Control.EventModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  - Microsoft.FSharp.Control.EventModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``0})
  - Microsoft.FSharp.Control.EventModule.Merge``3(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``1})
  - Microsoft.FSharp.Control.EventModule.Pairwise``2(Microsoft.FSharp.Control.IEvent{``0,``1})
  - Microsoft.FSharp.Control.EventModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  - Microsoft.FSharp.Control.EventModule.Scan``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Microsoft.FSharp.Control.IEvent{``2,``1})
  - Microsoft.FSharp.Control.EventModule.Split``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Control.IEvent{``3,``0})
  langs:
  - csharp
  name: EventModule
  nameWithType: EventModule
  fullName: Microsoft.FSharp.Control.EventModule
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      [Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)]

      [Microsoft.FSharp.Core.RequireQualifiedAccess]

      public static class EventModule
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.CompilationRepresentationAttribute
  - type: Microsoft.FSharp.Core.RequireQualifiedAccessAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Add``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.IEvent{``1,``0})
  commentId: M:Microsoft.FSharp.Control.EventModule.Add``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.IEvent{``1,``0})
  id: Add``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.IEvent{``1,``0})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Add<T,TDel>(FSharpFunc<T,Unit>, IEvent<TDel,T>)
  nameWithType: EventModule.Add<T,TDel>(FSharpFunc<T,Unit>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Add<T,TDel>(FSharpFunc<T,Unit>, IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("add")]

      public static void Add<T,TDel> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit> callback, Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: callback
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Add``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Choose``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Control.IEvent{``2,``0})
  commentId: M:Microsoft.FSharp.Control.EventModule.Choose``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Control.IEvent{``2,``0})
  id: Choose``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Control.IEvent{``2,``0})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Choose<T,TResult,TDel>(FSharpFunc<T,FSharpOption<TResult>>, IEvent<TDel,T>)
  nameWithType: EventModule.Choose<T,TResult,TDel>(FSharpFunc<T,FSharpOption<TResult>>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Choose<T,TResult,TDel>(FSharpFunc<T,FSharpOption<TResult>>, IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("choose")]

      public static Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult>,TResult> Choose<T,TResult,TDel> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult},TResult}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Choose``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  commentId: M:Microsoft.FSharp.Control.EventModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  id: Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Filter<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  nameWithType: EventModule.Filter<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Filter<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("filter")]

      public static Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<T>,T> Filter<T,TDel> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{T},T}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Filter``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``0})
  commentId: M:Microsoft.FSharp.Control.EventModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``0})
  id: Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``0})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Map<T,TResult,TDel>(FSharpFunc<T,TResult>, IEvent<TDel,T>)
  nameWithType: EventModule.Map<T,TResult,TDel>(FSharpFunc<T,TResult>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Map<T,TResult,TDel>(FSharpFunc<T,TResult>, IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map")]

      public static Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult>,TResult> Map<T,TResult,TDel> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> mapping, Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult},TResult}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Map``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Merge``3(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``1})
  commentId: M:Microsoft.FSharp.Control.EventModule.Merge``3(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``1})
  id: Merge``3(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``1})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Merge<TDel1,T,TDel2>(IEvent<TDel1,T>, IEvent<TDel2,T>)
  nameWithType: EventModule.Merge<TDel1,T,TDel2>(IEvent<TDel1,T>, IEvent<TDel2,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Merge<TDel1,T,TDel2>(IEvent<TDel1,T>, IEvent<TDel2,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("merge")]

      public static Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<T>,T> Merge<TDel1,T,TDel2> (Microsoft.FSharp.Control.IEvent<TDel1,T> event1, Microsoft.FSharp.Control.IEvent<TDel2,T> event2) where TDel1 : Delegate where TDel2 : Delegate;
    parameters:
    - id: event1
      type: Microsoft.FSharp.Control.IEvent{TDel1,T}
      description: To be added.
    - id: event2
      type: Microsoft.FSharp.Control.IEvent{TDel2,T}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{T},T}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Merge``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Pairwise``2(Microsoft.FSharp.Control.IEvent{``0,``1})
  commentId: M:Microsoft.FSharp.Control.EventModule.Pairwise``2(Microsoft.FSharp.Control.IEvent{``0,``1})
  id: Pairwise``2(Microsoft.FSharp.Control.IEvent{``0,``1})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Pairwise<TDel,T>(IEvent<TDel,T>)
  nameWithType: EventModule.Pairwise<TDel,T>(IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Pairwise<TDel,T>(IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("pairwise")]

      public static Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<Tuple<T,T>>,Tuple<T,T>> Pairwise<TDel,T> (Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{System.Tuple{T,T}},System.Tuple{T,T}}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Pairwise``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  commentId: M:Microsoft.FSharp.Control.EventModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  id: Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Partition<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  nameWithType: EventModule.Partition<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Partition<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("partition")]

      public static Tuple<Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<T>,T>,Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<T>,T>> Partition<T,TDel> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{T},T},Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{T},T}}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Partition``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Scan``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Microsoft.FSharp.Control.IEvent{``2,``1})
  commentId: M:Microsoft.FSharp.Control.EventModule.Scan``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Microsoft.FSharp.Control.IEvent{``2,``1})
  id: Scan``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Microsoft.FSharp.Control.IEvent{``2,``1})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Scan<TResult,T,TDel>(FSharpFunc<TResult,FSharpFunc<T,TResult>>, TResult, IEvent<TDel,T>)
  nameWithType: EventModule.Scan<TResult,T,TDel>(FSharpFunc<TResult,FSharpFunc<T,TResult>>, TResult, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Scan<TResult,T,TDel>(FSharpFunc<TResult,FSharpFunc<T,TResult>>, TResult, IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("scan")]

      public static Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult>,TResult> Scan<TResult,T,TDel> (Microsoft.FSharp.Core.FSharpFunc<TResult,Microsoft.FSharp.Core.FSharpFunc<T,TResult>> collector, TResult state, Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: collector
      type: Microsoft.FSharp.Core.FSharpFunc{TResult,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
      description: To be added.
    - id: state
      type: TResult
      description: To be added.
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult},TResult}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Scan``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Split``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Control.IEvent{``3,``0})
  commentId: M:Microsoft.FSharp.Control.EventModule.Split``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Control.IEvent{``3,``0})
  id: Split``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Control.IEvent{``3,``0})
  parent: Microsoft.FSharp.Control.EventModule
  langs:
  - csharp
  name: Split<T,TResult1,TResult2,TDel>(FSharpFunc<T,FSharpChoice<TResult1,TResult2>>, IEvent<TDel,T>)
  nameWithType: EventModule.Split<T,TResult1,TResult2,TDel>(FSharpFunc<T,FSharpChoice<TResult1,TResult2>>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Split<T,TResult1,TResult2,TDel>(FSharpFunc<T,FSharpChoice<TResult1,TResult2>>, IEvent<TDel,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("split")]

      public static Tuple<Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult1>,TResult1>,Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult2>,TResult2>> Split<T,TResult1,TResult2,TDel> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpChoice<TResult1,TResult2>> splitter, Microsoft.FSharp.Control.IEvent<TDel,T> sourceEvent) where TDel : Delegate;
    parameters:
    - id: splitter
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpChoice{TResult1,TResult2}}
      description: To be added.
    - id: sourceEvent
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult1},TResult1},Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult2},TResult2}}
      description: To be added.
  overload: Microsoft.FSharp.Control.EventModule.Split``4*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Control.EventModule.Add``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.IEvent{``1,``0})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Add<T,TDel>(FSharpFunc<T,Unit>, IEvent<TDel,T>)
  nameWithType: EventModule.Add<T,TDel>(FSharpFunc<T,Unit>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Add<T,TDel>(FSharpFunc<T,Unit>, IEvent<TDel,T>)
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Unit>
  nameWithType: FSharpFunc<T,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.IEvent`2
  name: IEvent<TDelegate,TArgs>
  nameWithType: IEvent<TDelegate,TArgs>
  fullName: Microsoft.FSharp.Control.IEvent<TDelegate,TArgs>
- uid: TDel
  name: TDel
  nameWithType: TDel
  fullName: TDel
- uid: Microsoft.FSharp.Control.IEvent{TDel,T}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: IEvent<TDel,T>
  nameWithType: IEvent<TDel,T>
  fullName: Microsoft.FSharp.Control.IEvent<TDel,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: TDel
    name: TDel
    nameWithType: TDel
    fullName: TDel
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Choose``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Control.IEvent{``2,``0})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Choose<T,TResult,TDel>(FSharpFunc<T,FSharpOption<TResult>>, IEvent<TDel,T>)
  nameWithType: EventModule.Choose<T,TResult,TDel>(FSharpFunc<T,FSharpOption<TResult>>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Choose<T,TResult,TDel>(FSharpFunc<T,FSharpOption<TResult>>, IEvent<TDel,T>)
- uid: Microsoft.FSharp.Control.FSharpHandler`1
  name: FSharpHandler<T>
  nameWithType: FSharpHandler<T>
  fullName: Microsoft.FSharp.Control.FSharpHandler<T>
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult},TResult}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: IEvent<FSharpHandler<TResult>,TResult>
  nameWithType: IEvent<FSharpHandler<TResult>,TResult>
  fullName: Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult>,TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpHandler`1
    name: FSharpHandler
    nameWithType: FSharpHandler
    fullName: Microsoft.FSharp.Control.FSharpHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpOption<TResult>>
  nameWithType: FSharpFunc<T,FSharpOption<TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Filter<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  nameWithType: EventModule.Filter<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Filter<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
- uid: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{T},T}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: IEvent<FSharpHandler<T>,T>
  nameWithType: IEvent<FSharpHandler<T>,T>
  fullName: Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<T>,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpHandler`1
    name: FSharpHandler
    nameWithType: FSharpHandler
    fullName: Microsoft.FSharp.Control.FSharpHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Boolean>
  nameWithType: FSharpFunc<T,Boolean>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``0})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Map<T,TResult,TDel>(FSharpFunc<T,TResult>, IEvent<TDel,T>)
  nameWithType: EventModule.Map<T,TResult,TDel>(FSharpFunc<T,TResult>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Map<T,TResult,TDel>(FSharpFunc<T,TResult>, IEvent<TDel,T>)
- uid: Microsoft.FSharp.Control.EventModule.Merge``3(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``1})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Merge<TDel1,T,TDel2>(IEvent<TDel1,T>, IEvent<TDel2,T>)
  nameWithType: EventModule.Merge<TDel1,T,TDel2>(IEvent<TDel1,T>, IEvent<TDel2,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Merge<TDel1,T,TDel2>(IEvent<TDel1,T>, IEvent<TDel2,T>)
- uid: TDel1
  name: TDel1
  nameWithType: TDel1
  fullName: TDel1
- uid: Microsoft.FSharp.Control.IEvent{TDel1,T}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: IEvent<TDel1,T>
  nameWithType: IEvent<TDel1,T>
  fullName: Microsoft.FSharp.Control.IEvent<TDel1,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: TDel1
    name: TDel1
    nameWithType: TDel1
    fullName: TDel1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TDel2
  name: TDel2
  nameWithType: TDel2
  fullName: TDel2
- uid: Microsoft.FSharp.Control.IEvent{TDel2,T}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: IEvent<TDel2,T>
  nameWithType: IEvent<TDel2,T>
  fullName: Microsoft.FSharp.Control.IEvent<TDel2,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: TDel2
    name: TDel2
    nameWithType: TDel2
    fullName: TDel2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Pairwise``2(Microsoft.FSharp.Control.IEvent{``0,``1})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Pairwise<TDel,T>(IEvent<TDel,T>)
  nameWithType: EventModule.Pairwise<TDel,T>(IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Pairwise<TDel,T>(IEvent<TDel,T>)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{System.Tuple{T,T}},System.Tuple{T,T}}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: IEvent<FSharpHandler<Tuple<T,T>>,Tuple<T,T>>
  nameWithType: IEvent<FSharpHandler<Tuple<T,T>>,Tuple<T,T>>
  fullName: Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<System.Tuple<T,T>>,System.Tuple<T,T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpHandler`1
    name: FSharpHandler
    nameWithType: FSharpHandler
    fullName: Microsoft.FSharp.Control.FSharpHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Partition<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  nameWithType: EventModule.Partition<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Partition<T,TDel>(FSharpFunc<T,Boolean>, IEvent<TDel,T>)
- uid: System.Tuple{Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{T},T},Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{T},T}}
  parent: System
  isExternal: false
  name: Tuple<IEvent<FSharpHandler<T>,T>,IEvent<FSharpHandler<T>,T>>
  nameWithType: Tuple<IEvent<FSharpHandler<T>,T>,IEvent<FSharpHandler<T>,T>>
  fullName: System.Tuple<Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<T>,T>,Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<T>,T>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpHandler`1
    name: FSharpHandler
    nameWithType: FSharpHandler
    fullName: Microsoft.FSharp.Control.FSharpHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpHandler`1
    name: FSharpHandler
    nameWithType: FSharpHandler
    fullName: Microsoft.FSharp.Control.FSharpHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Scan``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``0,Microsoft.FSharp.Control.IEvent{``2,``1})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Scan<TResult,T,TDel>(FSharpFunc<TResult,FSharpFunc<T,TResult>>, TResult, IEvent<TDel,T>)
  nameWithType: EventModule.Scan<TResult,T,TDel>(FSharpFunc<TResult,FSharpFunc<T,TResult>>, TResult, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Scan<TResult,T,TDel>(FSharpFunc<TResult,FSharpFunc<T,TResult>>, TResult, IEvent<TDel,T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{TResult,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TResult,FSharpFunc<T,TResult>>
  nameWithType: FSharpFunc<TResult,FSharpFunc<T,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TResult,Microsoft.FSharp.Core.FSharpFunc<T,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Split``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Control.IEvent{``3,``0})
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Split<T,TResult1,TResult2,TDel>(FSharpFunc<T,FSharpChoice<TResult1,TResult2>>, IEvent<TDel,T>)
  nameWithType: EventModule.Split<T,TResult1,TResult2,TDel>(FSharpFunc<T,FSharpChoice<TResult1,TResult2>>, IEvent<TDel,T>)
  fullName: Microsoft.FSharp.Control.EventModule.Split<T,TResult1,TResult2,TDel>(FSharpFunc<T,FSharpChoice<TResult1,TResult2>>, IEvent<TDel,T>)
- uid: TResult1
  name: TResult1
  nameWithType: TResult1
  fullName: TResult1
- uid: TResult2
  name: TResult2
  nameWithType: TResult2
  fullName: TResult2
- uid: System.Tuple{Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult1},TResult1},Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{TResult2},TResult2}}
  parent: System
  isExternal: false
  name: Tuple<IEvent<FSharpHandler<TResult1>,TResult1>,IEvent<FSharpHandler<TResult2>,TResult2>>
  nameWithType: Tuple<IEvent<FSharpHandler<TResult1>,TResult1>,IEvent<FSharpHandler<TResult2>,TResult2>>
  fullName: System.Tuple<Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult1>,TResult1>,Microsoft.FSharp.Control.IEvent<Microsoft.FSharp.Control.FSharpHandler<TResult2>,TResult2>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpHandler`1
    name: FSharpHandler
    nameWithType: FSharpHandler
    fullName: Microsoft.FSharp.Control.FSharpHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult1
    name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult1
    name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpHandler`1
    name: FSharpHandler
    nameWithType: FSharpHandler
    fullName: Microsoft.FSharp.Control.FSharpHandler
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult2
    name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult2
    name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpChoice`2
  name: FSharpChoice<T1,T2>
  nameWithType: FSharpChoice<T1,T2>
  fullName: Microsoft.FSharp.Core.FSharpChoice<T1,T2>
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpChoice{TResult1,TResult2}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpChoice<TResult1,TResult2>>
  nameWithType: FSharpFunc<T,FSharpChoice<TResult1,TResult2>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpChoice<TResult1,TResult2>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpChoice`2
    name: FSharpChoice
    nameWithType: FSharpChoice
    fullName: Microsoft.FSharp.Core.FSharpChoice
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult1
    name: TResult1
    nameWithType: TResult1
    fullName: TResult1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult2
    name: TResult2
    nameWithType: TResult2
    fullName: TResult2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.EventModule.Add``2*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Add<T,TDel>
  nameWithType: EventModule.Add<T,TDel>
  fullName: Microsoft.FSharp.Control.EventModule.Add<T,TDel>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Choose``3*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Choose<T,TResult,TDel>
  nameWithType: EventModule.Choose<T,TResult,TDel>
  fullName: Microsoft.FSharp.Control.EventModule.Choose<T,TResult,TDel>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Filter``2*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Filter<T,TDel>
  nameWithType: EventModule.Filter<T,TDel>
  fullName: Microsoft.FSharp.Control.EventModule.Filter<T,TDel>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Map``3*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Map<T,TResult,TDel>
  nameWithType: EventModule.Map<T,TResult,TDel>
  fullName: Microsoft.FSharp.Control.EventModule.Map<T,TResult,TDel>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Merge``3*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Merge<TDel1,T,TDel2>
  nameWithType: EventModule.Merge<TDel1,T,TDel2>
  fullName: Microsoft.FSharp.Control.EventModule.Merge<TDel1,T,TDel2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Pairwise``2*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Pairwise<TDel,T>
  nameWithType: EventModule.Pairwise<TDel,T>
  fullName: Microsoft.FSharp.Control.EventModule.Pairwise<TDel,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Partition``2*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Partition<T,TDel>
  nameWithType: EventModule.Partition<T,TDel>
  fullName: Microsoft.FSharp.Control.EventModule.Partition<T,TDel>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Scan``3*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Scan<TResult,T,TDel>
  nameWithType: EventModule.Scan<TResult,T,TDel>
  fullName: Microsoft.FSharp.Control.EventModule.Scan<TResult,T,TDel>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
- uid: Microsoft.FSharp.Control.EventModule.Split``4*
  parent: Microsoft.FSharp.Control.EventModule
  isExternal: false
  name: Split<T,TResult1,TResult2,TDel>
  nameWithType: EventModule.Split<T,TResult1,TResult2,TDel>
  fullName: Microsoft.FSharp.Control.EventModule.Split<T,TResult1,TResult2,TDel>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/EventModule.xml
