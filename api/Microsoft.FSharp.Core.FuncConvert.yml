### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Core.FuncConvert
  commentId: T:Microsoft.FSharp.Core.FuncConvert
  id: FuncConvert
  children:
  - Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},``5})
  - Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},``4})
  - Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},``3})
  - Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2})
  - Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2(System.Converter{``0,``1})
  - Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1(System.Action{``0})
  langs:
  - csharp
  name: FuncConvert
  nameWithType: FuncConvert
  fullName: Microsoft.FSharp.Core.FuncConvert
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.AbstractClass]

      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)]

      [Microsoft.FSharp.Core.Sealed]

      public static class FuncConvert
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.AbstractClassAttribute
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.SealedAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},``5})
  commentId: M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},``5})
  id: FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},``5})
  parent: Microsoft.FSharp.Core.FuncConvert
  langs:
  - csharp
  name: FuncFromTupled<T1,T2,T3,T4,T5,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,T4,T5,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,T4,T5,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,Microsoft.FSharp.Core.FSharpFunc<T4,Microsoft.FSharp.Core.FSharpFunc<T5,TResult>>>>> FuncFromTupled<T1,T2,T3,T4,T5,TResult> (Microsoft.FSharp.Core.FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult> func);
    parameters:
    - id: func
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2,T3,T4,T5},TResult}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: T3
      description: To be added.
    - id: T4
      description: To be added.
    - id: T5
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,Microsoft.FSharp.Core.FSharpFunc{T4,Microsoft.FSharp.Core.FSharpFunc{T5,TResult}}}}}
      description: To be added.
  overload: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},``4})
  commentId: M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},``4})
  id: FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},``4})
  parent: Microsoft.FSharp.Core.FuncConvert
  langs:
  - csharp
  name: FuncFromTupled<T1,T2,T3,T4,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,T4,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,T4,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,Microsoft.FSharp.Core.FSharpFunc<T4,TResult>>>> FuncFromTupled<T1,T2,T3,T4,TResult> (Microsoft.FSharp.Core.FSharpFunc<Tuple<T1,T2,T3,T4>,TResult> func);
    parameters:
    - id: func
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2,T3,T4},TResult}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: T3
      description: To be added.
    - id: T4
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,Microsoft.FSharp.Core.FSharpFunc{T4,TResult}}}}
      description: To be added.
  overload: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},``3})
  commentId: M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},``3})
  id: FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},``3})
  parent: Microsoft.FSharp.Core.FuncConvert
  langs:
  - csharp
  name: FuncFromTupled<T1,T2,T3,TResult>(FSharpFunc<Tuple<T1,T2,T3>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,TResult>(FSharpFunc<Tuple<T1,T2,T3>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,TResult>(FSharpFunc<Tuple<T1,T2,T3>,TResult>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>> FuncFromTupled<T1,T2,T3,TResult> (Microsoft.FSharp.Core.FSharpFunc<Tuple<T1,T2,T3>,TResult> func);
    parameters:
    - id: func
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2,T3},TResult}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: T3
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
      description: To be added.
  overload: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2})
  commentId: M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2})
  id: FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2})
  parent: Microsoft.FSharp.Core.FuncConvert
  langs:
  - csharp
  name: FuncFromTupled<T1,T2,TResult>(FSharpFunc<Tuple<T1,T2>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,TResult>(FSharpFunc<Tuple<T1,T2>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,TResult>(FSharpFunc<Tuple<T1,T2>,TResult>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>> FuncFromTupled<T1,T2,TResult> (Microsoft.FSharp.Core.FSharpFunc<Tuple<T1,T2>,TResult> func);
    parameters:
    - id: func
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2},TResult}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
      description: To be added.
  overload: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2(System.Converter{``0,``1})
  commentId: M:Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2(System.Converter{``0,``1})
  id: ToFSharpFunc``2(System.Converter{``0,``1})
  parent: Microsoft.FSharp.Core.FuncConvert
  langs:
  - csharp
  name: ToFSharpFunc<T,TResult>(Converter<T,TResult>)
  nameWithType: FuncConvert.ToFSharpFunc<T,TResult>(Converter<T,TResult>)
  fullName: FuncConvert.ToFSharpFunc<T,TResult>(Converter<T,TResult>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<T,TResult> ToFSharpFunc<T,TResult> (Converter<T,TResult> converter);
    parameters:
    - id: converter
      type: System.Converter{T,TResult}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
  overload: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1(System.Action{``0})
  commentId: M:Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1(System.Action{``0})
  id: ToFSharpFunc``1(System.Action{``0})
  parent: Microsoft.FSharp.Core.FuncConvert
  langs:
  - csharp
  name: ToFSharpFunc<T>(Action<T>)
  nameWithType: FuncConvert.ToFSharpFunc<T>(Action<T>)
  fullName: FuncConvert.ToFSharpFunc<T>(Action<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit> ToFSharpFunc<T> (Action<T> action);
    parameters:
    - id: action
      type: System.Action`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
      description: To be added.
  overload: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3,``4},``5})
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,T3,T4,T5,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,T4,T5,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,T4,T5,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>)
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,Microsoft.FSharp.Core.FSharpFunc{T4,Microsoft.FSharp.Core.FSharpFunc{T5,TResult}}}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,FSharpFunc<T4,FSharpFunc<T5,TResult>>>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,FSharpFunc<T4,FSharpFunc<T5,TResult>>>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,Microsoft.FSharp.Core.FSharpFunc<T4,Microsoft.FSharp.Core.FSharpFunc<T5,TResult>>>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T4
    name: T4
    nameWithType: T4
    fullName: T4
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T5
    name: T5
    nameWithType: T5
    fullName: T5
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Tuple`5
  name: Tuple<T1,T2,T3,T4,T5>
  nameWithType: Tuple<T1,T2,T3,T4,T5>
  fullName: System.Tuple<T1,T2,T3,T4,T5>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2,T3,T4,T5},TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>
  nameWithType: FSharpFunc<Tuple<T1,T2,T3,T4,T5>,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<T1,T2,T3,T4,T5>,TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`5
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T4
    name: T4
    nameWithType: T4
    fullName: T4
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T5
    name: T5
    nameWithType: T5
    fullName: T5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},``4})
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,T3,T4,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,T4,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,T4,TResult>(FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,Microsoft.FSharp.Core.FSharpFunc{T4,TResult}}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,FSharpFunc<T4,TResult>>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,FSharpFunc<T4,TResult>>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,Microsoft.FSharp.Core.FSharpFunc<T4,TResult>>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T4
    name: T4
    nameWithType: T4
    fullName: T4
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Tuple`4
  name: Tuple<T1,T2,T3,T4>
  nameWithType: Tuple<T1,T2,T3,T4>
  fullName: System.Tuple<T1,T2,T3,T4>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2,T3,T4},TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>
  nameWithType: FSharpFunc<Tuple<T1,T2,T3,T4>,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<T1,T2,T3,T4>,TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`4
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T4
    name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},``3})
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,T3,TResult>(FSharpFunc<Tuple<T1,T2,T3>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,TResult>(FSharpFunc<Tuple<T1,T2,T3>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,TResult>(FSharpFunc<Tuple<T1,T2,T3>,TResult>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Tuple`3
  name: Tuple<T1,T2,T3>
  nameWithType: Tuple<T1,T2,T3>
  fullName: System.Tuple<T1,T2,T3>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2,T3},TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<T1,T2,T3>,TResult>
  nameWithType: FSharpFunc<Tuple<T1,T2,T3>,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<T1,T2,T3>,TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2})
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,TResult>(FSharpFunc<Tuple<T1,T2>,TResult>)
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,TResult>(FSharpFunc<Tuple<T1,T2>,TResult>)
  fullName: FuncConvert.FuncFromTupled<T1,T2,TResult>(FSharpFunc<Tuple<T1,T2>,TResult>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{T1,T2},TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<T1,T2>,TResult>
  nameWithType: FSharpFunc<Tuple<T1,T2>,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<T1,T2>,TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2(System.Converter{``0,``1})
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: ToFSharpFunc<T,TResult>(Converter<T,TResult>)
  nameWithType: FuncConvert.ToFSharpFunc<T,TResult>(Converter<T,TResult>)
  fullName: FuncConvert.ToFSharpFunc<T,TResult>(Converter<T,TResult>)
- uid: System.Converter`2
  name: Converter<TInput,TOutput>
  nameWithType: Converter<TInput,TOutput>
  fullName: System.Converter<TInput,TOutput>
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Converter{T,TResult}
  parent: System
  isExternal: false
  name: Converter<T,TResult>
  nameWithType: Converter<T,TResult>
  fullName: System.Converter<T,TResult>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1(System.Action{``0})
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: ToFSharpFunc<T>(Action<T>)
  nameWithType: FuncConvert.ToFSharpFunc<T>(Action<T>)
  fullName: FuncConvert.ToFSharpFunc<T>(Action<T>)
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Unit>
  nameWithType: FSharpFunc<T,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action`1
  parent: System
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6*
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,T3,T4,T5,TResult>
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,T4,T5,TResult>
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,T4,T5,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5*
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,T3,T4,TResult>
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,T4,TResult>
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,T4,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4*
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,T3,TResult>
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,T3,TResult>
  fullName: FuncConvert.FuncFromTupled<T1,T2,T3,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3*
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: FuncFromTupled<T1,T2,TResult>
  nameWithType: FuncConvert.FuncFromTupled<T1,T2,TResult>
  fullName: FuncConvert.FuncFromTupled<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2*
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: ToFSharpFunc<T,TResult>
  nameWithType: FuncConvert.ToFSharpFunc<T,TResult>
  fullName: FuncConvert.ToFSharpFunc<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
- uid: Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1*
  parent: Microsoft.FSharp.Core.FuncConvert
  isExternal: false
  name: ToFSharpFunc<T>
  nameWithType: FuncConvert.ToFSharpFunc<T>
  fullName: FuncConvert.ToFSharpFunc<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/FuncConvert.xml
