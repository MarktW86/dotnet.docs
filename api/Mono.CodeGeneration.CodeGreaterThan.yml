### YamlMime:ManagedReference
items:
- uid: Mono.CodeGeneration.CodeGreaterThan
  commentId: T:Mono.CodeGeneration.CodeGreaterThan
  id: CodeGreaterThan
  children:
  - Mono.CodeGeneration.CodeGreaterThan.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeGreaterThan.Generate(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeGreaterThan.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  langs:
  - csharp
  name: CodeGreaterThan
  nameWithType: CodeGreaterThan
  fullName: Mono.CodeGeneration.CodeGreaterThan
  type: Class
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: 'public class CodeGreaterThan : Mono.CodeGeneration.CodeBinaryComparison'
  inheritance:
  - System.Object
  - Mono.CodeGeneration.CodeItem
  - Mono.CodeGeneration.CodeExpression
  - Mono.CodeGeneration.CodeConditionExpression
  - Mono.CodeGeneration.CodeBinaryComparison
  implements: []
  inheritedMembers:
  - Mono.CodeGeneration.CodeBinaryComparison.exp1
  - Mono.CodeGeneration.CodeBinaryComparison.exp2
  - Mono.CodeGeneration.CodeBinaryComparison.GetResultType
  - Mono.CodeGeneration.CodeBinaryComparison.PrintCode(Mono.CodeGeneration.CodeWriter)
  - Mono.CodeGeneration.CodeBinaryComparison.t1
  - Mono.CodeGeneration.CodeBinaryComparison.t2
  - Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.ArrayLength
  - Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.CallToString
  - Mono.CodeGeneration.CodeExpression.CastTo(System.Type)
  - Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeExpression.Is(System.Type)
  - Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsNull
  - Mono.CodeGeneration.CodeExpression.IsNumber
  - Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.String)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.String)
  - Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.NullValue(System.Type)
  - Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeGreaterThan.xml
- uid: Mono.CodeGeneration.CodeGreaterThan.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeGreaterThan.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: '#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)'
  parent: Mono.CodeGeneration.CodeGreaterThan
  langs:
  - csharp
  name: CodeGreaterThan(CodeExpression, CodeExpression)
  nameWithType: CodeGreaterThan.CodeGreaterThan(CodeExpression, CodeExpression)
  fullName: CodeGreaterThan.CodeGreaterThan(CodeExpression, CodeExpression)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public CodeGreaterThan (Mono.CodeGeneration.CodeExpression exp1, Mono.CodeGeneration.CodeExpression exp2);
    parameters:
    - id: exp1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: exp2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeGreaterThan.#ctor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeGreaterThan.xml
- uid: Mono.CodeGeneration.CodeGreaterThan.Generate(System.Reflection.Emit.ILGenerator)
  commentId: M:Mono.CodeGeneration.CodeGreaterThan.Generate(System.Reflection.Emit.ILGenerator)
  id: Generate(System.Reflection.Emit.ILGenerator)
  parent: Mono.CodeGeneration.CodeGreaterThan
  langs:
  - csharp
  name: Generate(ILGenerator)
  nameWithType: CodeGreaterThan.Generate(ILGenerator)
  fullName: CodeGreaterThan.Generate(ILGenerator)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public override void Generate (System.Reflection.Emit.ILGenerator gen);
    parameters:
    - id: gen
      type: System.Reflection.Emit.ILGenerator
      description: To be added.
  overload: Mono.CodeGeneration.CodeGreaterThan.Generate*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeGreaterThan.xml
- uid: Mono.CodeGeneration.CodeGreaterThan.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  commentId: M:Mono.CodeGeneration.CodeGreaterThan.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  id: GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  parent: Mono.CodeGeneration.CodeGreaterThan
  langs:
  - csharp
  name: GenerateForBranch(ILGenerator, Label, Boolean)
  nameWithType: CodeGreaterThan.GenerateForBranch(ILGenerator, Label, Boolean)
  fullName: CodeGreaterThan.GenerateForBranch(ILGenerator, Label, Boolean)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public override void GenerateForBranch (System.Reflection.Emit.ILGenerator gen, System.Reflection.Emit.Label label, bool branchCase);
    parameters:
    - id: gen
      type: System.Reflection.Emit.ILGenerator
      description: To be added.
    - id: label
      type: System.Reflection.Emit.Label
      description: To be added.
    - id: branchCase
      type: System.Boolean
      description: To be added.
  overload: Mono.CodeGeneration.CodeGreaterThan.GenerateForBranch*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeGreaterThan.xml
references:
- uid: Mono.CodeGeneration.CodeBinaryComparison
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeBinaryComparison
  nameWithType: CodeBinaryComparison
  fullName: Mono.CodeGeneration.CodeBinaryComparison
- uid: Mono.CodeGeneration.CodeGreaterThan.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeGreaterThan
  isExternal: false
  name: CodeGreaterThan(CodeExpression, CodeExpression)
  nameWithType: CodeGreaterThan.CodeGreaterThan(CodeExpression, CodeExpression)
  fullName: CodeGreaterThan.CodeGreaterThan(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: Mono.CodeGeneration.CodeExpression
- uid: Mono.CodeGeneration.CodeGreaterThan.Generate(System.Reflection.Emit.ILGenerator)
  parent: Mono.CodeGeneration.CodeGreaterThan
  isExternal: false
  name: Generate(ILGenerator)
  nameWithType: CodeGreaterThan.Generate(ILGenerator)
  fullName: CodeGreaterThan.Generate(ILGenerator)
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: Mono.CodeGeneration.CodeGreaterThan.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  parent: Mono.CodeGeneration.CodeGreaterThan
  isExternal: false
  name: GenerateForBranch(ILGenerator, Label, Boolean)
  nameWithType: CodeGreaterThan.GenerateForBranch(ILGenerator, Label, Boolean)
  fullName: CodeGreaterThan.GenerateForBranch(ILGenerator, Label, Boolean)
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mono.CodeGeneration.CodeGreaterThan.#ctor*
  parent: Mono.CodeGeneration.CodeGreaterThan
  isExternal: false
  name: CodeGreaterThan
  nameWithType: CodeGreaterThan.CodeGreaterThan
  fullName: CodeGreaterThan.CodeGreaterThan
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeGreaterThan.xml
- uid: Mono.CodeGeneration.CodeGreaterThan.Generate*
  parent: Mono.CodeGeneration.CodeGreaterThan
  isExternal: false
  name: Generate
  nameWithType: CodeGreaterThan.Generate
  fullName: CodeGreaterThan.Generate
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeGreaterThan.xml
- uid: Mono.CodeGeneration.CodeGreaterThan.GenerateForBranch*
  parent: Mono.CodeGeneration.CodeGreaterThan
  isExternal: false
  name: GenerateForBranch
  nameWithType: CodeGreaterThan.GenerateForBranch
  fullName: CodeGreaterThan.GenerateForBranch
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeGreaterThan.xml
