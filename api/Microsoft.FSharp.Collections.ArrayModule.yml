### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Collections.ArrayModule
  commentId: T:Microsoft.FSharp.Collections.ArrayModule
  id: ArrayModule
  children:
  - Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.ChunkBySize``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[],``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})
  - Microsoft.FSharp.Collections.ArrayModule.Contains``1(``0,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)
  - Microsoft.FSharp.Collections.ArrayModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)
  - Microsoft.FSharp.Collections.ArrayModule.Distinct``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Empty``1
  - Microsoft.FSharp.Collections.ArrayModule.ExactlyOne``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)
  - Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  - Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)
  - Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)
  - Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)
  - Microsoft.FSharp.Collections.ArrayModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Head``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Indexed``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  - Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Item``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.Last``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},``0[],``1[],``2[])
  - Microsoft.FSharp.Collections.ArrayModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},``0[],``1)
  - Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.ArrayModule.Pairwise``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Replicate``1(System.Int32,``0)
  - Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  - Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)
  - Microsoft.FSharp.Collections.ArrayModule.Singleton``1(``0)
  - Microsoft.FSharp.Collections.ArrayModule.Skip``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SortDescending``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SplitAt``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SplitInto``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Tail``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Take``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Truncate``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryHead``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryItem``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryLast``1(``0[])
  - Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  - Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])
  - Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])
  - Microsoft.FSharp.Collections.ArrayModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  - Microsoft.FSharp.Collections.ArrayModule.Windowed``1(System.Int32,``0[])
  - Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)
  - Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])
  - Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])
  langs:
  - csharp
  name: ArrayModule
  nameWithType: ArrayModule
  fullName: Microsoft.FSharp.Collections.ArrayModule
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      [Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)]

      [Microsoft.FSharp.Core.RequireQualifiedAccess]

      public static class ArrayModule
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.CompilationRepresentationAttribute
  - type: Microsoft.FSharp.Core.RequireQualifiedAccessAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])
  id: Append``1(``0[],``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Append<T>(T[], T[])
  nameWithType: ArrayModule.Append<T>(T[], T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Append<T>(T[], T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("append")]

      public static T[] Append<T> (T[] array1, T[] array2);
    parameters:
    - id: array1
      type: T[]
      description: To be added.
    - id: array2
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Append``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])
  id: Average``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Average<T>(T[])
  nameWithType: ArrayModule.Average<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Average<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("average")]

      public static T Average<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Average``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: AverageBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("averageBy")]

      public static TResult AverageBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.AverageBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  id: Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  nameWithType: ArrayModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("choose")]

      public static TResult[] Choose<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, T[] array);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TResult[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Choose``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ChunkBySize``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ChunkBySize``1(System.Int32,``0[])
  id: ChunkBySize``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ChunkBySize<T>(Int32, T[])
  nameWithType: ArrayModule.ChunkBySize<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ChunkBySize<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("chunkBySize")]

      public static T[][] ChunkBySize<T> (int chunkSize, T[] array);
    parameters:
    - id: chunkSize
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[][]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ChunkBySize``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])
  id: Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Collect<T,TResult>(FSharpFunc<T,TResult[]>, T[])
  nameWithType: ArrayModule.Collect<T,TResult>(FSharpFunc<T,TResult[]>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Collect<T,TResult>(FSharpFunc<T,TResult[]>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("collect")]

      public static TResult[] Collect<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult[]> mapping, T[] array);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T,TResult[]}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TResult[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Collect``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[],``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[],``0[])
  id: CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[],``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[], T[])
  nameWithType: ArrayModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[], T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[], T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("compareWith")]

      public static int CompareWith<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,int>> comparer, T[] array1, T[] array2);
    parameters:
    - id: comparer
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
      description: To be added.
    - id: array1
      type: T[]
      description: To be added.
    - id: array2
      type: T[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.CompareWith``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})
  id: Concat``1(System.Collections.Generic.IEnumerable{``0[]})
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Concat<T>(IEnumerable<T[]>)
  nameWithType: ArrayModule.Concat<T>(IEnumerable<T[]>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Concat<T>(IEnumerable<T[]>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("concat")]

      public static T[] Concat<T> (System.Collections.Generic.IEnumerable<T[]> arrays);
    parameters:
    - id: arrays
      type: System.Collections.Generic.IEnumerable{T[]}
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Concat``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Contains``1(``0,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Contains``1(``0,``0[])
  id: Contains``1(``0,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Contains<T>(T, T[])
  nameWithType: ArrayModule.Contains<T>(T, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Contains<T>(T, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("contains")]

      public static bool Contains<T> (T value, T[] array);
    parameters:
    - id: value
      type: T
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Contains``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])
  id: Copy``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Copy<T>(T[])
  nameWithType: ArrayModule.Copy<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Copy<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("copy")]

      public static T[] Copy<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Copy``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)
  id: CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: CopyTo<T>(T[], Int32, T[], Int32, Int32)
  nameWithType: ArrayModule.CopyTo<T>(T[], Int32, T[], Int32, Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.CopyTo<T>(T[], Int32, T[], Int32, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("blit")]

      public static void CopyTo<T> (T[] source, int sourceIndex, T[] target, int targetIndex, int count);
    parameters:
    - id: source
      type: T[]
      description: To be added.
    - id: sourceIndex
      type: System.Int32
      description: To be added.
    - id: target
      type: T[]
      description: To be added.
    - id: targetIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.CopyTo``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: CountBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("countBy")]

      public static Tuple<TKey,int>[] CountBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Tuple{TKey,System.Int32}[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.CountBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)
  id: Create``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Create<T>(Int32, T)
  nameWithType: ArrayModule.Create<T>(Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Create<T>(Int32, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("create")]

      public static T[] Create<T> (int count, T value);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Create``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Distinct``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Distinct``1(``0[])
  id: Distinct``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Distinct<T>(T[])
  nameWithType: ArrayModule.Distinct<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Distinct<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("distinct")]

      public static T[] Distinct<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Distinct``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: DistinctBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("distinctBy")]

      public static T[] DistinctBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.DistinctBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Empty``1
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Empty``1
  id: Empty``1
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Empty<T>()
  nameWithType: ArrayModule.Empty<T>()
  fullName: Microsoft.FSharp.Collections.ArrayModule.Empty<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("empty")]

      [Microsoft.FSharp.Core.GeneralizableValue]

      public static T[] Empty<T> ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Empty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  - type: Microsoft.FSharp.Core.GeneralizableValueAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ExactlyOne``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ExactlyOne``1(``0[])
  id: ExactlyOne``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ExactlyOne<T>(T[])
  nameWithType: ArrayModule.ExactlyOne<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ExactlyOne<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("exactlyOne")]

      public static T ExactlyOne<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ExactlyOne``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])
  id: Except``1(System.Collections.Generic.IEnumerable{``0},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Except<T>(IEnumerable<T>, T[])
  nameWithType: ArrayModule.Except<T>(IEnumerable<T>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Except<T>(IEnumerable<T>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("except")]

      public static T[] Except<T> (System.Collections.Generic.IEnumerable<T> itemsToExclude, T[] array);
    parameters:
    - id: itemsToExclude
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Except``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Exists<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Exists<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Exists<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists")]

      public static bool Exists<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Exists``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  id: Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  nameWithType: ArrayModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists2")]

      public static bool Exists2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,bool>> predicate, T1[] array1, T2[] array2);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Exists2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)
  id: Fill``1(``0[],System.Int32,System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Fill<T>(T[], Int32, Int32, T)
  nameWithType: ArrayModule.Fill<T>(T[], Int32, Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fill<T>(T[], Int32, Int32, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fill")]

      public static void Fill<T> (T[] target, int targetIndex, int count, T value);
    parameters:
    - id: target
      type: T[]
      description: To be added.
    - id: targetIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: value
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Fill``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Filter<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Filter<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Filter<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("filter")]

      public static T[] Filter<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Filter``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Find<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Find<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Find<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("find")]

      public static T Find<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Find``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: FindBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.FindBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindBack<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findBack")]

      public static T FindBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.FindBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: FindIndex<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.FindIndex<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindIndex<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findIndex")]

      public static int FindIndex<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.FindIndex``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: FindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findIndexBack")]

      public static int FindIndexBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.FindIndexBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  id: Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  nameWithType: ArrayModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold")]

      public static TState Fold<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>> folder, TState state, T[] array);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Fold``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])
  id: Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, T1[], T2[])
  nameWithType: ArrayModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold2")]

      public static TState Fold2<T1,T2,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TState>>> folder, TState state, T1[] array1, T2[] array2);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Fold2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  id: FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  nameWithType: ArrayModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack")]

      public static TState FoldBack<T,TState> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>> folder, T[] array, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.FoldBack``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)
  id: FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, T1[], T2[], TState)
  nameWithType: ArrayModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, T1[], T2[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, T1[], T2[], TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack2")]

      public static TState FoldBack2<T1,T2,TState> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>> folder, T1[] array1, T2[] array2, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ForAll<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.ForAll<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ForAll<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall")]

      public static bool ForAll<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ForAll``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  id: ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  nameWithType: ArrayModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall2")]

      public static bool ForAll2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,bool>> predicate, T1[] array1, T2[] array2);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ForAll2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)
  id: Get``1(``0[],System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Get<T>(T[], Int32)
  nameWithType: ArrayModule.Get<T>(T[], Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Get<T>(T[], Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("get")]

      public static T Get<T> (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Get``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)
  id: GetSubArray``1(``0[],System.Int32,System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: GetSubArray<T>(T[], Int32, Int32)
  nameWithType: ArrayModule.GetSubArray<T>(T[], Int32, Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.GetSubArray<T>(T[], Int32, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sub")]

      public static T[] GetSubArray<T> (T[] array, int startIndex, int count);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: GroupBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("groupBy")]

      public static Tuple<TKey,T[]>[] GroupBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Tuple{TKey,T[]}[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.GroupBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Head``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Head``1(``0[])
  id: Head``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Head<T>(T[])
  nameWithType: ArrayModule.Head<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Head<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("head")]

      public static T Head<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Head``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Indexed``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Indexed``1(``0[])
  id: Indexed``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Indexed<T>(T[])
  nameWithType: ArrayModule.Indexed<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Indexed<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("indexed")]

      public static Tuple<int,T>[] Indexed<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Tuple{System.Int32,T}[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Indexed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  id: Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Initialize<T>(Int32, FSharpFunc<Int32,T>)
  nameWithType: ArrayModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("init")]

      public static T[] Initialize<T> (int count, Microsoft.FSharp.Core.FSharpFunc<int,T> initializer);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: initializer
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,T}
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Initialize``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])
  id: IsEmpty``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: IsEmpty<T>(T[])
  nameWithType: ArrayModule.IsEmpty<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.IsEmpty<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("isEmpty")]

      public static bool IsEmpty<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Item``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Item``1(System.Int32,``0[])
  id: Item``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Item<T>(Int32, T[])
  nameWithType: ArrayModule.Item<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Item<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("item")]

      public static T Item<T> (int index, T[] array);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Item``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])
  id: Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Iterate<T>(FSharpFunc<T,Unit>, T[])
  nameWithType: ArrayModule.Iterate<T>(FSharpFunc<T,Unit>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Iterate<T>(FSharpFunc<T,Unit>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter")]

      public static void Iterate<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit> action, T[] array);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Iterate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])
  id: Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, T1[], T2[])
  nameWithType: ArrayModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter2")]

      public static void Iterate2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>> action, T1[] array1, T2[] array2);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Iterate2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])
  id: IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, T[])
  nameWithType: ArrayModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iteri")]

      public static void IterateIndexed<T> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>> action, T[] array);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])
  id: IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, T1[], T2[])
  nameWithType: ArrayModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iteri2")]

      public static void IterateIndexed2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>> action, T1[] array1, T2[] array2);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Last``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Last``1(``0[])
  id: Last``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Last<T>(T[])
  nameWithType: ArrayModule.Last<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Last<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("last")]

      public static T Last<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Last``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])
  id: Length``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Length<T>(T[])
  nameWithType: ArrayModule.Length<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Length<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("length")]

      public static int Length<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Length``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Map<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.Map<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map<T,TResult>(FSharpFunc<T,TResult>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map")]

      public static TResult[] Map<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> mapping, T[] array);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TResult[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Map``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])
  id: Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, T1[], T2[])
  nameWithType: ArrayModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map2")]

      public static TResult[] Map2<T1,T2,TResult> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>> mapping, T1[] array1, T2[] array2);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    return:
      type: TResult[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Map2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},``0[],``1[],``2[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},``0[],``1[],``2[])
  id: Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},``0[],``1[],``2[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, T1[], T2[], T3[])
  nameWithType: ArrayModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, T1[], T2[], T3[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, T1[], T2[], T3[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map3")]

      public static TResult[] Map3<T1,T2,T3,TResult> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>> mapping, T1[] array1, T2[] array2, T3[] array3);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    - id: array3
      type: T3[]
      description: To be added.
    return:
      type: TResult[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Map3``4*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,``0[])
  id: MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, T[])
  nameWithType: ArrayModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapFold")]

      public static Tuple<TResult[],TState> MapFold<T,TState,TResult> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,Tuple<TResult,TState>>> mapping, TState state, T[] array);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,System.Tuple{TResult,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Tuple{TResult[],TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.MapFold``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},``0[],``1)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},``0[],``1)
  id: MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},``0[],``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, T[], TState)
  nameWithType: ArrayModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, T[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, T[], TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapFoldBack")]

      public static Tuple<TResult[],TState> MapFoldBack<T,TState,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,Tuple<TResult,TState>>> mapping, T[] array, TState state);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,System.Tuple{TResult,TState}}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: System.Tuple{TResult[],TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.MapFoldBack``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])
  id: MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, T[])
  nameWithType: ArrayModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapi")]

      public static TResult[] MapIndexed<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T,TResult>> mapping, T[] array);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TResult[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])
  id: MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, T1[], T2[])
  nameWithType: ArrayModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapi2")]

      public static TResult[] MapIndexed2<T1,T2,TResult> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>> mapping, T1[] array1, T2[] array2);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}}
      description: To be added.
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    return:
      type: TResult[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])
  id: Max``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Max<T>(T[])
  nameWithType: ArrayModule.Max<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Max<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("max")]

      public static T Max<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Max``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: MaxBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("maxBy")]

      public static T MaxBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.MaxBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])
  id: Min``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Min<T>(T[])
  nameWithType: ArrayModule.Min<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Min<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("min")]

      public static T Min<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Min``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: MinBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("minBy")]

      public static T MinBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.MinBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: OfList<T>(FSharpList<T>)
  nameWithType: ArrayModule.OfList<T>(FSharpList<T>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.OfList<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofList")]

      public static T[] OfList<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.OfList``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  id: OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: OfSeq<T>(IEnumerable<T>)
  nameWithType: ArrayModule.OfSeq<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.OfSeq<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofSeq")]

      public static T[] OfSeq<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.OfSeq``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Pairwise``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Pairwise``1(``0[])
  id: Pairwise``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Pairwise<T>(T[])
  nameWithType: ArrayModule.Pairwise<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Pairwise<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("pairwise")]

      public static Tuple<T,T>[] Pairwise<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Tuple{T,T}[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Pairwise``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Partition<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Partition<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Partition<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("partition")]

      public static Tuple<T[],T[]> Partition<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Tuple{T[],T[]}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Partition``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])
  id: Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Permute<T>(FSharpFunc<Int32,Int32>, T[])
  nameWithType: ArrayModule.Permute<T>(FSharpFunc<Int32,Int32>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Permute<T>(FSharpFunc<Int32,Int32>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("permute")]

      public static T[] Permute<T> (Microsoft.FSharp.Core.FSharpFunc<int,int> indexMap, T[] array);
    parameters:
    - id: indexMap
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Permute``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  id: Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  nameWithType: ArrayModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("pick")]

      public static TResult Pick<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, T[] array);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Pick``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  id: Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  nameWithType: ArrayModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("reduce")]

      public static T Reduce<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>> reduction, T[] array);
    parameters:
    - id: reduction
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Reduce``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  id: ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  nameWithType: ArrayModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("reduceBack")]

      public static T ReduceBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>> reduction, T[] array);
    parameters:
    - id: reduction
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Replicate``1(System.Int32,``0)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Replicate``1(System.Int32,``0)
  id: Replicate``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Replicate<T>(Int32, T)
  nameWithType: ArrayModule.Replicate<T>(Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Replicate<T>(Int32, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("replicate")]

      public static T[] Replicate<T> (int count, T initial);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: initial
      type: T
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Replicate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])
  id: Reverse``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Reverse<T>(T[])
  nameWithType: ArrayModule.Reverse<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Reverse<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("rev")]

      public static T[] Reverse<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Reverse``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  id: Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  nameWithType: ArrayModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("scan")]

      public static TState[] Scan<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>> folder, TState state, T[] array);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TState[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Scan``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  id: ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  nameWithType: ArrayModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("scanBack")]

      public static TState[] ScanBack<T,TState> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>> folder, T[] array, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: TState[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ScanBack``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)
  id: Set``1(``0[],System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Set<T>(T[], Int32, T)
  nameWithType: ArrayModule.Set<T>(T[], Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Set<T>(T[], Int32, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("set")]

      public static void Set<T> (T[] array, int index, T value);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: value
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Set``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Singleton``1(``0)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Singleton``1(``0)
  id: Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Singleton<T>(T)
  nameWithType: ArrayModule.Singleton<T>(T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Singleton<T>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("singleton")]

      public static T[] Singleton<T> (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Singleton``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Skip``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Skip``1(System.Int32,``0[])
  id: Skip``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Skip<T>(Int32, T[])
  nameWithType: ArrayModule.Skip<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Skip<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("skip")]

      public static T[] Skip<T> (int count, T[] array);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Skip``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SkipWhile<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.SkipWhile<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SkipWhile<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("skipWhile")]

      public static T[] SkipWhile<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SkipWhile``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])
  id: Sort``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Sort<T>(T[])
  nameWithType: ArrayModule.Sort<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Sort<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sort")]

      public static T[] Sort<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Sort``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SortBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortBy")]

      public static T[] SortBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SortBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SortByDescending<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortByDescending")]

      public static T[] SortByDescending<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SortByDescending``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortDescending``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SortDescending``1(``0[])
  id: SortDescending``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SortDescending<T>(T[])
  nameWithType: ArrayModule.SortDescending<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortDescending<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sortDescending")]

      public static T[] SortDescending<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SortDescending``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])
  id: SortInPlace``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SortInPlace<T>(T[])
  nameWithType: ArrayModule.SortInPlace<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlace<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sortInPlace")]

      public static void SortInPlace<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SortInPlaceBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.SortInPlaceBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortInPlaceBy")]

      public static void SortInPlaceBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  id: SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SortInPlaceWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  nameWithType: ArrayModule.SortInPlaceWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortInPlaceWith")]

      public static void SortInPlaceWith<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,int>> comparer, T[] array);
    parameters:
    - id: comparer
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  id: SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  nameWithType: ArrayModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortWith")]

      public static T[] SortWith<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,int>> comparer, T[] array);
    parameters:
    - id: comparer
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SortWith``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SplitAt``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SplitAt``1(System.Int32,``0[])
  id: SplitAt``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SplitAt<T>(Int32, T[])
  nameWithType: ArrayModule.SplitAt<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SplitAt<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("splitAt")]

      public static Tuple<T[],T[]> SplitAt<T> (int index, T[] array);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Tuple{T[],T[]}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SplitAt``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SplitInto``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SplitInto``1(System.Int32,``0[])
  id: SplitInto``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SplitInto<T>(Int32, T[])
  nameWithType: ArrayModule.SplitInto<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SplitInto<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("splitInto")]

      public static T[][] SplitInto<T> (int count, T[] array);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[][]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SplitInto``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])
  id: Sum``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Sum<T>(T[])
  nameWithType: ArrayModule.Sum<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Sum<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sum")]

      public static T Sum<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Sum``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  id: SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: SumBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sumBy")]

      public static TResult SumBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, T[] array);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.SumBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Tail``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Tail``1(``0[])
  id: Tail``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Tail<T>(T[])
  nameWithType: ArrayModule.Tail<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Tail<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tail")]

      public static T[] Tail<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Tail``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Take``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Take``1(System.Int32,``0[])
  id: Take``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Take<T>(Int32, T[])
  nameWithType: ArrayModule.Take<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Take<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("take")]

      public static T[] Take<T> (int count, T[] array);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Take``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TakeWhile<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TakeWhile<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TakeWhile<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("takeWhile")]

      public static T[] TakeWhile<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TakeWhile``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])
  id: ToList``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ToList<T>(T[])
  nameWithType: ArrayModule.ToList<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ToList<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toList")]

      public static Microsoft.FSharp.Collections.FSharpList<T> ToList<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ToList``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])
  id: ToSeq``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ToSeq<T>(T[])
  nameWithType: ArrayModule.ToSeq<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ToSeq<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toSeq")]

      public static System.Collections.Generic.IEnumerable<T> ToSeq<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ToSeq``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Truncate``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Truncate``1(System.Int32,``0[])
  id: Truncate``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Truncate<T>(Int32, T[])
  nameWithType: ArrayModule.Truncate<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Truncate<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("truncate")]

      public static T[] Truncate<T> (int count, T[] array);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Truncate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryFind<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFind<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFind<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFind")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryFind<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryFind``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryFindBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFindBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindBack<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindBack")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryFindBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryFindBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryFindIndex<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindIndex")]

      public static Microsoft.FSharp.Core.FSharpOption<int> TryFindIndex<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryFindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindIndexBack")]

      public static Microsoft.FSharp.Core.FSharpOption<int> TryFindIndexBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryHead``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryHead``1(``0[])
  id: TryHead``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryHead<T>(T[])
  nameWithType: ArrayModule.TryHead<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryHead<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tryHead")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryHead<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryHead``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryItem``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryItem``1(System.Int32,``0[])
  id: TryItem``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryItem<T>(Int32, T[])
  nameWithType: ArrayModule.TryItem<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryItem<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryItem")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryItem<T> (int index, T[] array);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryItem``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryLast``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryLast``1(``0[])
  id: TryLast``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryLast<T>(T[])
  nameWithType: ArrayModule.TryLast<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryLast<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tryLast")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryLast<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryLast``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  id: TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  nameWithType: ArrayModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryPick")]

      public static Microsoft.FSharp.Core.FSharpOption<TResult> TryPick<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, T[] array);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.TryPick``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  id: Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  nameWithType: ArrayModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("unfold")]

      public static T[] Unfold<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpOption<Tuple<T,TState>>> generator, TState state);
    parameters:
    - id: generator
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpOption{System.Tuple{T,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Unfold``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])
  id: Unzip``2(System.Tuple{``0,``1}[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Unzip<T1,T2>(Tuple<T1,T2>[])
  nameWithType: ArrayModule.Unzip<T1,T2>(Tuple<T1,T2>[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unzip<T1,T2>(Tuple<T1,T2>[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("unzip")]

      public static Tuple<T1[],T2[]> Unzip<T1,T2> (Tuple<T1,T2>[] array);
    parameters:
    - id: array
      type: System.Tuple{T1,T2}[]
      description: To be added.
    return:
      type: System.Tuple{T1[],T2[]}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Unzip``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])
  id: Unzip3``3(System.Tuple{``0,``1,``2}[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Unzip3<T1,T2,T3>(Tuple<T1,T2,T3>[])
  nameWithType: ArrayModule.Unzip3<T1,T2,T3>(Tuple<T1,T2,T3>[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unzip3<T1,T2,T3>(Tuple<T1,T2,T3>[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("unzip3")]

      public static Tuple<T1[],T2[],T3[]> Unzip3<T1,T2,T3> (Tuple<T1,T2,T3>[] array);
    parameters:
    - id: array
      type: System.Tuple{T1,T2,T3}[]
      description: To be added.
    return:
      type: System.Tuple{T1[],T2[],T3[]}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Unzip3``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  id: Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Where<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Where<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Where<T>(FSharpFunc<T,Boolean>, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("where")]

      public static T[] Where<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, T[] array);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Where``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Windowed``1(System.Int32,``0[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Windowed``1(System.Int32,``0[])
  id: Windowed``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Windowed<T>(Int32, T[])
  nameWithType: ArrayModule.Windowed<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Windowed<T>(Int32, T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("windowed")]

      public static T[][] Windowed<T> (int windowSize, T[] array);
    parameters:
    - id: windowSize
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    return:
      type: T[][]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Windowed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)
  id: ZeroCreate``1(System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: ZeroCreate<T>(Int32)
  nameWithType: ArrayModule.ZeroCreate<T>(Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.ZeroCreate<T>(Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("zeroCreate")]

      public static T[] ZeroCreate<T> (int count);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])
  id: Zip``2(``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Zip<T1,T2>(T1[], T2[])
  nameWithType: ArrayModule.Zip<T1,T2>(T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Zip<T1,T2>(T1[], T2[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("zip")]

      public static Tuple<T1,T2>[] Zip<T1,T2> (T1[] array1, T2[] array2);
    parameters:
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    return:
      type: System.Tuple{T1,T2}[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Zip``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])
  commentId: M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])
  id: Zip3``3(``0[],``1[],``2[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  langs:
  - csharp
  name: Zip3<T1,T2,T3>(T1[], T2[], T3[])
  nameWithType: ArrayModule.Zip3<T1,T2,T3>(T1[], T2[], T3[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Zip3<T1,T2,T3>(T1[], T2[], T3[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("zip3")]

      public static Tuple<T1,T2,T3>[] Zip3<T1,T2,T3> (T1[] array1, T2[] array2, T3[] array3);
    parameters:
    - id: array1
      type: T1[]
      description: To be added.
    - id: array2
      type: T2[]
      description: To be added.
    - id: array3
      type: T3[]
      description: To be added.
    return:
      type: System.Tuple{T1,T2,T3}[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ArrayModule.Zip3``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Append<T>(T[], T[])
  nameWithType: ArrayModule.Append<T>(T[], T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Append<T>(T[], T[])
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Average<T>(T[])
  nameWithType: ArrayModule.Average<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Average<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: AverageBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, T[])
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  nameWithType: ArrayModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
- uid: TResult[]
  isExternal: true
  name: TResult[]
  nameWithType: TResult[]
  fullName: TResult[]
  spec.csharp:
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpOption<TResult>>
  nameWithType: FSharpFunc<T,FSharpOption<TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.ChunkBySize``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ChunkBySize<T>(Int32, T[])
  nameWithType: ArrayModule.ChunkBySize<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ChunkBySize<T>(Int32, T[])
- uid: T[][]
  isExternal: true
  name: T[][]
  nameWithType: T[][]
  fullName: T[][]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Collect<T,TResult>(FSharpFunc<T,TResult[]>, T[])
  nameWithType: ArrayModule.Collect<T,TResult>(FSharpFunc<T,TResult[]>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Collect<T,TResult>(FSharpFunc<T,TResult[]>, T[])
- uid: Microsoft.FSharp.Core.FSharpFunc{T,TResult[]}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TResult[]>
  nameWithType: FSharpFunc<T,TResult[]>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult[]>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[],``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[], T[])
  nameWithType: ArrayModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[], T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[], T[])
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<T,Int32>>
  nameWithType: FSharpFunc<T,FSharpFunc<T,Int32>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,System.Int32>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Concat<T>(IEnumerable<T[]>)
  nameWithType: ArrayModule.Concat<T>(IEnumerable<T[]>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Concat<T>(IEnumerable<T[]>)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{T[]}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T[]>
  nameWithType: IEnumerable<T[]>
  fullName: System.Collections.Generic.IEnumerable<T[]>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Contains``1(``0,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Contains<T>(T, T[])
  nameWithType: ArrayModule.Contains<T>(T, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Contains<T>(T, T[])
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Copy<T>(T[])
  nameWithType: ArrayModule.Copy<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Copy<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: CopyTo<T>(T[], Int32, T[], Int32, Int32)
  nameWithType: ArrayModule.CopyTo<T>(T[], Int32, T[], Int32, Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.CopyTo<T>(T[], Int32, T[], Int32, Int32)
- uid: Microsoft.FSharp.Collections.ArrayModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: CountBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, T[])
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Tuple{TKey,System.Int32}[]
  parent: System
  isExternal: false
  name: Tuple<TKey,Int32>[]
  nameWithType: Tuple<TKey,Int32>[]
  fullName: System.Tuple<TKey,System.Int32>[]
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TKey>
  nameWithType: FSharpFunc<T,TKey>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TKey>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Create<T>(Int32, T)
  nameWithType: ArrayModule.Create<T>(Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Create<T>(Int32, T)
- uid: Microsoft.FSharp.Collections.ArrayModule.Distinct``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Distinct<T>(T[])
  nameWithType: ArrayModule.Distinct<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Distinct<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: DistinctBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Empty``1
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Empty<T>()
  nameWithType: ArrayModule.Empty<T>()
  fullName: Microsoft.FSharp.Collections.ArrayModule.Empty<T>()
- uid: Microsoft.FSharp.Collections.ArrayModule.ExactlyOne``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ExactlyOne<T>(T[])
  nameWithType: ArrayModule.ExactlyOne<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ExactlyOne<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Except``1(System.Collections.Generic.IEnumerable{``0},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Except<T>(IEnumerable<T>, T[])
  nameWithType: ArrayModule.Except<T>(IEnumerable<T>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Except<T>(IEnumerable<T>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Exists<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Exists<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Exists<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Boolean>
  nameWithType: FSharpFunc<T,Boolean>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  nameWithType: ArrayModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,Boolean>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,Boolean>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,System.Boolean>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: T1[]
  isExternal: true
  name: T1[]
  nameWithType: T1[]
  fullName: T1[]
  spec.csharp:
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: T2[]
  isExternal: true
  name: T2[]
  nameWithType: T2[]
  fullName: T2[]
  spec.csharp:
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Fill<T>(T[], Int32, Int32, T)
  nameWithType: ArrayModule.Fill<T>(T[], Int32, Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fill<T>(T[], Int32, Int32, T)
- uid: Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Filter<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Filter<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Filter<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Find<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Find<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Find<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FindBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.FindBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindBack<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FindIndex<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.FindIndex<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindIndex<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  nameWithType: ArrayModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
- uid: TState
  isExternal: true
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T,TState>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, T1[], T2[])
  nameWithType: ArrayModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, T1[], T2[])
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  nameWithType: ArrayModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<TState,TState>>
  nameWithType: FSharpFunc<T,FSharpFunc<TState,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, T1[], T2[], TState)
  nameWithType: ArrayModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, T1[], T2[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, T1[], T2[], TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ForAll<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.ForAll<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ForAll<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  nameWithType: ArrayModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, T1[], T2[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Get<T>(T[], Int32)
  nameWithType: ArrayModule.Get<T>(T[], Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Get<T>(T[], Int32)
- uid: Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: GetSubArray<T>(T[], Int32, Int32)
  nameWithType: ArrayModule.GetSubArray<T>(T[], Int32, Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.GetSubArray<T>(T[], Int32, Int32)
- uid: Microsoft.FSharp.Collections.ArrayModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: GroupBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, T[])
- uid: System.Tuple{TKey,T[]}[]
  parent: System
  isExternal: false
  name: Tuple<TKey,T[]>[]
  nameWithType: Tuple<TKey,T[]>[]
  fullName: System.Tuple<TKey,T[]>[]
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.Head``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Head<T>(T[])
  nameWithType: ArrayModule.Head<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Head<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Indexed``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Indexed<T>(T[])
  nameWithType: ArrayModule.Indexed<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Indexed<T>(T[])
- uid: System.Tuple{System.Int32,T}[]
  parent: System
  isExternal: false
  name: Tuple<Int32,T>[]
  nameWithType: Tuple<Int32,T>[]
  fullName: System.Tuple<System.Int32,T>[]
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Initialize<T>(Int32, FSharpFunc<Int32,T>)
  nameWithType: ArrayModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,T}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,T>
  nameWithType: FSharpFunc<Int32,T>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: IsEmpty<T>(T[])
  nameWithType: ArrayModule.IsEmpty<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.IsEmpty<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Item``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Item<T>(Int32, T[])
  nameWithType: ArrayModule.Item<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Item<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Iterate<T>(FSharpFunc<T,Unit>, T[])
  nameWithType: ArrayModule.Iterate<T>(FSharpFunc<T,Unit>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Iterate<T>(FSharpFunc<T,Unit>, T[])
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Unit>
  nameWithType: FSharpFunc<T,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, T1[], T2[])
  nameWithType: ArrayModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, T1[], T2[])
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,Unit>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, T[])
  nameWithType: ArrayModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, T[])
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T,Unit>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, T1[], T2[])
  nameWithType: ArrayModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, T1[], T2[])
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Last``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Last<T>(T[])
  nameWithType: ArrayModule.Last<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Last<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Length<T>(T[])
  nameWithType: ArrayModule.Length<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Length<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Map<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.Map<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map<T,TResult>(FSharpFunc<T,TResult>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, T1[], T2[])
  nameWithType: ArrayModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, T1[], T2[])
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},``0[],``1[],``2[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, T1[], T2[], T3[])
  nameWithType: ArrayModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, T1[], T2[], T3[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, T1[], T2[], T3[])
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: T3[]
  isExternal: true
  name: T3[]
  nameWithType: T3[]
  fullName: T3[]
  spec.csharp:
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, T[])
  nameWithType: ArrayModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, T[])
- uid: System.Tuple{TResult[],TState}
  parent: System
  isExternal: false
  name: Tuple<TResult[],TState>
  nameWithType: Tuple<TResult[],TState>
  fullName: System.Tuple<TResult[],TState>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,System.Tuple{TResult,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,System.Tuple<TResult,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},``0[],``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, T[], TState)
  nameWithType: ArrayModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, T[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, T[], TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,System.Tuple{TResult,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>
  nameWithType: FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,System.Tuple<TResult,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, T[])
  nameWithType: ArrayModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, T[])
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T,TResult>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, T1[], T2[])
  nameWithType: ArrayModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, T1[], T2[])
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Max<T>(T[])
  nameWithType: ArrayModule.Max<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Max<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MaxBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Min<T>(T[])
  nameWithType: ArrayModule.Min<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Min<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MinBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: OfList<T>(FSharpList<T>)
  nameWithType: ArrayModule.OfList<T>(FSharpList<T>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.OfList<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList`1
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<T>
  nameWithType: FSharpList<T>
  fullName: Microsoft.FSharp.Collections.FSharpList<T>
- uid: Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: OfSeq<T>(IEnumerable<T>)
  nameWithType: ArrayModule.OfSeq<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.ArrayModule.OfSeq<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.ArrayModule.Pairwise``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Pairwise<T>(T[])
  nameWithType: ArrayModule.Pairwise<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Pairwise<T>(T[])
- uid: System.Tuple{T,T}[]
  parent: System
  isExternal: false
  name: Tuple<T,T>[]
  nameWithType: Tuple<T,T>[]
  fullName: System.Tuple<T,T>[]
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Partition<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Partition<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Partition<T>(FSharpFunc<T,Boolean>, T[])
- uid: System.Tuple{T[],T[]}
  parent: System
  isExternal: false
  name: Tuple<T[],T[]>
  nameWithType: Tuple<T[],T[]>
  fullName: System.Tuple<T[],T[]>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Permute<T>(FSharpFunc<Int32,Int32>, T[])
  nameWithType: ArrayModule.Permute<T>(FSharpFunc<Int32,Int32>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Permute<T>(FSharpFunc<Int32,Int32>, T[])
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,Int32>
  nameWithType: FSharpFunc<Int32,Int32>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  nameWithType: ArrayModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  nameWithType: ArrayModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<T,T>>
  nameWithType: FSharpFunc<T,FSharpFunc<T,T>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  nameWithType: ArrayModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Replicate``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Replicate<T>(Int32, T)
  nameWithType: ArrayModule.Replicate<T>(Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Replicate<T>(Int32, T)
- uid: Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Reverse<T>(T[])
  nameWithType: ArrayModule.Reverse<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Reverse<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  nameWithType: ArrayModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, T[])
- uid: TState[]
  isExternal: true
  name: TState[]
  nameWithType: TState[]
  fullName: TState[]
  spec.csharp:
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  nameWithType: ArrayModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, T[], TState)
- uid: Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Set<T>(T[], Int32, T)
  nameWithType: ArrayModule.Set<T>(T[], Int32, T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Set<T>(T[], Int32, T)
- uid: Microsoft.FSharp.Collections.ArrayModule.Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Singleton<T>(T)
  nameWithType: ArrayModule.Singleton<T>(T)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Singleton<T>(T)
- uid: Microsoft.FSharp.Collections.ArrayModule.Skip``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Skip<T>(Int32, T[])
  nameWithType: ArrayModule.Skip<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Skip<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SkipWhile<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.SkipWhile<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SkipWhile<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Sort<T>(T[])
  nameWithType: ArrayModule.Sort<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Sort<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortByDescending<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SortDescending``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortDescending<T>(T[])
  nameWithType: ArrayModule.SortDescending<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortDescending<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortInPlace<T>(T[])
  nameWithType: ArrayModule.SortInPlace<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlace<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortInPlaceBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  nameWithType: ArrayModule.SortInPlaceBy<T,TKey>(FSharpFunc<T,TKey>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy<T,TKey>(FSharpFunc<T,TKey>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortInPlaceWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  nameWithType: ArrayModule.SortInPlaceWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  nameWithType: ArrayModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SplitAt``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SplitAt<T>(Int32, T[])
  nameWithType: ArrayModule.SplitAt<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SplitAt<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SplitInto``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SplitInto<T>(Int32, T[])
  nameWithType: ArrayModule.SplitInto<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SplitInto<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Sum<T>(T[])
  nameWithType: ArrayModule.Sum<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Sum<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SumBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  nameWithType: ArrayModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Tail``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Tail<T>(T[])
  nameWithType: ArrayModule.Tail<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Tail<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Take``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Take<T>(Int32, T[])
  nameWithType: ArrayModule.Take<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Take<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TakeWhile<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TakeWhile<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TakeWhile<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ToList<T>(T[])
  nameWithType: ArrayModule.ToList<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ToList<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ToSeq<T>(T[])
  nameWithType: ArrayModule.ToSeq<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.ToSeq<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Truncate``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Truncate<T>(Int32, T[])
  nameWithType: ArrayModule.Truncate<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Truncate<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFind<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFind<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFind<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFindBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFindBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindBack<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFindIndex<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Core.FSharpOption{System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<Int32>
  nameWithType: FSharpOption<Int32>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TryHead``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryHead<T>(T[])
  nameWithType: ArrayModule.TryHead<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryHead<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TryItem``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryItem<T>(Int32, T[])
  nameWithType: ArrayModule.TryItem<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryItem<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TryLast``1(``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryLast<T>(T[])
  nameWithType: ArrayModule.TryLast<T>(T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryLast<T>(T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  nameWithType: ArrayModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, T[])
- uid: Microsoft.FSharp.Core.FSharpOption{TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<TResult>
  nameWithType: FSharpOption<TResult>
  fullName: Microsoft.FSharp.Core.FSharpOption<TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  nameWithType: ArrayModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpOption{System.Tuple{T,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>
  nameWithType: FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpOption<System.Tuple<T,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Unzip<T1,T2>(Tuple<T1,T2>[])
  nameWithType: ArrayModule.Unzip<T1,T2>(Tuple<T1,T2>[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unzip<T1,T2>(Tuple<T1,T2>[])
- uid: System.Tuple{T1[],T2[]}
  parent: System
  isExternal: false
  name: Tuple<T1[],T2[]>
  nameWithType: Tuple<T1[],T2[]>
  fullName: System.Tuple<T1[],T2[]>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Tuple{T1,T2}[]
  parent: System
  isExternal: false
  name: Tuple<T1,T2>[]
  nameWithType: Tuple<T1,T2>[]
  fullName: System.Tuple<T1,T2>[]
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Unzip3<T1,T2,T3>(Tuple<T1,T2,T3>[])
  nameWithType: ArrayModule.Unzip3<T1,T2,T3>(Tuple<T1,T2,T3>[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unzip3<T1,T2,T3>(Tuple<T1,T2,T3>[])
- uid: System.Tuple`3
  name: Tuple<T1,T2,T3>
  nameWithType: Tuple<T1,T2,T3>
  fullName: System.Tuple<T1,T2,T3>
- uid: System.Tuple{T1[],T2[],T3[]}
  parent: System
  isExternal: false
  name: Tuple<T1[],T2[],T3[]>
  nameWithType: Tuple<T1[],T2[],T3[]>
  fullName: System.Tuple<T1[],T2[],T3[]>
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Tuple{T1,T2,T3}[]
  parent: System
  isExternal: false
  name: Tuple<T1,T2,T3>[]
  nameWithType: Tuple<T1,T2,T3>[]
  fullName: System.Tuple<T1,T2,T3>[]
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ArrayModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Where<T>(FSharpFunc<T,Boolean>, T[])
  nameWithType: ArrayModule.Where<T>(FSharpFunc<T,Boolean>, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Where<T>(FSharpFunc<T,Boolean>, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Windowed``1(System.Int32,``0[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Windowed<T>(Int32, T[])
  nameWithType: ArrayModule.Windowed<T>(Int32, T[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Windowed<T>(Int32, T[])
- uid: Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ZeroCreate<T>(Int32)
  nameWithType: ArrayModule.ZeroCreate<T>(Int32)
  fullName: Microsoft.FSharp.Collections.ArrayModule.ZeroCreate<T>(Int32)
- uid: Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Zip<T1,T2>(T1[], T2[])
  nameWithType: ArrayModule.Zip<T1,T2>(T1[], T2[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Zip<T1,T2>(T1[], T2[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Zip3<T1,T2,T3>(T1[], T2[], T3[])
  nameWithType: ArrayModule.Zip3<T1,T2,T3>(T1[], T2[], T3[])
  fullName: Microsoft.FSharp.Collections.ArrayModule.Zip3<T1,T2,T3>(T1[], T2[], T3[])
- uid: Microsoft.FSharp.Collections.ArrayModule.Append``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Append<T>
  nameWithType: ArrayModule.Append<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Append<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Average``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Average<T>
  nameWithType: ArrayModule.Average<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Average<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.AverageBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: AverageBy<T,TResult>
  nameWithType: ArrayModule.AverageBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.AverageBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Choose``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Choose<T,TResult>
  nameWithType: ArrayModule.Choose<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Choose<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ChunkBySize``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ChunkBySize<T>
  nameWithType: ArrayModule.ChunkBySize<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ChunkBySize<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Collect``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Collect<T,TResult>
  nameWithType: ArrayModule.Collect<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Collect<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.CompareWith``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: CompareWith<T>
  nameWithType: ArrayModule.CompareWith<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.CompareWith<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Concat``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Concat<T>
  nameWithType: ArrayModule.Concat<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Concat<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Contains``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Contains<T>
  nameWithType: ArrayModule.Contains<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Contains<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Copy``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Copy<T>
  nameWithType: ArrayModule.Copy<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Copy<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.CopyTo``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: CopyTo<T>
  nameWithType: ArrayModule.CopyTo<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.CopyTo<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.CountBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: CountBy<T,TKey>
  nameWithType: ArrayModule.CountBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.ArrayModule.CountBy<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Create``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Create<T>
  nameWithType: ArrayModule.Create<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Create<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Distinct``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Distinct<T>
  nameWithType: ArrayModule.Distinct<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Distinct<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.DistinctBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: DistinctBy<T,TKey>
  nameWithType: ArrayModule.DistinctBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.ArrayModule.DistinctBy<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Empty``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Empty<T>
  nameWithType: ArrayModule.Empty<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Empty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ExactlyOne``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ExactlyOne<T>
  nameWithType: ArrayModule.ExactlyOne<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ExactlyOne<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Except``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Except<T>
  nameWithType: ArrayModule.Except<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Except<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Exists``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Exists<T>
  nameWithType: ArrayModule.Exists<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Exists<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Exists2``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Exists2<T1,T2>
  nameWithType: ArrayModule.Exists2<T1,T2>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Exists2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Fill``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Fill<T>
  nameWithType: ArrayModule.Fill<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fill<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Filter``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Filter<T>
  nameWithType: ArrayModule.Filter<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Filter<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Find``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Find<T>
  nameWithType: ArrayModule.Find<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Find<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FindBack``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FindBack<T>
  nameWithType: ArrayModule.FindBack<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FindIndex``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FindIndex<T>
  nameWithType: ArrayModule.FindIndex<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindIndex<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FindIndexBack``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FindIndexBack<T>
  nameWithType: ArrayModule.FindIndexBack<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.FindIndexBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Fold``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Fold<T,TState>
  nameWithType: ArrayModule.Fold<T,TState>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fold<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Fold2``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Fold2<T1,T2,TState>
  nameWithType: ArrayModule.Fold2<T1,T2,TState>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Fold2<T1,T2,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FoldBack``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FoldBack<T,TState>
  nameWithType: ArrayModule.FoldBack<T,TState>
  fullName: Microsoft.FSharp.Collections.ArrayModule.FoldBack<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: FoldBack2<T1,T2,TState>
  nameWithType: ArrayModule.FoldBack2<T1,T2,TState>
  fullName: Microsoft.FSharp.Collections.ArrayModule.FoldBack2<T1,T2,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ForAll``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ForAll<T>
  nameWithType: ArrayModule.ForAll<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ForAll<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ForAll2``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ForAll2<T1,T2>
  nameWithType: ArrayModule.ForAll2<T1,T2>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ForAll2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Get``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Get<T>
  nameWithType: ArrayModule.Get<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Get<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: GetSubArray<T>
  nameWithType: ArrayModule.GetSubArray<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.GetSubArray<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.GroupBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: GroupBy<T,TKey>
  nameWithType: ArrayModule.GroupBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.ArrayModule.GroupBy<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Head``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Head<T>
  nameWithType: ArrayModule.Head<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Head<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Indexed``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Indexed<T>
  nameWithType: ArrayModule.Indexed<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Indexed<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Initialize``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Initialize<T>
  nameWithType: ArrayModule.Initialize<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Initialize<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: IsEmpty<T>
  nameWithType: ArrayModule.IsEmpty<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.IsEmpty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Item``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Item<T>
  nameWithType: ArrayModule.Item<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Item<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Iterate``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Iterate<T>
  nameWithType: ArrayModule.Iterate<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Iterate<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Iterate2``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Iterate2<T1,T2>
  nameWithType: ArrayModule.Iterate2<T1,T2>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Iterate2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: IterateIndexed<T>
  nameWithType: ArrayModule.IterateIndexed<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: IterateIndexed2<T1,T2>
  nameWithType: ArrayModule.IterateIndexed2<T1,T2>
  fullName: Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Last``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Last<T>
  nameWithType: ArrayModule.Last<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Last<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Length``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Length<T>
  nameWithType: ArrayModule.Length<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Length<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Map``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Map<T,TResult>
  nameWithType: ArrayModule.Map<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Map2``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Map2<T1,T2,TResult>
  nameWithType: ArrayModule.Map2<T1,T2,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map2<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Map3``4*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Map3<T1,T2,T3,TResult>
  nameWithType: ArrayModule.Map3<T1,T2,T3,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Map3<T1,T2,T3,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapFold``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapFold<T,TState,TResult>
  nameWithType: ArrayModule.MapFold<T,TState,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapFold<T,TState,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapFoldBack``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapFoldBack<T,TState,TResult>
  nameWithType: ArrayModule.MapFoldBack<T,TState,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapFoldBack<T,TState,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapIndexed<T,TResult>
  nameWithType: ArrayModule.MapIndexed<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapIndexed<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MapIndexed2<T1,T2,TResult>
  nameWithType: ArrayModule.MapIndexed2<T1,T2,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.MapIndexed2<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Max``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Max<T>
  nameWithType: ArrayModule.Max<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Max<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MaxBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MaxBy<T,TResult>
  nameWithType: ArrayModule.MaxBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.MaxBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Min``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Min<T>
  nameWithType: ArrayModule.Min<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Min<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.MinBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: MinBy<T,TResult>
  nameWithType: ArrayModule.MinBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.MinBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.OfList``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: OfList<T>
  nameWithType: ArrayModule.OfList<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.OfList<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.OfSeq``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: OfSeq<T>
  nameWithType: ArrayModule.OfSeq<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.OfSeq<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Pairwise``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Pairwise<T>
  nameWithType: ArrayModule.Pairwise<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Pairwise<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Partition``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Partition<T>
  nameWithType: ArrayModule.Partition<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Partition<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Permute``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Permute<T>
  nameWithType: ArrayModule.Permute<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Permute<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Pick``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Pick<T,TResult>
  nameWithType: ArrayModule.Pick<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Pick<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Reduce``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Reduce<T>
  nameWithType: ArrayModule.Reduce<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Reduce<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ReduceBack<T>
  nameWithType: ArrayModule.ReduceBack<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ReduceBack<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Replicate``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Replicate<T>
  nameWithType: ArrayModule.Replicate<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Replicate<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Reverse``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Reverse<T>
  nameWithType: ArrayModule.Reverse<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Reverse<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Scan``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Scan<T,TState>
  nameWithType: ArrayModule.Scan<T,TState>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Scan<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ScanBack``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ScanBack<T,TState>
  nameWithType: ArrayModule.ScanBack<T,TState>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ScanBack<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Set``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Set<T>
  nameWithType: ArrayModule.Set<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Set<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Singleton``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Singleton<T>
  nameWithType: ArrayModule.Singleton<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Singleton<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Skip``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Skip<T>
  nameWithType: ArrayModule.Skip<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Skip<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SkipWhile``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SkipWhile<T>
  nameWithType: ArrayModule.SkipWhile<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SkipWhile<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Sort``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Sort<T>
  nameWithType: ArrayModule.Sort<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Sort<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortBy<T,TKey>
  nameWithType: ArrayModule.SortBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortBy<T,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortByDescending``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortByDescending<T,TKey>
  nameWithType: ArrayModule.SortByDescending<T,TKey>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortByDescending<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortDescending``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortDescending<T>
  nameWithType: ArrayModule.SortDescending<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortDescending<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortInPlace<T>
  nameWithType: ArrayModule.SortInPlace<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlace<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortInPlaceBy<T,TKey>
  nameWithType: ArrayModule.SortInPlaceBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy<T,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortInPlaceWith<T>
  nameWithType: ArrayModule.SortInPlaceWith<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SortWith``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SortWith<T>
  nameWithType: ArrayModule.SortWith<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SortWith<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SplitAt``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SplitAt<T>
  nameWithType: ArrayModule.SplitAt<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SplitAt<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SplitInto``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SplitInto<T>
  nameWithType: ArrayModule.SplitInto<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SplitInto<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Sum``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Sum<T>
  nameWithType: ArrayModule.Sum<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Sum<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.SumBy``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: SumBy<T,TResult>
  nameWithType: ArrayModule.SumBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.SumBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Tail``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Tail<T>
  nameWithType: ArrayModule.Tail<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Tail<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Take``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Take<T>
  nameWithType: ArrayModule.Take<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Take<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TakeWhile``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TakeWhile<T>
  nameWithType: ArrayModule.TakeWhile<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TakeWhile<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ToList``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ToList<T>
  nameWithType: ArrayModule.ToList<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ToList<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ToSeq``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ToSeq<T>
  nameWithType: ArrayModule.ToSeq<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ToSeq<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Truncate``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Truncate<T>
  nameWithType: ArrayModule.Truncate<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Truncate<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFind``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFind<T>
  nameWithType: ArrayModule.TryFind<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFind<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindBack``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFindBack<T>
  nameWithType: ArrayModule.TryFindBack<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFindIndex<T>
  nameWithType: ArrayModule.TryFindIndex<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindIndex<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryFindIndexBack<T>
  nameWithType: ArrayModule.TryFindIndexBack<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryFindIndexBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryHead``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryHead<T>
  nameWithType: ArrayModule.TryHead<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryHead<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryItem``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryItem<T>
  nameWithType: ArrayModule.TryItem<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryItem<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryLast``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryLast<T>
  nameWithType: ArrayModule.TryLast<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryLast<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.TryPick``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: TryPick<T,TResult>
  nameWithType: ArrayModule.TryPick<T,TResult>
  fullName: Microsoft.FSharp.Collections.ArrayModule.TryPick<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Unfold``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Unfold<T,TState>
  nameWithType: ArrayModule.Unfold<T,TState>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unfold<T,TState>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Unzip``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Unzip<T1,T2>
  nameWithType: ArrayModule.Unzip<T1,T2>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unzip<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Unzip3``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Unzip3<T1,T2,T3>
  nameWithType: ArrayModule.Unzip3<T1,T2,T3>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Unzip3<T1,T2,T3>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Where``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Where<T>
  nameWithType: ArrayModule.Where<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Where<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Windowed``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Windowed<T>
  nameWithType: ArrayModule.Windowed<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Windowed<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: ZeroCreate<T>
  nameWithType: ArrayModule.ZeroCreate<T>
  fullName: Microsoft.FSharp.Collections.ArrayModule.ZeroCreate<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Zip``2*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Zip<T1,T2>
  nameWithType: ArrayModule.Zip<T1,T2>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Zip<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
- uid: Microsoft.FSharp.Collections.ArrayModule.Zip3``3*
  parent: Microsoft.FSharp.Collections.ArrayModule
  isExternal: false
  name: Zip3<T1,T2,T3>
  nameWithType: ArrayModule.Zip3<T1,T2,T3>
  fullName: Microsoft.FSharp.Collections.ArrayModule.Zip3<T1,T2,T3>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ArrayModule.xml
