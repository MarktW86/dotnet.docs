### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Collections.ListModule
  commentId: T:Microsoft.FSharp.Collections.ListModule
  id: ListModule
  children:
  - Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.ChunkBySize``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})
  - Microsoft.FSharp.Collections.ListModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Distinct``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Empty``1
  - Microsoft.FSharp.Collections.ListModule.ExactlyOne``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Except``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  - Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)
  - Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)
  - Microsoft.FSharp.Collections.ListModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Indexed``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  - Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Item``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.Last``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  - Microsoft.FSharp.Collections.ListModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  - Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])
  - Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.ListModule.Pairwise``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)
  - Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  - Microsoft.FSharp.Collections.ListModule.Singleton``1(``0)
  - Microsoft.FSharp.Collections.ListModule.Skip``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SortDescending``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SplitAt``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SplitInto``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Take``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Truncate``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryHead``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryItem``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryLast``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  - Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  - Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})
  - Microsoft.FSharp.Collections.ListModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Windowed``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  - Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  langs:
  - csharp
  name: ListModule
  nameWithType: ListModule
  fullName: Microsoft.FSharp.Collections.ListModule
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      [Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)]

      [Microsoft.FSharp.Core.RequireQualifiedAccess]

      public static class ListModule
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.CompilationRepresentationAttribute
  - type: Microsoft.FSharp.Core.RequireQualifiedAccessAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Append<T>(FSharpList<T>, FSharpList<T>)
  nameWithType: ListModule.Append<T>(FSharpList<T>, FSharpList<T>)
  fullName: ListModule.Append<T>(FSharpList<T>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("append")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Append<T> (Microsoft.FSharp.Collections.FSharpList<T> list1, Microsoft.FSharp.Collections.FSharpList<T> list2);
    parameters:
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Append``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Average``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Average<T>(FSharpList<T>)
  nameWithType: ListModule.Average<T>(FSharpList<T>)
  fullName: ListModule.Average<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("average")]

      public static T Average<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Average``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: AverageBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("averageBy")]

      public static TResult AverageBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.AverageBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  nameWithType: ListModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  fullName: ListModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("choose")]

      public static Microsoft.FSharp.Collections.FSharpList<TResult> Choose<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Choose``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ChunkBySize``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.ChunkBySize``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: ChunkBySize``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ChunkBySize<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.ChunkBySize<T>(Int32, FSharpList<T>)
  fullName: ListModule.ChunkBySize<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("chunkBySize")]

      public static Microsoft.FSharp.Collections.FSharpList<Microsoft.FSharp.Collections.FSharpList<T>> ChunkBySize<T> (int chunkSize, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: chunkSize
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ChunkBySize``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Collect<T,TResult>(FSharpFunc<T,FSharpList<TResult>>, FSharpList<T>)
  nameWithType: ListModule.Collect<T,TResult>(FSharpFunc<T,FSharpList<TResult>>, FSharpList<T>)
  fullName: ListModule.Collect<T,TResult>(FSharpFunc<T,FSharpList<TResult>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("collect")]

      public static Microsoft.FSharp.Collections.FSharpList<TResult> Collect<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Collections.FSharpList<TResult>> mapping, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Collections.FSharpList{TResult}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Collect``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  id: CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>, FSharpList<T>)
  nameWithType: ListModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>, FSharpList<T>)
  fullName: ListModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("compareWith")]

      public static int CompareWith<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,int>> comparer, Microsoft.FSharp.Collections.FSharpList<T> list1, Microsoft.FSharp.Collections.FSharpList<T> list2);
    parameters:
    - id: comparer
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.CompareWith``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})
  id: Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Concat<T>(IEnumerable<FSharpList<T>>)
  nameWithType: ListModule.Concat<T>(IEnumerable<FSharpList<T>>)
  fullName: ListModule.Concat<T>(IEnumerable<FSharpList<T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("concat")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Concat<T> (System.Collections.Generic.IEnumerable<Microsoft.FSharp.Collections.FSharpList<T>> lists);
    parameters:
    - id: lists
      type: System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{T}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Concat``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Contains``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Contains<T>(T, FSharpList<T>)
  nameWithType: ListModule.Contains<T>(T, FSharpList<T>)
  fullName: ListModule.Contains<T>(T, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("contains")]

      public static bool Contains<T> (T value, Microsoft.FSharp.Collections.FSharpList<T> source);
    parameters:
    - id: value
      type: T
      description: To be added.
    - id: source
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Contains``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: CountBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("countBy")]

      public static Microsoft.FSharp.Collections.FSharpList<Tuple<TKey,int>> CountBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{TKey,System.Int32}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.CountBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Distinct``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Distinct``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Distinct``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Distinct<T>(FSharpList<T>)
  nameWithType: ListModule.Distinct<T>(FSharpList<T>)
  fullName: ListModule.Distinct<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("distinct")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Distinct<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Distinct``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: DistinctBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("distinctBy")]

      public static Microsoft.FSharp.Collections.FSharpList<T> DistinctBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.DistinctBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Empty``1
  commentId: M:Microsoft.FSharp.Collections.ListModule.Empty``1
  id: Empty``1
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Empty<T>()
  nameWithType: ListModule.Empty<T>()
  fullName: ListModule.Empty<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("empty")]

      [Microsoft.FSharp.Core.GeneralizableValue]

      public static Microsoft.FSharp.Collections.FSharpList<T> Empty<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Empty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  - type: Microsoft.FSharp.Core.GeneralizableValueAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ExactlyOne``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.ExactlyOne``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: ExactlyOne``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ExactlyOne<T>(FSharpList<T>)
  nameWithType: ListModule.ExactlyOne<T>(FSharpList<T>)
  fullName: ListModule.ExactlyOne<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("exactlyOne")]

      public static T ExactlyOne<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ExactlyOne``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Except``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Except``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Except<T>(IEnumerable<T>, FSharpList<T>)
  nameWithType: ListModule.Except<T>(IEnumerable<T>, FSharpList<T>)
  fullName: ListModule.Except<T>(IEnumerable<T>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("except")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Except<T> (System.Collections.Generic.IEnumerable<T> itemsToExclude, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: itemsToExclude
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Except``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Exists<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists")]

      public static bool Exists<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Exists``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists2")]

      public static bool Exists2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,bool>> predicate, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Exists2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Filter<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("filter")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Filter<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Filter``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Find<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Find<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Find<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("find")]

      public static T Find<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Find``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: FindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.FindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.FindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findBack")]

      public static T FindBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.FindBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: FindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.FindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.FindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findIndex")]

      public static int FindIndex<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.FindIndex``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: FindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findIndexBack")]

      public static int FindIndexBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.FindIndexBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  nameWithType: ListModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  fullName: ListModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold")]

      public static TState Fold<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>> folder, TState state, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Fold``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold2")]

      public static TState Fold2<T1,T2,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TState>>> folder, TState state, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Fold2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  commentId: M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  id: FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  nameWithType: ListModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  fullName: ListModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack")]

      public static TState FoldBack<T,TState> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>> folder, Microsoft.FSharp.Collections.FSharpList<T> list, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.FoldBack``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)
  commentId: M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)
  id: FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, FSharpList<T1>, FSharpList<T2>, TState)
  nameWithType: ListModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, FSharpList<T1>, FSharpList<T2>, TState)
  fullName: ListModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, FSharpList<T1>, FSharpList<T2>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack2")]

      public static TState FoldBack2<T1,T2,TState> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>> folder, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.FoldBack2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ForAll<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall")]

      public static bool ForAll<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ForAll``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall2")]

      public static bool ForAll2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,bool>> predicate, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ForAll2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)
  commentId: M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)
  id: Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Get<T>(FSharpList<T>, Int32)
  nameWithType: ListModule.Get<T>(FSharpList<T>, Int32)
  fullName: ListModule.Get<T>(FSharpList<T>, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("nth")]

      [System.Obsolete("please use List.item")]

      public static T Get<T> (Microsoft.FSharp.Collections.FSharpList<T> list, int index);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Get``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: GroupBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("groupBy")]

      public static Microsoft.FSharp.Collections.FSharpList<Tuple<TKey,Microsoft.FSharp.Collections.FSharpList<T>>> GroupBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{TKey,Microsoft.FSharp.Collections.FSharpList{T}}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.GroupBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Head``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Head<T>(FSharpList<T>)
  nameWithType: ListModule.Head<T>(FSharpList<T>)
  fullName: ListModule.Head<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("head")]

      public static T Head<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Head``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Indexed``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Indexed``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Indexed``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Indexed<T>(FSharpList<T>)
  nameWithType: ListModule.Indexed<T>(FSharpList<T>)
  fullName: ListModule.Indexed<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("indexed")]

      public static Microsoft.FSharp.Collections.FSharpList<Tuple<int,T>> Indexed<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Int32,T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Indexed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  id: Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Initialize<T>(Int32, FSharpFunc<Int32,T>)
  nameWithType: ListModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  fullName: ListModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("init")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Initialize<T> (int length, Microsoft.FSharp.Core.FSharpFunc<int,T> initializer);
    parameters:
    - id: length
      type: System.Int32
      description: To be added.
    - id: initializer
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,T}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Initialize``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: IsEmpty<T>(FSharpList<T>)
  nameWithType: ListModule.IsEmpty<T>(FSharpList<T>)
  fullName: ListModule.IsEmpty<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("isEmpty")]

      public static bool IsEmpty<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.IsEmpty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Item``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Item``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Item``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Item<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Item<T>(Int32, FSharpList<T>)
  fullName: ListModule.Item<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("item")]

      public static T Item<T> (int index, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Item``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Iterate<T>(FSharpFunc<T,Unit>, FSharpList<T>)
  nameWithType: ListModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpList<T>)
  fullName: ListModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter")]

      public static void Iterate<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit> action, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Iterate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter2")]

      public static void Iterate2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>> action, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Iterate2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, FSharpList<T>)
  nameWithType: ListModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, FSharpList<T>)
  fullName: ListModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iteri")]

      public static void IterateIndexed<T> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>> action, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.IterateIndexed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iteri2")]

      public static void IterateIndexed2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>> action, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Last``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Last``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Last``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Last<T>(FSharpList<T>)
  nameWithType: ListModule.Last<T>(FSharpList<T>)
  fullName: ListModule.Last<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("last")]

      public static T Last<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Last``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Length``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Length<T>(FSharpList<T>)
  nameWithType: ListModule.Length<T>(FSharpList<T>)
  fullName: ListModule.Length<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("length")]

      public static int Length<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Length``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Map<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map")]

      public static Microsoft.FSharp.Collections.FSharpList<TResult> Map<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> mapping, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Map``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map2")]

      public static Microsoft.FSharp.Collections.FSharpList<TResult> Map2<T1,T2,TResult> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>> mapping, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Map2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  id: Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  nameWithType: ListModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  fullName: ListModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map3")]

      public static Microsoft.FSharp.Collections.FSharpList<TResult> Map3<T1,T2,T3,TResult> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>> mapping, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2, Microsoft.FSharp.Collections.FSharpList<T3> list3);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    - id: list3
      type: Microsoft.FSharp.Collections.FSharpList{T3}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: T3
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Map3``4*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  id: MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, FSharpList<T>)
  nameWithType: ListModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, FSharpList<T>)
  fullName: ListModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapFold")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpList<TResult>,TState> MapFold<T,TState,TResult> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,Tuple<TResult,TState>>> mapping, TState state, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,System.Tuple{TResult,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpList{TResult},TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.MapFold``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  commentId: M:Microsoft.FSharp.Collections.ListModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  id: MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, FSharpList<T>, TState)
  nameWithType: ListModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, FSharpList<T>, TState)
  fullName: ListModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, FSharpList<T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapFoldBack")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpList<TResult>,TState> MapFoldBack<T,TState,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,Tuple<TResult,TState>>> mapping, Microsoft.FSharp.Collections.FSharpList<T> list, TState state);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,System.Tuple{TResult,TState}}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpList{TResult},TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.MapFoldBack``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, FSharpList<T>)
  nameWithType: ListModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, FSharpList<T>)
  fullName: ListModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapi")]

      public static Microsoft.FSharp.Collections.FSharpList<TResult> MapIndexed<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T,TResult>> mapping, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.MapIndexed``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapi2")]

      public static Microsoft.FSharp.Collections.FSharpList<TResult> MapIndexed2<T1,T2,TResult> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>> mapping, Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}}
      description: To be added.
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.MapIndexed2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Max``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Max<T>(FSharpList<T>)
  nameWithType: ListModule.Max<T>(FSharpList<T>)
  fullName: ListModule.Max<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("max")]

      public static T Max<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Max``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: MaxBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("maxBy")]

      public static T MaxBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.MaxBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Min``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Min<T>(FSharpList<T>)
  nameWithType: ListModule.Min<T>(FSharpList<T>)
  fullName: ListModule.Min<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("min")]

      public static T Min<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Min``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: MinBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("minBy")]

      public static T MinBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.MinBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])
  id: OfArray``1(``0[])
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: OfArray<T>(T[])
  nameWithType: ListModule.OfArray<T>(T[])
  fullName: ListModule.OfArray<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofArray")]

      public static Microsoft.FSharp.Collections.FSharpList<T> OfArray<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.OfArray``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  id: OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: OfSeq<T>(IEnumerable<T>)
  nameWithType: ListModule.OfSeq<T>(IEnumerable<T>)
  fullName: ListModule.OfSeq<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofSeq")]

      public static Microsoft.FSharp.Collections.FSharpList<T> OfSeq<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.OfSeq``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Pairwise``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Pairwise``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Pairwise``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Pairwise<T>(FSharpList<T>)
  nameWithType: ListModule.Pairwise<T>(FSharpList<T>)
  fullName: ListModule.Pairwise<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("pairwise")]

      public static Microsoft.FSharp.Collections.FSharpList<Tuple<T,T>> Pairwise<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T,T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Pairwise``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Partition<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("partition")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpList<T>,Microsoft.FSharp.Collections.FSharpList<T>> Partition<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpList{T},Microsoft.FSharp.Collections.FSharpList{T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Partition``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Permute<T>(FSharpFunc<Int32,Int32>, FSharpList<T>)
  nameWithType: ListModule.Permute<T>(FSharpFunc<Int32,Int32>, FSharpList<T>)
  fullName: ListModule.Permute<T>(FSharpFunc<Int32,Int32>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("permute")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Permute<T> (Microsoft.FSharp.Core.FSharpFunc<int,int> indexMap, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: indexMap
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Permute``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  nameWithType: ListModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  fullName: ListModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("pick")]

      public static TResult Pick<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Pick``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  nameWithType: ListModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  fullName: ListModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("reduce")]

      public static T Reduce<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>> reduction, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: reduction
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Reduce``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  nameWithType: ListModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  fullName: ListModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("reduceBack")]

      public static T ReduceBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>> reduction, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: reduction
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ReduceBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)
  commentId: M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)
  id: Replicate``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Replicate<T>(Int32, T)
  nameWithType: ListModule.Replicate<T>(Int32, T)
  fullName: ListModule.Replicate<T>(Int32, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("replicate")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Replicate<T> (int count, T initial);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: initial
      type: T
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Replicate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Reverse<T>(FSharpList<T>)
  nameWithType: ListModule.Reverse<T>(FSharpList<T>)
  fullName: ListModule.Reverse<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("rev")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Reverse<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Reverse``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  nameWithType: ListModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  fullName: ListModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("scan")]

      public static Microsoft.FSharp.Collections.FSharpList<TState> Scan<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>> folder, TState state, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Scan``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  commentId: M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  id: ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  nameWithType: ListModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  fullName: ListModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("scanBack")]

      public static Microsoft.FSharp.Collections.FSharpList<TState> ScanBack<T,TState> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>> folder, Microsoft.FSharp.Collections.FSharpList<T> list, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ScanBack``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Singleton``1(``0)
  commentId: M:Microsoft.FSharp.Collections.ListModule.Singleton``1(``0)
  id: Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Singleton<T>(T)
  nameWithType: ListModule.Singleton<T>(T)
  fullName: ListModule.Singleton<T>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("singleton")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Singleton<T> (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Singleton``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Skip``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Skip``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Skip``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Skip<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Skip<T>(Int32, FSharpList<T>)
  fullName: ListModule.Skip<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("skip")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Skip<T> (int count, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Skip``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SkipWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.SkipWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.SkipWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("skipWhile")]

      public static Microsoft.FSharp.Collections.FSharpList<T> SkipWhile<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SkipWhile``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Sort<T>(FSharpList<T>)
  nameWithType: ListModule.Sort<T>(FSharpList<T>)
  fullName: ListModule.Sort<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sort")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Sort<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Sort``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SortBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortBy")]

      public static Microsoft.FSharp.Collections.FSharpList<T> SortBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SortBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SortByDescending<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortByDescending")]

      public static Microsoft.FSharp.Collections.FSharpList<T> SortByDescending<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SortByDescending``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortDescending``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SortDescending``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: SortDescending``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SortDescending<T>(FSharpList<T>)
  nameWithType: ListModule.SortDescending<T>(FSharpList<T>)
  fullName: ListModule.SortDescending<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sortDescending")]

      public static Microsoft.FSharp.Collections.FSharpList<T> SortDescending<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SortDescending``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>)
  nameWithType: ListModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>)
  fullName: ListModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortWith")]

      public static Microsoft.FSharp.Collections.FSharpList<T> SortWith<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,int>> comparer, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: comparer
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SortWith``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SplitAt``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SplitAt``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: SplitAt``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SplitAt<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.SplitAt<T>(Int32, FSharpList<T>)
  fullName: ListModule.SplitAt<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("splitAt")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpList<T>,Microsoft.FSharp.Collections.FSharpList<T>> SplitAt<T> (int index, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpList{T},Microsoft.FSharp.Collections.FSharpList{T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SplitAt``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SplitInto``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SplitInto``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: SplitInto``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SplitInto<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.SplitInto<T>(Int32, FSharpList<T>)
  fullName: ListModule.SplitInto<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("splitInto")]

      public static Microsoft.FSharp.Collections.FSharpList<Microsoft.FSharp.Collections.FSharpList<T>> SplitInto<T> (int count, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SplitInto``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Sum<T>(FSharpList<T>)
  nameWithType: ListModule.Sum<T>(FSharpList<T>)
  fullName: ListModule.Sum<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sum")]

      public static T Sum<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Sum``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  id: SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: SumBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sumBy")]

      public static TResult SumBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.SumBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Tail<T>(FSharpList<T>)
  nameWithType: ListModule.Tail<T>(FSharpList<T>)
  fullName: ListModule.Tail<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tail")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Tail<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Tail``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Take``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Take``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Take``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Take<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Take<T>(Int32, FSharpList<T>)
  fullName: ListModule.Take<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("take")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Take<T> (int count, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Take``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TakeWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TakeWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TakeWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("takeWhile")]

      public static Microsoft.FSharp.Collections.FSharpList<T> TakeWhile<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TakeWhile``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ToArray<T>(FSharpList<T>)
  nameWithType: ListModule.ToArray<T>(FSharpList<T>)
  fullName: ListModule.ToArray<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toArray")]

      public static T[] ToArray<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ToArray``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: ToSeq<T>(FSharpList<T>)
  nameWithType: ListModule.ToSeq<T>(FSharpList<T>)
  fullName: ListModule.ToSeq<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toSeq")]

      public static System.Collections.Generic.IEnumerable<T> ToSeq<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.ToSeq``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Truncate``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Truncate``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Truncate``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Truncate<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Truncate<T>(Int32, FSharpList<T>)
  fullName: ListModule.Truncate<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("truncate")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Truncate<T> (int count, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Truncate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryFind<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFind<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFind<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFind")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryFind<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryFind``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryFindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindBack")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryFindBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryFindBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryFindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindIndex")]

      public static Microsoft.FSharp.Core.FSharpOption<int> TryFindIndex<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryFindIndex``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryFindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindIndexBack")]

      public static Microsoft.FSharp.Core.FSharpOption<int> TryFindIndexBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryFindIndexBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryHead``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryHead``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryHead``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryHead<T>(FSharpList<T>)
  nameWithType: ListModule.TryHead<T>(FSharpList<T>)
  fullName: ListModule.TryHead<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tryHead")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryHead<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryHead``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryItem``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryItem``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryItem``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryItem<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.TryItem<T>(Int32, FSharpList<T>)
  fullName: ListModule.TryItem<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryItem")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryItem<T> (int index, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryItem``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryLast``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryLast``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryLast``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryLast<T>(FSharpList<T>)
  nameWithType: ListModule.TryLast<T>(FSharpList<T>)
  fullName: ListModule.TryLast<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tryLast")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryLast<T> (Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryLast``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  id: TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  nameWithType: ListModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  fullName: ListModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryPick")]

      public static Microsoft.FSharp.Core.FSharpOption<TResult> TryPick<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.TryPick``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  commentId: M:Microsoft.FSharp.Collections.ListModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  id: Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  nameWithType: ListModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  fullName: ListModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("unfold")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Unfold<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpOption<Tuple<T,TState>>> generator, TState state);
    parameters:
    - id: generator
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpOption{System.Tuple{T,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Unfold``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  id: Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Unzip<T1,T2>(FSharpList<Tuple<T1,T2>>)
  nameWithType: ListModule.Unzip<T1,T2>(FSharpList<Tuple<T1,T2>>)
  fullName: ListModule.Unzip<T1,T2>(FSharpList<Tuple<T1,T2>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("unzip")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpList<T1>,Microsoft.FSharp.Collections.FSharpList<T2>> Unzip<T1,T2> (Microsoft.FSharp.Collections.FSharpList<Tuple<T1,T2>> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T1,T2}}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpList{T1},Microsoft.FSharp.Collections.FSharpList{T2}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Unzip``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})
  id: Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Unzip3<T1,T2,T3>(FSharpList<Tuple<T1,T2,T3>>)
  nameWithType: ListModule.Unzip3<T1,T2,T3>(FSharpList<Tuple<T1,T2,T3>>)
  fullName: ListModule.Unzip3<T1,T2,T3>(FSharpList<Tuple<T1,T2,T3>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("unzip3")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpList<T1>,Microsoft.FSharp.Collections.FSharpList<T2>,Microsoft.FSharp.Collections.FSharpList<T3>> Unzip3<T1,T2,T3> (Microsoft.FSharp.Collections.FSharpList<Tuple<T1,T2,T3>> list);
    parameters:
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T1,T2,T3}}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: T3
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpList{T1},Microsoft.FSharp.Collections.FSharpList{T2},Microsoft.FSharp.Collections.FSharpList{T3}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Unzip3``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  id: Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Where<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Where<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Where<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("where")]

      public static Microsoft.FSharp.Collections.FSharpList<T> Where<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Where``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Windowed``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Windowed``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  id: Windowed``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Windowed<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Windowed<T>(Int32, FSharpList<T>)
  fullName: ListModule.Windowed<T>(Int32, FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("windowed")]

      public static Microsoft.FSharp.Collections.FSharpList<Microsoft.FSharp.Collections.FSharpList<T>> Windowed<T> (int windowSize, Microsoft.FSharp.Collections.FSharpList<T> list);
    parameters:
    - id: windowSize
      type: System.Int32
      description: To be added.
    - id: list
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Windowed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  id: Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Zip<T1,T2>(FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Zip<T1,T2>(FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Zip<T1,T2>(FSharpList<T1>, FSharpList<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("zip")]

      public static Microsoft.FSharp.Collections.FSharpList<Tuple<T1,T2>> Zip<T1,T2> (Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2);
    parameters:
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T1,T2}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Zip``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  commentId: M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  id: Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  parent: Microsoft.FSharp.Collections.ListModule
  langs:
  - csharp
  name: Zip3<T1,T2,T3>(FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  nameWithType: ListModule.Zip3<T1,T2,T3>(FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  fullName: ListModule.Zip3<T1,T2,T3>(FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("zip3")]

      public static Microsoft.FSharp.Collections.FSharpList<Tuple<T1,T2,T3>> Zip3<T1,T2,T3> (Microsoft.FSharp.Collections.FSharpList<T1> list1, Microsoft.FSharp.Collections.FSharpList<T2> list2, Microsoft.FSharp.Collections.FSharpList<T3> list3);
    parameters:
    - id: list1
      type: Microsoft.FSharp.Collections.FSharpList{T1}
      description: To be added.
    - id: list2
      type: Microsoft.FSharp.Collections.FSharpList{T2}
      description: To be added.
    - id: list3
      type: Microsoft.FSharp.Collections.FSharpList{T3}
      description: To be added.
    typeParameters:
    - id: T1
      description: To be added.
    - id: T2
      description: To be added.
    - id: T3
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T1,T2,T3}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.ListModule.Zip3``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Append<T>(FSharpList<T>, FSharpList<T>)
  nameWithType: ListModule.Append<T>(FSharpList<T>, FSharpList<T>)
  fullName: ListModule.Append<T>(FSharpList<T>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList`1
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<T>
  nameWithType: FSharpList<T>
  fullName: Microsoft.FSharp.Collections.FSharpList<T>
- uid: Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Average<T>(FSharpList<T>)
  nameWithType: ListModule.Average<T>(FSharpList<T>)
  fullName: ListModule.Average<T>(FSharpList<T>)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: AverageBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  nameWithType: ListModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  fullName: ListModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList{TResult}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<TResult>
  nameWithType: FSharpList<TResult>
  fullName: Microsoft.FSharp.Collections.FSharpList<TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpOption<TResult>>
  nameWithType: FSharpFunc<T,FSharpOption<TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.ChunkBySize``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ChunkBySize<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.ChunkBySize<T>(Int32, FSharpList<T>)
  fullName: ListModule.ChunkBySize<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{T}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<FSharpList<T>>
  nameWithType: FSharpList<FSharpList<T>>
  fullName: Microsoft.FSharp.Collections.FSharpList<Microsoft.FSharp.Collections.FSharpList<T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Collect<T,TResult>(FSharpFunc<T,FSharpList<TResult>>, FSharpList<T>)
  nameWithType: ListModule.Collect<T,TResult>(FSharpFunc<T,FSharpList<TResult>>, FSharpList<T>)
  fullName: ListModule.Collect<T,TResult>(FSharpFunc<T,FSharpList<TResult>>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Collections.FSharpList{TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpList<TResult>>
  nameWithType: FSharpFunc<T,FSharpList<TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Collections.FSharpList<TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>, FSharpList<T>)
  nameWithType: ListModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>, FSharpList<T>)
  fullName: ListModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<T,Int32>>
  nameWithType: FSharpFunc<T,FSharpFunc<T,Int32>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,System.Int32>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Concat<T>(IEnumerable<FSharpList<T>>)
  nameWithType: ListModule.Concat<T>(IEnumerable<FSharpList<T>>)
  fullName: ListModule.Concat<T>(IEnumerable<FSharpList<T>>)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<FSharpList<T>>
  nameWithType: IEnumerable<FSharpList<T>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.FSharp.Collections.FSharpList<T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Contains<T>(T, FSharpList<T>)
  nameWithType: ListModule.Contains<T>(T, FSharpList<T>)
  fullName: ListModule.Contains<T>(T, FSharpList<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Collections.ListModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: CountBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Microsoft.FSharp.Collections.FSharpList{System.Tuple{TKey,System.Int32}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<Tuple<TKey,Int32>>
  nameWithType: FSharpList<Tuple<TKey,Int32>>
  fullName: Microsoft.FSharp.Collections.FSharpList<System.Tuple<TKey,System.Int32>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TKey>
  nameWithType: FSharpFunc<T,TKey>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TKey>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Distinct``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Distinct<T>(FSharpList<T>)
  nameWithType: ListModule.Distinct<T>(FSharpList<T>)
  fullName: ListModule.Distinct<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: DistinctBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Empty``1
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Empty<T>()
  nameWithType: ListModule.Empty<T>()
  fullName: ListModule.Empty<T>()
- uid: Microsoft.FSharp.Collections.ListModule.ExactlyOne``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ExactlyOne<T>(FSharpList<T>)
  nameWithType: ListModule.ExactlyOne<T>(FSharpList<T>)
  fullName: ListModule.ExactlyOne<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Except``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Except<T>(IEnumerable<T>, FSharpList<T>)
  nameWithType: ListModule.Except<T>(IEnumerable<T>, FSharpList<T>)
  fullName: ListModule.Except<T>(IEnumerable<T>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Exists<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Boolean>
  nameWithType: FSharpFunc<T,Boolean>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,Boolean>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,Boolean>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,System.Boolean>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.FSharpList{T1}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<T1>
  nameWithType: FSharpList<T1>
  fullName: Microsoft.FSharp.Collections.FSharpList<T1>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.FSharpList{T2}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<T2>
  nameWithType: FSharpList<T2>
  fullName: Microsoft.FSharp.Collections.FSharpList<T2>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Filter<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Find<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Find<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Find<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.FindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.FindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.FindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.FindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  nameWithType: ListModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  fullName: ListModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
- uid: TState
  isExternal: true
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T,TState>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, FSharpList<T1>, FSharpList<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  nameWithType: ListModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  fullName: ListModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<TState,TState>>
  nameWithType: FSharpFunc<T,FSharpFunc<TState,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, FSharpList<T1>, FSharpList<T2>, TState)
  nameWithType: ListModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, FSharpList<T1>, FSharpList<T2>, TState)
  fullName: ListModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, FSharpList<T1>, FSharpList<T2>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ForAll<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, FSharpList<T1>, FSharpList<T2>)
- uid: Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Get<T>(FSharpList<T>, Int32)
  nameWithType: ListModule.Get<T>(FSharpList<T>, Int32)
  fullName: ListModule.Get<T>(FSharpList<T>, Int32)
- uid: Microsoft.FSharp.Collections.ListModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: GroupBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList{System.Tuple{TKey,Microsoft.FSharp.Collections.FSharpList{T}}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<Tuple<TKey,FSharpList<T>>>
  nameWithType: FSharpList<Tuple<TKey,FSharpList<T>>>
  fullName: Microsoft.FSharp.Collections.FSharpList<System.Tuple<TKey,Microsoft.FSharp.Collections.FSharpList<T>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Head<T>(FSharpList<T>)
  nameWithType: ListModule.Head<T>(FSharpList<T>)
  fullName: ListModule.Head<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Indexed``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Indexed<T>(FSharpList<T>)
  nameWithType: ListModule.Indexed<T>(FSharpList<T>)
  fullName: ListModule.Indexed<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Int32,T}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<Tuple<Int32,T>>
  nameWithType: FSharpList<Tuple<Int32,T>>
  fullName: Microsoft.FSharp.Collections.FSharpList<System.Tuple<System.Int32,T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Initialize<T>(Int32, FSharpFunc<Int32,T>)
  nameWithType: ListModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  fullName: ListModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,T}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,T>
  nameWithType: FSharpFunc<Int32,T>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: IsEmpty<T>(FSharpList<T>)
  nameWithType: ListModule.IsEmpty<T>(FSharpList<T>)
  fullName: ListModule.IsEmpty<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Item``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Item<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Item<T>(Int32, FSharpList<T>)
  fullName: ListModule.Item<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Iterate<T>(FSharpFunc<T,Unit>, FSharpList<T>)
  nameWithType: ListModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpList<T>)
  fullName: ListModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Unit>
  nameWithType: FSharpFunc<T,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, FSharpList<T1>, FSharpList<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,Unit>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, FSharpList<T>)
  nameWithType: ListModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, FSharpList<T>)
  fullName: ListModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T,Unit>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, FSharpList<T1>, FSharpList<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Last``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Last<T>(FSharpList<T>)
  nameWithType: ListModule.Last<T>(FSharpList<T>)
  fullName: ListModule.Last<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Length<T>(FSharpList<T>)
  nameWithType: ListModule.Length<T>(FSharpList<T>)
  fullName: ListModule.Length<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Map<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, FSharpList<T1>, FSharpList<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  nameWithType: ListModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  fullName: ListModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.FSharpList{T3}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<T3>
  nameWithType: FSharpList<T3>
  fullName: Microsoft.FSharp.Collections.FSharpList<T3>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, FSharpList<T>)
  nameWithType: ListModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, FSharpList<T>)
  fullName: ListModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, FSharpList<T>)
- uid: System.Tuple{Microsoft.FSharp.Collections.FSharpList{TResult},TState}
  parent: System
  isExternal: false
  name: Tuple<FSharpList<TResult>,TState>
  nameWithType: Tuple<FSharpList<TResult>,TState>
  fullName: System.Tuple<Microsoft.FSharp.Collections.FSharpList<TResult>,TState>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,System.Tuple{TResult,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,System.Tuple<TResult,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, FSharpList<T>, TState)
  nameWithType: ListModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, FSharpList<T>, TState)
  fullName: ListModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, FSharpList<T>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,System.Tuple{TResult,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>
  nameWithType: FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,System.Tuple<TResult,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, FSharpList<T>)
  nameWithType: ListModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, FSharpList<T>)
  fullName: ListModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T,TResult>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, FSharpList<T1>, FSharpList<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Max<T>(FSharpList<T>)
  nameWithType: ListModule.Max<T>(FSharpList<T>)
  fullName: ListModule.Max<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MaxBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Min<T>(FSharpList<T>)
  nameWithType: ListModule.Min<T>(FSharpList<T>)
  fullName: ListModule.Min<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MinBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: OfArray<T>(T[])
  nameWithType: ListModule.OfArray<T>(T[])
  fullName: ListModule.OfArray<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: OfSeq<T>(IEnumerable<T>)
  nameWithType: ListModule.OfSeq<T>(IEnumerable<T>)
  fullName: ListModule.OfSeq<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Pairwise``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Pairwise<T>(FSharpList<T>)
  nameWithType: ListModule.Pairwise<T>(FSharpList<T>)
  fullName: ListModule.Pairwise<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T,T}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<Tuple<T,T>>
  nameWithType: FSharpList<Tuple<T,T>>
  fullName: Microsoft.FSharp.Collections.FSharpList<System.Tuple<T,T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Partition<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: System.Tuple{Microsoft.FSharp.Collections.FSharpList{T},Microsoft.FSharp.Collections.FSharpList{T}}
  parent: System
  isExternal: false
  name: Tuple<FSharpList<T>,FSharpList<T>>
  nameWithType: Tuple<FSharpList<T>,FSharpList<T>>
  fullName: System.Tuple<Microsoft.FSharp.Collections.FSharpList<T>,Microsoft.FSharp.Collections.FSharpList<T>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Permute<T>(FSharpFunc<Int32,Int32>, FSharpList<T>)
  nameWithType: ListModule.Permute<T>(FSharpFunc<Int32,Int32>, FSharpList<T>)
  fullName: ListModule.Permute<T>(FSharpFunc<Int32,Int32>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,Int32>
  nameWithType: FSharpFunc<Int32,Int32>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  nameWithType: ListModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  fullName: ListModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  nameWithType: ListModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  fullName: ListModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<T,T>>
  nameWithType: FSharpFunc<T,FSharpFunc<T,T>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  nameWithType: ListModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
  fullName: ListModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Replicate<T>(Int32, T)
  nameWithType: ListModule.Replicate<T>(Int32, T)
  fullName: ListModule.Replicate<T>(Int32, T)
- uid: Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Reverse<T>(FSharpList<T>)
  nameWithType: ListModule.Reverse<T>(FSharpList<T>)
  fullName: ListModule.Reverse<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  nameWithType: ListModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
  fullName: ListModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList{TState}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<TState>
  nameWithType: FSharpList<TState>
  fullName: Microsoft.FSharp.Collections.FSharpList<TState>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  nameWithType: ListModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
  fullName: ListModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpList<T>, TState)
- uid: Microsoft.FSharp.Collections.ListModule.Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Singleton<T>(T)
  nameWithType: ListModule.Singleton<T>(T)
  fullName: ListModule.Singleton<T>(T)
- uid: Microsoft.FSharp.Collections.ListModule.Skip``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Skip<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Skip<T>(Int32, FSharpList<T>)
  fullName: ListModule.Skip<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SkipWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.SkipWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.SkipWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Sort<T>(FSharpList<T>)
  nameWithType: ListModule.Sort<T>(FSharpList<T>)
  fullName: ListModule.Sort<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortByDescending<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  nameWithType: ListModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
  fullName: ListModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SortDescending``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortDescending<T>(FSharpList<T>)
  nameWithType: ListModule.SortDescending<T>(FSharpList<T>)
  fullName: ListModule.SortDescending<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>)
  nameWithType: ListModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>)
  fullName: ListModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SplitAt``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SplitAt<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.SplitAt<T>(Int32, FSharpList<T>)
  fullName: ListModule.SplitAt<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SplitInto``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SplitInto<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.SplitInto<T>(Int32, FSharpList<T>)
  fullName: ListModule.SplitInto<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Sum<T>(FSharpList<T>)
  nameWithType: ListModule.Sum<T>(FSharpList<T>)
  fullName: ListModule.Sum<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SumBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  nameWithType: ListModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
  fullName: ListModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Tail<T>(FSharpList<T>)
  nameWithType: ListModule.Tail<T>(FSharpList<T>)
  fullName: ListModule.Tail<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Take``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Take<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Take<T>(Int32, FSharpList<T>)
  fullName: ListModule.Take<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TakeWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TakeWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TakeWhile<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ToArray<T>(FSharpList<T>)
  nameWithType: ListModule.ToArray<T>(FSharpList<T>)
  fullName: ListModule.ToArray<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ToSeq<T>(FSharpList<T>)
  nameWithType: ListModule.ToSeq<T>(FSharpList<T>)
  fullName: ListModule.ToSeq<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Truncate``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Truncate<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Truncate<T>(Int32, FSharpList<T>)
  fullName: ListModule.Truncate<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFind<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFind<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFind<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFindBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpOption{System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<Int32>
  nameWithType: FSharpOption<Int32>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TryHead``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryHead<T>(FSharpList<T>)
  nameWithType: ListModule.TryHead<T>(FSharpList<T>)
  fullName: ListModule.TryHead<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TryItem``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryItem<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.TryItem<T>(Int32, FSharpList<T>)
  fullName: ListModule.TryItem<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TryLast``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryLast<T>(FSharpList<T>)
  nameWithType: ListModule.TryLast<T>(FSharpList<T>)
  fullName: ListModule.TryLast<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  nameWithType: ListModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
  fullName: ListModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, FSharpList<T>)
- uid: Microsoft.FSharp.Core.FSharpOption{TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<TResult>
  nameWithType: FSharpOption<TResult>
  fullName: Microsoft.FSharp.Core.FSharpOption<TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``0,``1}}},``1)
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  nameWithType: ListModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  fullName: ListModule.Unfold<T,TState>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpOption{System.Tuple{T,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>
  nameWithType: FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpOption<System.Tuple<T,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Unzip<T1,T2>(FSharpList<Tuple<T1,T2>>)
  nameWithType: ListModule.Unzip<T1,T2>(FSharpList<Tuple<T1,T2>>)
  fullName: ListModule.Unzip<T1,T2>(FSharpList<Tuple<T1,T2>>)
- uid: System.Tuple{Microsoft.FSharp.Collections.FSharpList{T1},Microsoft.FSharp.Collections.FSharpList{T2}}
  parent: System
  isExternal: false
  name: Tuple<FSharpList<T1>,FSharpList<T2>>
  nameWithType: Tuple<FSharpList<T1>,FSharpList<T2>>
  fullName: System.Tuple<Microsoft.FSharp.Collections.FSharpList<T1>,Microsoft.FSharp.Collections.FSharpList<T2>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T1,T2}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<Tuple<T1,T2>>
  nameWithType: FSharpList<Tuple<T1,T2>>
  fullName: Microsoft.FSharp.Collections.FSharpList<System.Tuple<T1,T2>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Unzip3<T1,T2,T3>(FSharpList<Tuple<T1,T2,T3>>)
  nameWithType: ListModule.Unzip3<T1,T2,T3>(FSharpList<Tuple<T1,T2,T3>>)
  fullName: ListModule.Unzip3<T1,T2,T3>(FSharpList<Tuple<T1,T2,T3>>)
- uid: System.Tuple`3
  name: Tuple<T1,T2,T3>
  nameWithType: Tuple<T1,T2,T3>
  fullName: System.Tuple<T1,T2,T3>
- uid: System.Tuple{Microsoft.FSharp.Collections.FSharpList{T1},Microsoft.FSharp.Collections.FSharpList{T2},Microsoft.FSharp.Collections.FSharpList{T3}}
  parent: System
  isExternal: false
  name: Tuple<FSharpList<T1>,FSharpList<T2>,FSharpList<T3>>
  nameWithType: Tuple<FSharpList<T1>,FSharpList<T2>,FSharpList<T3>>
  fullName: System.Tuple<Microsoft.FSharp.Collections.FSharpList<T1>,Microsoft.FSharp.Collections.FSharpList<T2>,Microsoft.FSharp.Collections.FSharpList<T3>>
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.FSharpList{System.Tuple{T1,T2,T3}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<Tuple<T1,T2,T3>>
  nameWithType: FSharpList<Tuple<T1,T2,T3>>
  fullName: Microsoft.FSharp.Collections.FSharpList<System.Tuple<T1,T2,T3>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.ListModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Where<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  nameWithType: ListModule.Where<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
  fullName: ListModule.Where<T>(FSharpFunc<T,Boolean>, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Windowed``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Windowed<T>(Int32, FSharpList<T>)
  nameWithType: ListModule.Windowed<T>(Int32, FSharpList<T>)
  fullName: ListModule.Windowed<T>(Int32, FSharpList<T>)
- uid: Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Zip<T1,T2>(FSharpList<T1>, FSharpList<T2>)
  nameWithType: ListModule.Zip<T1,T2>(FSharpList<T1>, FSharpList<T2>)
  fullName: ListModule.Zip<T1,T2>(FSharpList<T1>, FSharpList<T2>)
- uid: Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Zip3<T1,T2,T3>(FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  nameWithType: ListModule.Zip3<T1,T2,T3>(FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
  fullName: ListModule.Zip3<T1,T2,T3>(FSharpList<T1>, FSharpList<T2>, FSharpList<T3>)
- uid: Microsoft.FSharp.Collections.ListModule.Append``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Append<T>
  nameWithType: ListModule.Append<T>
  fullName: ListModule.Append<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Average``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Average<T>
  nameWithType: ListModule.Average<T>
  fullName: ListModule.Average<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.AverageBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: AverageBy<T,TResult>
  nameWithType: ListModule.AverageBy<T,TResult>
  fullName: ListModule.AverageBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Choose``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Choose<T,TResult>
  nameWithType: ListModule.Choose<T,TResult>
  fullName: ListModule.Choose<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ChunkBySize``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ChunkBySize<T>
  nameWithType: ListModule.ChunkBySize<T>
  fullName: ListModule.ChunkBySize<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Collect``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Collect<T,TResult>
  nameWithType: ListModule.Collect<T,TResult>
  fullName: ListModule.Collect<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.CompareWith``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: CompareWith<T>
  nameWithType: ListModule.CompareWith<T>
  fullName: ListModule.CompareWith<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Concat``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Concat<T>
  nameWithType: ListModule.Concat<T>
  fullName: ListModule.Concat<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Contains``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Contains<T>
  nameWithType: ListModule.Contains<T>
  fullName: ListModule.Contains<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.CountBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: CountBy<T,TKey>
  nameWithType: ListModule.CountBy<T,TKey>
  fullName: ListModule.CountBy<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Distinct``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Distinct<T>
  nameWithType: ListModule.Distinct<T>
  fullName: ListModule.Distinct<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.DistinctBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: DistinctBy<T,TKey>
  nameWithType: ListModule.DistinctBy<T,TKey>
  fullName: ListModule.DistinctBy<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Empty``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Empty<T>
  nameWithType: ListModule.Empty<T>
  fullName: ListModule.Empty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ExactlyOne``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ExactlyOne<T>
  nameWithType: ListModule.ExactlyOne<T>
  fullName: ListModule.ExactlyOne<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Except``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Except<T>
  nameWithType: ListModule.Except<T>
  fullName: ListModule.Except<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Exists``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Exists<T>
  nameWithType: ListModule.Exists<T>
  fullName: ListModule.Exists<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Exists2``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Exists2<T1,T2>
  nameWithType: ListModule.Exists2<T1,T2>
  fullName: ListModule.Exists2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Filter``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Filter<T>
  nameWithType: ListModule.Filter<T>
  fullName: ListModule.Filter<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Find``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Find<T>
  nameWithType: ListModule.Find<T>
  fullName: ListModule.Find<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FindBack``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FindBack<T>
  nameWithType: ListModule.FindBack<T>
  fullName: ListModule.FindBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FindIndex``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FindIndex<T>
  nameWithType: ListModule.FindIndex<T>
  fullName: ListModule.FindIndex<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FindIndexBack``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FindIndexBack<T>
  nameWithType: ListModule.FindIndexBack<T>
  fullName: ListModule.FindIndexBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Fold``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Fold<T,TState>
  nameWithType: ListModule.Fold<T,TState>
  fullName: ListModule.Fold<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Fold2``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Fold2<T1,T2,TState>
  nameWithType: ListModule.Fold2<T1,T2,TState>
  fullName: ListModule.Fold2<T1,T2,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FoldBack``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FoldBack<T,TState>
  nameWithType: ListModule.FoldBack<T,TState>
  fullName: ListModule.FoldBack<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.FoldBack2``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: FoldBack2<T1,T2,TState>
  nameWithType: ListModule.FoldBack2<T1,T2,TState>
  fullName: ListModule.FoldBack2<T1,T2,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ForAll``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ForAll<T>
  nameWithType: ListModule.ForAll<T>
  fullName: ListModule.ForAll<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ForAll2``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ForAll2<T1,T2>
  nameWithType: ListModule.ForAll2<T1,T2>
  fullName: ListModule.ForAll2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Get``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Get<T>
  nameWithType: ListModule.Get<T>
  fullName: ListModule.Get<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.GroupBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: GroupBy<T,TKey>
  nameWithType: ListModule.GroupBy<T,TKey>
  fullName: ListModule.GroupBy<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Head``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Head<T>
  nameWithType: ListModule.Head<T>
  fullName: ListModule.Head<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Indexed``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Indexed<T>
  nameWithType: ListModule.Indexed<T>
  fullName: ListModule.Indexed<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Initialize``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Initialize<T>
  nameWithType: ListModule.Initialize<T>
  fullName: ListModule.Initialize<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.IsEmpty``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: IsEmpty<T>
  nameWithType: ListModule.IsEmpty<T>
  fullName: ListModule.IsEmpty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Item``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Item<T>
  nameWithType: ListModule.Item<T>
  fullName: ListModule.Item<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Iterate``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Iterate<T>
  nameWithType: ListModule.Iterate<T>
  fullName: ListModule.Iterate<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Iterate2``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Iterate2<T1,T2>
  nameWithType: ListModule.Iterate2<T1,T2>
  fullName: ListModule.Iterate2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.IterateIndexed``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: IterateIndexed<T>
  nameWithType: ListModule.IterateIndexed<T>
  fullName: ListModule.IterateIndexed<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: IterateIndexed2<T1,T2>
  nameWithType: ListModule.IterateIndexed2<T1,T2>
  fullName: ListModule.IterateIndexed2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Last``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Last<T>
  nameWithType: ListModule.Last<T>
  fullName: ListModule.Last<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Length``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Length<T>
  nameWithType: ListModule.Length<T>
  fullName: ListModule.Length<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Map``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Map<T,TResult>
  nameWithType: ListModule.Map<T,TResult>
  fullName: ListModule.Map<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Map2``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Map2<T1,T2,TResult>
  nameWithType: ListModule.Map2<T1,T2,TResult>
  fullName: ListModule.Map2<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Map3``4*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Map3<T1,T2,T3,TResult>
  nameWithType: ListModule.Map3<T1,T2,T3,TResult>
  fullName: ListModule.Map3<T1,T2,T3,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapFold``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapFold<T,TState,TResult>
  nameWithType: ListModule.MapFold<T,TState,TResult>
  fullName: ListModule.MapFold<T,TState,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapFoldBack``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapFoldBack<T,TState,TResult>
  nameWithType: ListModule.MapFoldBack<T,TState,TResult>
  fullName: ListModule.MapFoldBack<T,TState,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapIndexed``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapIndexed<T,TResult>
  nameWithType: ListModule.MapIndexed<T,TResult>
  fullName: ListModule.MapIndexed<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MapIndexed2``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MapIndexed2<T1,T2,TResult>
  nameWithType: ListModule.MapIndexed2<T1,T2,TResult>
  fullName: ListModule.MapIndexed2<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Max``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Max<T>
  nameWithType: ListModule.Max<T>
  fullName: ListModule.Max<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MaxBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MaxBy<T,TResult>
  nameWithType: ListModule.MaxBy<T,TResult>
  fullName: ListModule.MaxBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Min``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Min<T>
  nameWithType: ListModule.Min<T>
  fullName: ListModule.Min<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.MinBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: MinBy<T,TResult>
  nameWithType: ListModule.MinBy<T,TResult>
  fullName: ListModule.MinBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.OfArray``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: OfArray<T>
  nameWithType: ListModule.OfArray<T>
  fullName: ListModule.OfArray<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.OfSeq``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: OfSeq<T>
  nameWithType: ListModule.OfSeq<T>
  fullName: ListModule.OfSeq<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Pairwise``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Pairwise<T>
  nameWithType: ListModule.Pairwise<T>
  fullName: ListModule.Pairwise<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Partition``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Partition<T>
  nameWithType: ListModule.Partition<T>
  fullName: ListModule.Partition<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Permute``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Permute<T>
  nameWithType: ListModule.Permute<T>
  fullName: ListModule.Permute<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Pick``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Pick<T,TResult>
  nameWithType: ListModule.Pick<T,TResult>
  fullName: ListModule.Pick<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Reduce``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Reduce<T>
  nameWithType: ListModule.Reduce<T>
  fullName: ListModule.Reduce<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ReduceBack``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ReduceBack<T>
  nameWithType: ListModule.ReduceBack<T>
  fullName: ListModule.ReduceBack<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Replicate``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Replicate<T>
  nameWithType: ListModule.Replicate<T>
  fullName: ListModule.Replicate<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Reverse``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Reverse<T>
  nameWithType: ListModule.Reverse<T>
  fullName: ListModule.Reverse<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Scan``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Scan<T,TState>
  nameWithType: ListModule.Scan<T,TState>
  fullName: ListModule.Scan<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ScanBack``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ScanBack<T,TState>
  nameWithType: ListModule.ScanBack<T,TState>
  fullName: ListModule.ScanBack<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Singleton``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Singleton<T>
  nameWithType: ListModule.Singleton<T>
  fullName: ListModule.Singleton<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Skip``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Skip<T>
  nameWithType: ListModule.Skip<T>
  fullName: ListModule.Skip<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SkipWhile``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SkipWhile<T>
  nameWithType: ListModule.SkipWhile<T>
  fullName: ListModule.SkipWhile<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Sort``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Sort<T>
  nameWithType: ListModule.Sort<T>
  fullName: ListModule.Sort<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortBy<T,TKey>
  nameWithType: ListModule.SortBy<T,TKey>
  fullName: ListModule.SortBy<T,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortByDescending``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortByDescending<T,TKey>
  nameWithType: ListModule.SortByDescending<T,TKey>
  fullName: ListModule.SortByDescending<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortDescending``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortDescending<T>
  nameWithType: ListModule.SortDescending<T>
  fullName: ListModule.SortDescending<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SortWith``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SortWith<T>
  nameWithType: ListModule.SortWith<T>
  fullName: ListModule.SortWith<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SplitAt``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SplitAt<T>
  nameWithType: ListModule.SplitAt<T>
  fullName: ListModule.SplitAt<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SplitInto``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SplitInto<T>
  nameWithType: ListModule.SplitInto<T>
  fullName: ListModule.SplitInto<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Sum``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Sum<T>
  nameWithType: ListModule.Sum<T>
  fullName: ListModule.Sum<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.SumBy``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: SumBy<T,TResult>
  nameWithType: ListModule.SumBy<T,TResult>
  fullName: ListModule.SumBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Tail``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Tail<T>
  nameWithType: ListModule.Tail<T>
  fullName: ListModule.Tail<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Take``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Take<T>
  nameWithType: ListModule.Take<T>
  fullName: ListModule.Take<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TakeWhile``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TakeWhile<T>
  nameWithType: ListModule.TakeWhile<T>
  fullName: ListModule.TakeWhile<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ToArray``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ToArray<T>
  nameWithType: ListModule.ToArray<T>
  fullName: ListModule.ToArray<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.ToSeq``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: ToSeq<T>
  nameWithType: ListModule.ToSeq<T>
  fullName: ListModule.ToSeq<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Truncate``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Truncate<T>
  nameWithType: ListModule.Truncate<T>
  fullName: ListModule.Truncate<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFind``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFind<T>
  nameWithType: ListModule.TryFind<T>
  fullName: ListModule.TryFind<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFindBack``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFindBack<T>
  nameWithType: ListModule.TryFindBack<T>
  fullName: ListModule.TryFindBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFindIndex``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFindIndex<T>
  nameWithType: ListModule.TryFindIndex<T>
  fullName: ListModule.TryFindIndex<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryFindIndexBack``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryFindIndexBack<T>
  nameWithType: ListModule.TryFindIndexBack<T>
  fullName: ListModule.TryFindIndexBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryHead``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryHead<T>
  nameWithType: ListModule.TryHead<T>
  fullName: ListModule.TryHead<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryItem``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryItem<T>
  nameWithType: ListModule.TryItem<T>
  fullName: ListModule.TryItem<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryLast``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryLast<T>
  nameWithType: ListModule.TryLast<T>
  fullName: ListModule.TryLast<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.TryPick``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: TryPick<T,TResult>
  nameWithType: ListModule.TryPick<T,TResult>
  fullName: ListModule.TryPick<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Unfold``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Unfold<T,TState>
  nameWithType: ListModule.Unfold<T,TState>
  fullName: ListModule.Unfold<T,TState>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Unzip``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Unzip<T1,T2>
  nameWithType: ListModule.Unzip<T1,T2>
  fullName: ListModule.Unzip<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Unzip3``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Unzip3<T1,T2,T3>
  nameWithType: ListModule.Unzip3<T1,T2,T3>
  fullName: ListModule.Unzip3<T1,T2,T3>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Where``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Where<T>
  nameWithType: ListModule.Where<T>
  fullName: ListModule.Where<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Windowed``1*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Windowed<T>
  nameWithType: ListModule.Windowed<T>
  fullName: ListModule.Windowed<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Zip``2*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Zip<T1,T2>
  nameWithType: ListModule.Zip<T1,T2>
  fullName: ListModule.Zip<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
- uid: Microsoft.FSharp.Collections.ListModule.Zip3``3*
  parent: Microsoft.FSharp.Collections.ListModule
  isExternal: false
  name: Zip3<T1,T2,T3>
  nameWithType: ListModule.Zip3<T1,T2,T3>
  fullName: ListModule.Zip3<T1,T2,T3>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/ListModule.xml
