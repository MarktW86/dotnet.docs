### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Control.LazyExtensions
  commentId: T:Microsoft.FSharp.Control.LazyExtensions
  id: LazyExtensions
  children:
  - Microsoft.FSharp.Control.LazyExtensions.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
  - Microsoft.FSharp.Control.LazyExtensions.CreateFromValue``1(``0)
  - Microsoft.FSharp.Control.LazyExtensions.Force``1(System.Lazy{``0})
  langs:
  - csharp
  name: LazyExtensions
  nameWithType: LazyExtensions
  fullName: Microsoft.FSharp.Control.LazyExtensions
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.AutoOpen]

      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      public static class LazyExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.AutoOpenAttribute
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/LazyExtensions.xml
- uid: Microsoft.FSharp.Control.LazyExtensions.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
  commentId: M:Microsoft.FSharp.Control.LazyExtensions.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
  id: Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
  parent: Microsoft.FSharp.Control.LazyExtensions
  langs:
  - csharp
  name: Create<T>(FSharpFunc<Unit,T>)
  nameWithType: LazyExtensions.Create<T>(FSharpFunc<Unit,T>)
  fullName: Microsoft.FSharp.Control.LazyExtensions.Create<T>(FSharpFunc<Unit,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("Create")]

      public static Lazy<T> Create<T> (Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,T> creator);
    parameters:
    - id: creator
      type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,T}
      description: To be added.
    return:
      type: System.Lazy`1
      description: To be added.
  overload: Microsoft.FSharp.Control.LazyExtensions.Create``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/LazyExtensions.xml
- uid: Microsoft.FSharp.Control.LazyExtensions.CreateFromValue``1(``0)
  commentId: M:Microsoft.FSharp.Control.LazyExtensions.CreateFromValue``1(``0)
  id: CreateFromValue``1(``0)
  parent: Microsoft.FSharp.Control.LazyExtensions
  langs:
  - csharp
  name: CreateFromValue<T>(T)
  nameWithType: LazyExtensions.CreateFromValue<T>(T)
  fullName: Microsoft.FSharp.Control.LazyExtensions.CreateFromValue<T>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("CreateFromValue")]

      public static Lazy<T> CreateFromValue<T> (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Lazy`1
      description: To be added.
  overload: Microsoft.FSharp.Control.LazyExtensions.CreateFromValue``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/LazyExtensions.xml
- uid: Microsoft.FSharp.Control.LazyExtensions.Force``1(System.Lazy{``0})
  commentId: M:Microsoft.FSharp.Control.LazyExtensions.Force``1(System.Lazy{``0})
  id: Force``1(System.Lazy{``0})
  parent: Microsoft.FSharp.Control.LazyExtensions
  langs:
  - csharp
  name: Force<T>(Lazy<T>)
  nameWithType: LazyExtensions.Force<T>(Lazy<T>)
  fullName: Microsoft.FSharp.Control.LazyExtensions.Force<T>(Lazy<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("Force")]

      public static T Force<T> (Lazy<T> );
    parameters:
    - id: ''
      type: System.Lazy`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Control.LazyExtensions.Force``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/LazyExtensions.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Control.LazyExtensions.Create``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})
  parent: Microsoft.FSharp.Control.LazyExtensions
  isExternal: false
  name: Create<T>(FSharpFunc<Unit,T>)
  nameWithType: LazyExtensions.Create<T>(FSharpFunc<Unit,T>)
  fullName: Microsoft.FSharp.Control.LazyExtensions.Create<T>(FSharpFunc<Unit,T>)
- uid: System.Lazy`1
  parent: System
  isExternal: false
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,T}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Unit,T>
  nameWithType: FSharpFunc<Unit,T>
  fullName: Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.LazyExtensions.CreateFromValue``1(``0)
  parent: Microsoft.FSharp.Control.LazyExtensions
  isExternal: false
  name: CreateFromValue<T>(T)
  nameWithType: LazyExtensions.CreateFromValue<T>(T)
  fullName: Microsoft.FSharp.Control.LazyExtensions.CreateFromValue<T>(T)
- uid: Microsoft.FSharp.Control.LazyExtensions.Force``1(System.Lazy{``0})
  parent: Microsoft.FSharp.Control.LazyExtensions
  isExternal: false
  name: Force<T>(Lazy<T>)
  nameWithType: LazyExtensions.Force<T>(Lazy<T>)
  fullName: Microsoft.FSharp.Control.LazyExtensions.Force<T>(Lazy<T>)
- uid: Microsoft.FSharp.Control.LazyExtensions.Create``1*
  parent: Microsoft.FSharp.Control.LazyExtensions
  isExternal: false
  name: Create<T>
  nameWithType: LazyExtensions.Create<T>
  fullName: Microsoft.FSharp.Control.LazyExtensions.Create<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/LazyExtensions.xml
- uid: Microsoft.FSharp.Control.LazyExtensions.CreateFromValue``1*
  parent: Microsoft.FSharp.Control.LazyExtensions
  isExternal: false
  name: CreateFromValue<T>
  nameWithType: LazyExtensions.CreateFromValue<T>
  fullName: Microsoft.FSharp.Control.LazyExtensions.CreateFromValue<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/LazyExtensions.xml
- uid: Microsoft.FSharp.Control.LazyExtensions.Force``1*
  parent: Microsoft.FSharp.Control.LazyExtensions
  isExternal: false
  name: Force<T>
  nameWithType: LazyExtensions.Force<T>
  fullName: Microsoft.FSharp.Control.LazyExtensions.Force<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/LazyExtensions.xml
