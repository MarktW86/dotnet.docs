### YamlMime:ManagedReference
items:
- uid: System.Span`1
  commentId: T:System.Span`1
  id: Span`1
  children:
  - System.Span`1.#ctor(`0[])
  - System.Span`1.#ctor(System.Void*,System.Int32)
  - System.Span`1.#ctor(`0[],System.Int32)
  - System.Span`1.#ctor(`0[],System.Int32,System.Int32)
  - System.Span`1.Clear
  - System.Span`1.CopyTo(System.Span{`0})
  - System.Span`1.DangerousCreate(System.Object,`0@,System.Int32)
  - System.Span`1.DangerousGetPinnableReference
  - System.Span`1.Empty
  - System.Span`1.Equals(System.Object)
  - System.Span`1.Fill(`0)
  - System.Span`1.GetHashCode
  - System.Span`1.IsEmpty
  - System.Span`1.Item(System.Int32)
  - System.Span`1.Length
  - System.Span`1.op_Equality(System.Span{`0},System.Span{`0})
  - System.Span`1.op_Implicit(System.ArraySegment{T} to System.Span{T})
  - System.Span`1.op_Implicit(System.Span{T} to System.ReadOnlySpan{T})
  - System.Span`1.op_Implicit(T[] to System.Span{T})
  - System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})
  - System.Span`1.Slice(System.Int32)
  - System.Span`1.Slice(System.Int32,System.Int32)
  - System.Span`1.ToArray
  - System.Span`1.TryCopyTo(System.Span{`0})
  langs:
  - csharp
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  type: Struct
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public struct Span<T>
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  - System.ValueType
  implements: []
  extensionMethods:
  - System.SpanExtensions.AsBytes``1(System.Span{``0})
  - System.SpanExtensions.IndexOf(System.Span{System.Byte},System.Byte)
  - System.SpanExtensions.IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.IndexOf``1(System.Span{``0},``0)
  - System.SpanExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)
  - System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)
  - System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.NonPortableCast``2(System.Span{``0})
  - System.SpanExtensions.SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.SpanExtensions.StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.#ctor(`0[])
  commentId: M:System.Span`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: System.Span`1
  langs:
  - csharp
  name: Span<T>(T[])
  nameWithType: Span<T>.Span<T>(T[])
  fullName: Span<T>.Span<T>(T[])
  type: Constructor
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public Span (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
  overload: System.Span`1.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.#ctor(System.Void*,System.Int32)
  commentId: M:System.Span`1.#ctor(System.Void*,System.Int32)
  id: '#ctor(System.Void*,System.Int32)'
  parent: System.Span`1
  langs:
  - csharp
  name: Span<T>(Void*, Int32)
  nameWithType: Span<T>.Span<T>(Void*, Int32)
  fullName: Span<T>.Span<T>(Void*, Int32)
  type: Constructor
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public Span (void* pointer, int length);
    parameters:
    - id: pointer
      type: System.Void*
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
  overload: System.Span`1.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.#ctor(`0[],System.Int32)
  commentId: M:System.Span`1.#ctor(`0[],System.Int32)
  id: '#ctor(`0[],System.Int32)'
  parent: System.Span`1
  langs:
  - csharp
  name: Span<T>(T[], Int32)
  nameWithType: Span<T>.Span<T>(T[], Int32)
  fullName: Span<T>.Span<T>(T[], Int32)
  type: Constructor
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public Span (T[] array, int start);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: start
      type: System.Int32
      description: To be added.
  overload: System.Span`1.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.#ctor(`0[],System.Int32,System.Int32)
  commentId: M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)
  id: '#ctor(`0[],System.Int32,System.Int32)'
  parent: System.Span`1
  langs:
  - csharp
  name: Span<T>(T[], Int32, Int32)
  nameWithType: Span<T>.Span<T>(T[], Int32, Int32)
  fullName: Span<T>.Span<T>(T[], Int32, Int32)
  type: Constructor
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public Span (T[] array, int start, int length);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: start
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
  overload: System.Span`1.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Clear
  commentId: M:System.Span`1.Clear
  id: Clear
  parent: System.Span`1
  langs:
  - csharp
  name: Clear()
  nameWithType: Span<T>.Clear()
  fullName: Span<T>.Clear()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Span`1.Clear*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.CopyTo(System.Span{`0})
  commentId: M:System.Span`1.CopyTo(System.Span{`0})
  id: CopyTo(System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  name: CopyTo(Span<T>)
  nameWithType: Span<T>.CopyTo(Span<T>)
  fullName: Span<T>.CopyTo(Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public void CopyTo (Span<T> destination);
    parameters:
    - id: destination
      type: System.Span`1
      description: To be added.
  overload: System.Span`1.CopyTo*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.DangerousCreate(System.Object,`0@,System.Int32)
  commentId: M:System.Span`1.DangerousCreate(System.Object,`0@,System.Int32)
  id: DangerousCreate(System.Object,`0@,System.Int32)
  parent: System.Span`1
  langs:
  - csharp
  name: DangerousCreate(Object, T, Int32)
  nameWithType: Span<T>.DangerousCreate(Object, T, Int32)
  fullName: Span<T>.DangerousCreate(Object, T, Int32)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> DangerousCreate (object obj, ref T objectData, int length);
    parameters:
    - id: obj
      type: System.Object
      description: To be added.
    - id: objectData
      type: T
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
    return:
      type: System.Span`1
      description: To be added.
  overload: System.Span`1.DangerousCreate*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.DangerousGetPinnableReference
  commentId: M:System.Span`1.DangerousGetPinnableReference
  id: DangerousGetPinnableReference
  parent: System.Span`1
  langs:
  - csharp
  name: DangerousGetPinnableReference()
  nameWithType: Span<T>.DangerousGetPinnableReference()
  fullName: Span<T>.DangerousGetPinnableReference()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public T DangerousGetPinnableReference ();
    parameters: []
    return:
      type: T@
      description: To be added.
  overload: System.Span`1.DangerousGetPinnableReference*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Empty
  commentId: P:System.Span`1.Empty
  id: Empty
  parent: System.Span`1
  langs:
  - csharp
  name: Empty
  nameWithType: Span<T>.Empty
  fullName: Span<T>.Empty
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> Empty { get; }
    return:
      type: System.Span`1
      description: To be added.
  overload: System.Span`1.Empty*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Equals(System.Object)
  commentId: M:System.Span`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Span`1
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Span<T>.Equals(Object)
  fullName: Span<T>.Equals(Object)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: >-
      [System.Obsolete("Equals() on Span will always throw an exception. Use == instead.")]

      public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Span`1.Equals*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Fill(`0)
  commentId: M:System.Span`1.Fill(`0)
  id: Fill(`0)
  parent: System.Span`1
  langs:
  - csharp
  name: Fill(T)
  nameWithType: Span<T>.Fill(T)
  fullName: Span<T>.Fill(T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public void Fill (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
  overload: System.Span`1.Fill*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.GetHashCode
  commentId: M:System.Span`1.GetHashCode
  id: GetHashCode
  parent: System.Span`1
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Span<T>.GetHashCode()
  fullName: Span<T>.GetHashCode()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: >-
      [System.Obsolete("GetHashCode() on Span will always throw an exception.")]

      public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: System.Span`1.GetHashCode*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.IsEmpty
  commentId: P:System.Span`1.IsEmpty
  id: IsEmpty
  parent: System.Span`1
  langs:
  - csharp
  name: IsEmpty
  nameWithType: Span<T>.IsEmpty
  fullName: Span<T>.IsEmpty
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Span`1.IsEmpty*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Item(System.Int32)
  commentId: P:System.Span`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Span`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Span<T>.Item(Int32)
  fullName: Span<T>.Item(Int32)
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: T@
      description: To be added.
  overload: System.Span`1.Item*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Length
  commentId: P:System.Span`1.Length
  id: Length
  parent: System.Span`1
  langs:
  - csharp
  name: Length
  nameWithType: Span<T>.Length
  fullName: Span<T>.Length
  type: Property
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Span`1.Length*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Equality(System.Span{`0},System.Span{`0})
  commentId: M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})
  id: op_Equality(System.Span{`0},System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  name: op_Equality(Span<T>, Span<T>)
  nameWithType: Span<T>.op_Equality(Span<T>, Span<T>)
  fullName: Span<T>.op_Equality(Span<T>, Span<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool op_Equality (Span<T> left, Span<T> right);
    parameters:
    - id: left
      type: System.Span`1
      description: To be added.
    - id: right
      type: System.Span`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Span`1.op_Equality*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Implicit(System.ArraySegment{T} to System.Span{T})
  commentId: M:System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}
  id: op_Implicit(System.ArraySegment{T} to System.Span{T})
  parent: System.Span`1
  langs:
  - csharp
  name: op_Implicit(ArraySegment<T> to Span<T>)
  nameWithType: Span<T>.op_Implicit(ArraySegment<T> to Span<T>)
  fullName: Span<T>.op_Implicit(ArraySegment<T> to Span<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> op_Implicit (ArraySegment<T> arraySegment);
    parameters:
    - id: arraySegment
      type: System.ArraySegment`1
      description: To be added.
    return:
      type: System.Span`1
      description: To be added.
  overload: System.Span`1.op_Implicit*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Implicit(System.Span{T} to System.ReadOnlySpan{T})
  commentId: M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}
  id: op_Implicit(System.Span{T} to System.ReadOnlySpan{T})
  parent: System.Span`1
  langs:
  - csharp
  name: op_Implicit(Span<T> to ReadOnlySpan<T>)
  nameWithType: Span<T>.op_Implicit(Span<T> to ReadOnlySpan<T>)
  fullName: Span<T>.op_Implicit(Span<T> to ReadOnlySpan<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<T> op_Implicit (Span<T> span);
    parameters:
    - id: span
      type: System.Span`1
      description: To be added.
    return:
      type: System.ReadOnlySpan`1
      description: To be added.
  overload: System.Span`1.op_Implicit*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Implicit(T[] to System.Span{T})
  commentId: M:System.Span`1.op_Implicit(`0[])~System.Span{`0}
  id: op_Implicit(T[] to System.Span{T})
  parent: System.Span`1
  langs:
  - csharp
  name: op_Implicit(T[] to Span<T>)
  nameWithType: Span<T>.op_Implicit(T[] to Span<T>)
  fullName: Span<T>.op_Implicit(T[] to Span<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> op_Implicit (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Span`1
      description: To be added.
  overload: System.Span`1.op_Implicit*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})
  commentId: M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})
  id: op_Inequality(System.Span{`0},System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  name: op_Inequality(Span<T>, Span<T>)
  nameWithType: Span<T>.op_Inequality(Span<T>, Span<T>)
  fullName: Span<T>.op_Inequality(Span<T>, Span<T>)
  type: Operator
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool op_Inequality (Span<T> left, Span<T> right);
    parameters:
    - id: left
      type: System.Span`1
      description: To be added.
    - id: right
      type: System.Span`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Span`1.op_Inequality*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Slice(System.Int32)
  commentId: M:System.Span`1.Slice(System.Int32)
  id: Slice(System.Int32)
  parent: System.Span`1
  langs:
  - csharp
  name: Slice(Int32)
  nameWithType: Span<T>.Slice(Int32)
  fullName: Span<T>.Slice(Int32)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public Span<T> Slice (int start);
    parameters:
    - id: start
      type: System.Int32
      description: To be added.
    return:
      type: System.Span`1
      description: To be added.
  overload: System.Span`1.Slice*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Slice(System.Int32,System.Int32)
  commentId: M:System.Span`1.Slice(System.Int32,System.Int32)
  id: Slice(System.Int32,System.Int32)
  parent: System.Span`1
  langs:
  - csharp
  name: Slice(Int32, Int32)
  nameWithType: Span<T>.Slice(Int32, Int32)
  fullName: Span<T>.Slice(Int32, Int32)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public Span<T> Slice (int start, int length);
    parameters:
    - id: start
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
    return:
      type: System.Span`1
      description: To be added.
  overload: System.Span`1.Slice*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.ToArray
  commentId: M:System.Span`1.ToArray
  id: ToArray
  parent: System.Span`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: Span<T>.ToArray()
  fullName: Span<T>.ToArray()
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  overload: System.Span`1.ToArray*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.TryCopyTo(System.Span{`0})
  commentId: M:System.Span`1.TryCopyTo(System.Span{`0})
  id: TryCopyTo(System.Span{`0})
  parent: System.Span`1
  langs:
  - csharp
  name: TryCopyTo(Span<T>)
  nameWithType: Span<T>.TryCopyTo(Span<T>)
  fullName: Span<T>.TryCopyTo(Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public bool TryCopyTo (Span<T> destination);
    parameters:
    - id: destination
      type: System.Span`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Span`1.TryCopyTo*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
references:
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Span`1.#ctor(`0[])
  parent: System.Span`1
  isExternal: false
  name: Span<T>(T[])
  nameWithType: Span<T>.Span<T>(T[])
  fullName: Span<T>.Span<T>(T[])
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Span`1.#ctor(System.Void*,System.Int32)
  parent: System.Span`1
  isExternal: false
  name: Span<T>(Void*, Int32)
  nameWithType: Span<T>.Span<T>(Void*, Int32)
  fullName: Span<T>.Span<T>(Void*, Int32)
- uid: System.Void
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Void*
  parent: System
  isExternal: false
  name: Void*
  nameWithType: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    nameWithType: Void
    fullName: System.Void
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Span`1.#ctor(`0[],System.Int32)
  parent: System.Span`1
  isExternal: false
  name: Span<T>(T[], Int32)
  nameWithType: Span<T>.Span<T>(T[], Int32)
  fullName: Span<T>.Span<T>(T[], Int32)
- uid: System.Span`1.#ctor(`0[],System.Int32,System.Int32)
  parent: System.Span`1
  isExternal: false
  name: Span<T>(T[], Int32, Int32)
  nameWithType: Span<T>.Span<T>(T[], Int32, Int32)
  fullName: Span<T>.Span<T>(T[], Int32, Int32)
- uid: System.Span`1.Clear
  parent: System.Span`1
  isExternal: false
  name: Clear()
  nameWithType: Span<T>.Clear()
  fullName: Span<T>.Clear()
- uid: System.Span`1.CopyTo(System.Span{`0})
  parent: System.Span`1
  isExternal: false
  name: CopyTo(Span<T>)
  nameWithType: Span<T>.CopyTo(Span<T>)
  fullName: Span<T>.CopyTo(Span<T>)
- uid: System.Span`1
  parent: System
  isExternal: false
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
- uid: System.Span`1.DangerousCreate(System.Object,`0@,System.Int32)
  parent: System.Span`1
  isExternal: false
  name: DangerousCreate(Object, T, Int32)
  nameWithType: Span<T>.DangerousCreate(Object, T, Int32)
  fullName: Span<T>.DangerousCreate(Object, T, Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Span`1.DangerousGetPinnableReference
  parent: System.Span`1
  isExternal: false
  name: DangerousGetPinnableReference()
  nameWithType: Span<T>.DangerousGetPinnableReference()
  fullName: Span<T>.DangerousGetPinnableReference()
- uid: System.Span`1.Empty
  parent: System.Span`1
  isExternal: false
  name: Empty
  nameWithType: Span<T>.Empty
  fullName: Span<T>.Empty
- uid: System.Span`1.Equals(System.Object)
  parent: System.Span`1
  isExternal: false
  name: Equals(Object)
  nameWithType: Span<T>.Equals(Object)
  fullName: Span<T>.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Span`1.Fill(`0)
  parent: System.Span`1
  isExternal: false
  name: Fill(T)
  nameWithType: Span<T>.Fill(T)
  fullName: Span<T>.Fill(T)
- uid: System.Span`1.GetHashCode
  parent: System.Span`1
  isExternal: false
  name: GetHashCode()
  nameWithType: Span<T>.GetHashCode()
  fullName: Span<T>.GetHashCode()
- uid: System.Span`1.IsEmpty
  parent: System.Span`1
  isExternal: false
  name: IsEmpty
  nameWithType: Span<T>.IsEmpty
  fullName: Span<T>.IsEmpty
- uid: System.Span`1.Item(System.Int32)
  parent: System.Span`1
  isExternal: false
  name: Item(Int32)
  nameWithType: Span<T>.Item(Int32)
  fullName: Span<T>.Item(Int32)
- uid: System.Span`1.Length
  parent: System.Span`1
  isExternal: false
  name: Length
  nameWithType: Span<T>.Length
  fullName: Span<T>.Length
- uid: System.Span`1.op_Equality(System.Span{`0},System.Span{`0})
  parent: System.Span`1
  isExternal: false
  name: op_Equality(Span<T>, Span<T>)
  nameWithType: Span<T>.op_Equality(Span<T>, Span<T>)
  fullName: Span<T>.op_Equality(Span<T>, Span<T>)
- uid: System.Span`1.op_Implicit(System.ArraySegment{T} to System.Span{T})
  parent: System.Span`1
  isExternal: false
  name: op_Implicit(ArraySegment<T> to Span<T>)
  nameWithType: Span<T>.op_Implicit(ArraySegment<T> to Span<T>)
  fullName: Span<T>.op_Implicit(ArraySegment<T> to Span<T>)
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
- uid: System.Span`1.op_Implicit(System.Span{T} to System.ReadOnlySpan{T})
  parent: System.Span`1
  isExternal: false
  name: op_Implicit(Span<T> to ReadOnlySpan<T>)
  nameWithType: Span<T>.op_Implicit(Span<T> to ReadOnlySpan<T>)
  fullName: Span<T>.op_Implicit(Span<T> to ReadOnlySpan<T>)
- uid: System.ReadOnlySpan`1
  parent: System
  isExternal: false
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
- uid: System.Span`1.op_Implicit(T[] to System.Span{T})
  parent: System.Span`1
  isExternal: false
  name: op_Implicit(T[] to Span<T>)
  nameWithType: Span<T>.op_Implicit(T[] to Span<T>)
  fullName: Span<T>.op_Implicit(T[] to Span<T>)
- uid: System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})
  parent: System.Span`1
  isExternal: false
  name: op_Inequality(Span<T>, Span<T>)
  nameWithType: Span<T>.op_Inequality(Span<T>, Span<T>)
  fullName: Span<T>.op_Inequality(Span<T>, Span<T>)
- uid: System.Span`1.Slice(System.Int32)
  parent: System.Span`1
  isExternal: false
  name: Slice(Int32)
  nameWithType: Span<T>.Slice(Int32)
  fullName: Span<T>.Slice(Int32)
- uid: System.Span`1.Slice(System.Int32,System.Int32)
  parent: System.Span`1
  isExternal: false
  name: Slice(Int32, Int32)
  nameWithType: Span<T>.Slice(Int32, Int32)
  fullName: Span<T>.Slice(Int32, Int32)
- uid: System.Span`1.ToArray
  parent: System.Span`1
  isExternal: false
  name: ToArray()
  nameWithType: Span<T>.ToArray()
  fullName: Span<T>.ToArray()
- uid: System.Span`1.TryCopyTo(System.Span{`0})
  parent: System.Span`1
  isExternal: false
  name: TryCopyTo(Span<T>)
  nameWithType: Span<T>.TryCopyTo(Span<T>)
  fullName: Span<T>.TryCopyTo(Span<T>)
- uid: System.Span`1.#ctor*
  parent: System.Span`1
  isExternal: false
  name: Span<T>
  nameWithType: Span<T>.Span<T>
  fullName: Span<T>.Span<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Clear*
  parent: System.Span`1
  isExternal: false
  name: Clear
  nameWithType: Span<T>.Clear
  fullName: Span<T>.Clear
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.CopyTo*
  parent: System.Span`1
  isExternal: false
  name: CopyTo
  nameWithType: Span<T>.CopyTo
  fullName: Span<T>.CopyTo
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.DangerousCreate*
  parent: System.Span`1
  isExternal: false
  name: DangerousCreate
  nameWithType: Span<T>.DangerousCreate
  fullName: Span<T>.DangerousCreate
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.DangerousGetPinnableReference*
  parent: System.Span`1
  isExternal: false
  name: DangerousGetPinnableReference
  nameWithType: Span<T>.DangerousGetPinnableReference
  fullName: Span<T>.DangerousGetPinnableReference
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Empty*
  parent: System.Span`1
  isExternal: false
  name: Empty
  nameWithType: Span<T>.Empty
  fullName: Span<T>.Empty
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Equals*
  parent: System.Span`1
  isExternal: false
  name: Equals
  nameWithType: Span<T>.Equals
  fullName: Span<T>.Equals
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Fill*
  parent: System.Span`1
  isExternal: false
  name: Fill
  nameWithType: Span<T>.Fill
  fullName: Span<T>.Fill
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.GetHashCode*
  parent: System.Span`1
  isExternal: false
  name: GetHashCode
  nameWithType: Span<T>.GetHashCode
  fullName: Span<T>.GetHashCode
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.IsEmpty*
  parent: System.Span`1
  isExternal: false
  name: IsEmpty
  nameWithType: Span<T>.IsEmpty
  fullName: Span<T>.IsEmpty
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Item*
  parent: System.Span`1
  isExternal: false
  name: Item
  nameWithType: Span<T>.Item
  fullName: Span<T>.Item
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Length*
  parent: System.Span`1
  isExternal: false
  name: Length
  nameWithType: Span<T>.Length
  fullName: Span<T>.Length
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Equality*
  parent: System.Span`1
  isExternal: false
  name: op_Equality
  nameWithType: Span<T>.op_Equality
  fullName: Span<T>.op_Equality
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Implicit*
  parent: System.Span`1
  isExternal: false
  name: op_Implicit
  nameWithType: Span<T>.op_Implicit
  fullName: Span<T>.op_Implicit
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.op_Inequality*
  parent: System.Span`1
  isExternal: false
  name: op_Inequality
  nameWithType: Span<T>.op_Inequality
  fullName: Span<T>.op_Inequality
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.Slice*
  parent: System.Span`1
  isExternal: false
  name: Slice
  nameWithType: Span<T>.Slice
  fullName: Span<T>.Slice
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.ToArray*
  parent: System.Span`1
  isExternal: false
  name: ToArray
  nameWithType: Span<T>.ToArray
  fullName: Span<T>.ToArray
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.Span`1.TryCopyTo*
  parent: System.Span`1
  isExternal: false
  name: TryCopyTo
  nameWithType: Span<T>.TryCopyTo
  fullName: Span<T>.TryCopyTo
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Span`1.xml
- uid: System.SpanExtensions.AsBytes``1(System.Span{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: AsBytes<T>(Span<T>)
  nameWithType: SpanExtensions.AsBytes<T>(Span<T>)
  fullName: SpanExtensions.AsBytes<T>(Span<T>)
- uid: System.SpanExtensions.IndexOf(System.Span{System.Byte},System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf(Span<Byte>, Byte)
  nameWithType: SpanExtensions.IndexOf(Span<Byte>, Byte)
  fullName: SpanExtensions.IndexOf(Span<Byte>, Byte)
- uid: System.SpanExtensions.IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.IndexOf``1(System.Span{``0},``0)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf<T>(Span<T>, T)
  nameWithType: SpanExtensions.IndexOf<T>(Span<T>, T)
  fullName: SpanExtensions.IndexOf<T>(Span<T>, T)
- uid: System.SpanExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.IndexOf<T>(Span<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(Span<Byte>, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte)
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(Span<Byte>, Byte, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte, Byte)
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.NonPortableCast``2(System.Span{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: NonPortableCast<TFrom,TTo>(Span<TFrom>)
  nameWithType: SpanExtensions.NonPortableCast<TFrom,TTo>(Span<TFrom>)
  fullName: SpanExtensions.NonPortableCast<TFrom,TTo>(Span<TFrom>)
- uid: System.SpanExtensions.SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.StartsWith<T>(Span<T>, ReadOnlySpan<T>)
