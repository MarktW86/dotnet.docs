### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableArray`1
  commentId: T:System.Collections.Immutable.ImmutableArray`1
  id: ImmutableArray`1
  children:
  - System.Collections.Immutable.ImmutableArray`1.Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.As``1
  - System.Collections.Immutable.ImmutableArray`1.CastArray``1
  - System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Collections.Immutable.ImmutableArray`1.Clear
  - System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  - System.Collections.Immutable.ImmutableArray`1.Empty
  - System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.GetHashCode
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.IsDefault
  - System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  - System.Collections.Immutable.ImmutableArray`1.IsEmpty
  - System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Length
  - System.Collections.Immutable.ImmutableArray`1.OfType``1
  - System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  - System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  - System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  - System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  - System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  - System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.Sort
  - System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})
  - System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.ToBuilder
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  langs:
  - csharp
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
  type: Struct
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: 'public struct ImmutableArray<T> : IEquatable<System.Collections.Immutable.ImmutableArray<T>>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IList, System.Collections.Immutable.IImmutableList<T>, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable'
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.Collections.Generic.ICollection{T}
  - System.Collections.Generic.IEnumerable{T}
  - System.Collections.Generic.IList{T}
  - System.Collections.Generic.IReadOnlyCollection{T}
  - System.Collections.Generic.IReadOnlyList{T}
  - System.Collections.IList
  - System.Collections.Immutable.IImmutableList{T}
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.IEquatable{System.Collections.Immutable.ImmutableArray{T}}
  extensionMethods:
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  - System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  - System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  - System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  - System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Add(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: ImmutableArray<T>.Add(T)
  fullName: ImmutableArray<T>.Add(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Add (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Add*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: AddRange(IEnumerable<T>)
  nameWithType: ImmutableArray<T>.AddRange(IEnumerable<T>)
  fullName: ImmutableArray<T>.AddRange(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> AddRange (System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.AddRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  id: AddRange(System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: AddRange(ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.AddRange(ImmutableArray<T>)
  fullName: ImmutableArray<T>.AddRange(ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> AddRange (System.Collections.Immutable.ImmutableArray<T> items);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.AddRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.As``1
  commentId: M:System.Collections.Immutable.ImmutableArray`1.As``1
  id: As``1
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: As<TOther>()
  nameWithType: ImmutableArray<T>.As<TOther>()
  fullName: ImmutableArray<T>.As<TOther>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: 'public System.Collections.Immutable.ImmutableArray<TOther> As<TOther> () where TOther : class;'
    parameters: []
    typeParameters:
    - id: TOther
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray{TOther}
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.As``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CastArray``1
  commentId: M:System.Collections.Immutable.ImmutableArray`1.CastArray``1
  id: CastArray``1
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: CastArray<TOther>()
  nameWithType: ImmutableArray<T>.CastArray<TOther>()
  fullName: ImmutableArray<T>.CastArray<TOther>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: 'public System.Collections.Immutable.ImmutableArray<TOther> CastArray<TOther> () where TOther : class;'
    parameters: []
    typeParameters:
    - id: TOther
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray{TOther}
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.CastArray``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  id: CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: CastUp<TDerived>(ImmutableArray<TDerived>)
  nameWithType: ImmutableArray<T>.CastUp<TDerived>(ImmutableArray<TDerived>)
  fullName: ImmutableArray<T>.CastUp<TDerived>(ImmutableArray<TDerived>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: 'public static System.Collections.Immutable.ImmutableArray<T> CastUp<TDerived> (System.Collections.Immutable.ImmutableArray<TDerived> items) where TDerived : class, T;'
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{TDerived}
      description: To be added.
    typeParameters:
    - id: TDerived
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.CastUp``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Clear
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Clear
  id: Clear
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Clear()
  nameWithType: ImmutableArray<T>.Clear()
  fullName: ImmutableArray<T>.Clear()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Clear ();
    parameters: []
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Clear*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: ImmutableArray<T>.Contains(T)
  fullName: ImmutableArray<T>.Contains(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Contains*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: CopyTo(T[], Int32)
  nameWithType: ImmutableArray<T>.CopyTo(T[], Int32)
  fullName: ImmutableArray<T>.CopyTo(T[], Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public void CopyTo (T[] destination, int destinationIndex);
    parameters:
    - id: destination
      type: T[]
      description: To be added.
    - id: destinationIndex
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.CopyTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: ImmutableArray<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: ImmutableArray<T>.CopyTo(Int32, T[], Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public void CopyTo (int sourceIndex, T[] destination, int destinationIndex, int length);
    parameters:
    - id: sourceIndex
      type: System.Int32
      description: To be added.
    - id: destination
      type: T[]
      description: To be added.
    - id: destinationIndex
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.CopyTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  commentId: M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: CopyTo(T[])
  nameWithType: ImmutableArray<T>.CopyTo(T[])
  fullName: ImmutableArray<T>.CopyTo(T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public void CopyTo (T[] destination);
    parameters:
    - id: destination
      type: T[]
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.CopyTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Empty
  commentId: F:System.Collections.Immutable.ImmutableArray`1.Empty
  id: Empty
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Empty
  nameWithType: ImmutableArray<T>.Empty
  fullName: ImmutableArray<T>.Empty
  type: Field
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public static readonly System.Collections.Immutable.ImmutableArray<T> Empty;
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  id: Equals(System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Equals(ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.Equals(ImmutableArray<T>)
  fullName: ImmutableArray<T>.Equals(ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public bool Equals (System.Collections.Immutable.ImmutableArray<T> other);
    parameters:
    - id: other
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ImmutableArray<T>.Equals(Object)
  fullName: ImmutableArray<T>.Equals(Object)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  commentId: M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ImmutableArray<T>.GetEnumerator()
  fullName: ImmutableArray<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Immutable.ImmutableArray{T}
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.GetHashCode
  commentId: M:System.Collections.Immutable.ImmutableArray`1.GetHashCode
  id: GetHashCode
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ImmutableArray<T>.GetHashCode()
  fullName: ImmutableArray<T>.GetHashCode()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int IndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: ImmutableArray<T>.IndexOf(T)
  fullName: ImmutableArray<T>.IndexOf(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IndexOf(T, Int32)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32)
  fullName: ImmutableArray<T>.IndexOf(T, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int IndexOf (T item, int startIndex);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IndexOf(T, Int32, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IndexOf(T, Int32, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int IndexOf (T item, int startIndex, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IndexOf(T, Int32, Int32)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32, Int32)
  fullName: ImmutableArray<T>.IndexOf(T, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int IndexOf (T item, int startIndex, int count);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Insert(Int32, T)
  nameWithType: ImmutableArray<T>.Insert(Int32, T)
  fullName: ImmutableArray<T>.Insert(Int32, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Insert*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  id: InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: InsertRange(Int32, ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.InsertRange(Int32, ImmutableArray<T>)
  fullName: ImmutableArray<T>.InsertRange(Int32, ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> InsertRange (int index, System.Collections.Immutable.ImmutableArray<T> items);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.InsertRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: ImmutableArray<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: ImmutableArray<T>.InsertRange(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> InsertRange (int index, System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.InsertRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefault
  commentId: P:System.Collections.Immutable.ImmutableArray`1.IsDefault
  id: IsDefault
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IsDefault
  nameWithType: ImmutableArray<T>.IsDefault
  fullName: ImmutableArray<T>.IsDefault
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public bool IsDefault { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IsDefault*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  commentId: P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  id: IsDefaultOrEmpty
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IsDefaultOrEmpty
  nameWithType: ImmutableArray<T>.IsDefaultOrEmpty
  fullName: ImmutableArray<T>.IsDefaultOrEmpty
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public bool IsDefaultOrEmpty { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IsEmpty
  commentId: P:System.Collections.Immutable.ImmutableArray`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IsEmpty
  nameWithType: ImmutableArray<T>.IsEmpty
  fullName: ImmutableArray<T>.IsEmpty
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.IsEmpty*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  commentId: P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ImmutableArray<T>.Item(Int32)
  fullName: ImmutableArray<T>.Item(Int32)
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Item*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: LastIndexOf(T)
  nameWithType: ImmutableArray<T>.LastIndexOf(T)
  fullName: ImmutableArray<T>.LastIndexOf(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int LastIndexOf (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.LastIndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: LastIndexOf(T, Int32)
  nameWithType: ImmutableArray<T>.LastIndexOf(T, Int32)
  fullName: ImmutableArray<T>.LastIndexOf(T, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int LastIndexOf (T item, int startIndex);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.LastIndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: ImmutableArray<T>.LastIndexOf(T, Int32, Int32)
  fullName: ImmutableArray<T>.LastIndexOf(T, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int LastIndexOf (T item, int startIndex, int count);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.LastIndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int LastIndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.LastIndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Length
  commentId: P:System.Collections.Immutable.ImmutableArray`1.Length
  id: Length
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Length
  nameWithType: ImmutableArray<T>.Length
  fullName: ImmutableArray<T>.Length
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Length*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.OfType``1
  commentId: M:System.Collections.Immutable.ImmutableArray`1.OfType``1
  id: OfType``1
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: OfType<TResult>()
  nameWithType: ImmutableArray<T>.OfType<TResult>()
  fullName: ImmutableArray<T>.OfType<TResult>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> OfType<TResult> ();
    parameters: []
    typeParameters:
    - id: TResult
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.OfType``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  id: op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: op_Equality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  nameWithType: ImmutableArray<T>.op_Equality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  fullName: ImmutableArray<T>.op_Equality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  type: Operator
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public static bool op_Equality (Nullable<System.Collections.Immutable.ImmutableArray<T>> left, Nullable<System.Collections.Immutable.ImmutableArray<T>> right);
    parameters:
    - id: left
      type: System.Nullable{System.Collections.Immutable.ImmutableArray{T}}
      description: To be added.
    - id: right
      type: System.Nullable{System.Collections.Immutable.ImmutableArray{T}}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.op_Equality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  id: op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: op_Equality(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.op_Equality(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableArray<T>.op_Equality(ImmutableArray<T>, ImmutableArray<T>)
  type: Operator
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public static bool op_Equality (System.Collections.Immutable.ImmutableArray<T> left, System.Collections.Immutable.ImmutableArray<T> right);
    parameters:
    - id: left
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    - id: right
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.op_Equality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  id: op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: op_Inequality(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.op_Inequality(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableArray<T>.op_Inequality(ImmutableArray<T>, ImmutableArray<T>)
  type: Operator
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public static bool op_Inequality (System.Collections.Immutable.ImmutableArray<T> left, System.Collections.Immutable.ImmutableArray<T> right);
    parameters:
    - id: left
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    - id: right
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.op_Inequality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  id: op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: op_Inequality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  nameWithType: ImmutableArray<T>.op_Inequality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  fullName: ImmutableArray<T>.op_Inequality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  type: Operator
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public static bool op_Inequality (Nullable<System.Collections.Immutable.ImmutableArray<T>> left, Nullable<System.Collections.Immutable.ImmutableArray<T>> right);
    parameters:
    - id: left
      type: System.Nullable{System.Collections.Immutable.ImmutableArray{T}}
      description: To be added.
    - id: right
      type: System.Nullable{System.Collections.Immutable.ImmutableArray{T}}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.op_Inequality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: ImmutableArray<T>.Remove(T)
  fullName: ImmutableArray<T>.Remove(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Remove (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Remove*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  id: Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Remove(T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.Remove(T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.Remove(T, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Remove (T item, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Remove*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  id: RemoveAll(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: RemoveAll(Predicate<T>)
  nameWithType: ImmutableArray<T>.RemoveAll(Predicate<T>)
  fullName: ImmutableArray<T>.RemoveAll(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> RemoveAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.RemoveAll*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.RemoveAt(Int32)
  fullName: ImmutableArray<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.RemoveAt*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> RemoveRange (System.Collections.Immutable.ImmutableArray<T> items, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.RemoveRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> RemoveRange (System.Collections.Generic.IEnumerable<T> items, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.RemoveRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: RemoveRange(Int32, Int32)
  nameWithType: ImmutableArray<T>.RemoveRange(Int32, Int32)
  fullName: ImmutableArray<T>.RemoveRange(Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> RemoveRange (int index, int length);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.RemoveRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  id: RemoveRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: RemoveRange(IEnumerable<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(IEnumerable<T>)
  fullName: ImmutableArray<T>.RemoveRange(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> RemoveRange (System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.RemoveRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  id: RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: RemoveRange(ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(ImmutableArray<T>)
  fullName: ImmutableArray<T>.RemoveRange(ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> RemoveRange (System.Collections.Immutable.ImmutableArray<T> items);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.RemoveRange*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  id: Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Replace(T, T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.Replace(T, T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.Replace(T, T, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: oldValue
      type: T
      description: To be added.
    - id: newValue
      type: T
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Replace*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  id: Replace(`0,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Replace(T, T)
  nameWithType: ImmutableArray<T>.Replace(T, T)
  fullName: ImmutableArray<T>.Replace(T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Replace (T oldValue, T newValue);
    parameters:
    - id: oldValue
      type: T
      description: To be added.
    - id: newValue
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Replace*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: SetItem(Int32, T)
  nameWithType: ImmutableArray<T>.SetItem(Int32, T)
  fullName: ImmutableArray<T>.SetItem(Int32, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> SetItem (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.SetItem*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Sort
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Sort
  id: Sort
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Sort()
  nameWithType: ImmutableArray<T>.Sort()
  fullName: ImmutableArray<T>.Sort()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Sort ();
    parameters: []
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Sort*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Sort(IComparer<T>)
  nameWithType: ImmutableArray<T>.Sort(IComparer<T>)
  fullName: ImmutableArray<T>.Sort(IComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Sort (System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Sort*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})
  id: Sort(System.Comparison{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Sort(Comparison<T>)
  nameWithType: ImmutableArray<T>.Sort(Comparison<T>)
  fullName: ImmutableArray<T>.Sort(Comparison<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Sort (Comparison<T> comparison);
    parameters:
    - id: comparison
      type: System.Comparison`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Sort*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: ImmutableArray<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: ImmutableArray<T>.Sort(Int32, Int32, IComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T> Sort (int index, int count, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.Sort*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.ToBuilder
  commentId: M:System.Collections.Immutable.ImmutableArray`1.ToBuilder
  id: ToBuilder
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ToBuilder()
  nameWithType: ImmutableArray<T>.ToBuilder()
  fullName: ImmutableArray<T>.ToBuilder()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: public System.Collections.Immutable.ImmutableArray<T>.Builder ToBuilder ();
    parameters: []
    return:
      type: System.Collections.Immutable.ImmutableArray{T}
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.ToBuilder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection<T>#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: ImmutableArray<T>.ICollection<T>.Add(T)
  fullName: ImmutableArray<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void ICollection<T>.Add (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection<T>#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection<T>.Clear()
  nameWithType: ImmutableArray<T>.ICollection<T>.Clear()
  fullName: ImmutableArray<T>.ICollection<T>.Clear()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void ICollection<T>.Clear ();
    parameters: []
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection<T>#Count
  id: System#Collections#Generic#ICollection{T}#Count
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection<T>.Count
  nameWithType: ImmutableArray<T>.ICollection<T>.Count
  fullName: ImmutableArray<T>.ICollection<T>.Count
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: int System.Collections.Generic.ICollection<T>.Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection<T>#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: ImmutableArray<T>.ICollection<T>.IsReadOnly
  fullName: ImmutableArray<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection<T>#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection<T>.Remove(T)
  nameWithType: ImmutableArray<T>.ICollection<T>.Remove(T)
  fullName: ImmutableArray<T>.ICollection<T>.Remove(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: bool ICollection<T>.Remove (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: ImmutableArray<T>.IEnumerable<T>.GetEnumerator()
  fullName: ImmutableArray<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList<T>#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList<T>.Insert(Int32, T)
  nameWithType: ImmutableArray<T>.IList<T>.Insert(Int32, T)
  fullName: ImmutableArray<T>.IList<T>.Insert(Int32, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void IList<T>.Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList<T>#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList<T>.Item(Int32)
  nameWithType: ImmutableArray<T>.IList<T>.Item(Int32)
  fullName: ImmutableArray<T>.IList<T>.Item(Int32)
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList<T>#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList<T>.RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.IList<T>.RemoveAt(Int32)
  fullName: ImmutableArray<T>.IList<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void IList<T>.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection<T>#Count
  id: System#Collections#Generic#IReadOnlyCollection{T}#Count
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IReadOnlyCollection<T>.Count
  nameWithType: ImmutableArray<T>.IReadOnlyCollection<T>.Count
  fullName: ImmutableArray<T>.IReadOnlyCollection<T>.Count
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: int System.Collections.Generic.IReadOnlyCollection<T>.Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList<T>#Item(System.Int32)
  id: System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IReadOnlyList<T>.Item(Int32)
  nameWithType: ImmutableArray<T>.IReadOnlyList<T>.Item(Int32)
  fullName: ImmutableArray<T>.IReadOnlyList<T>.Item(Int32)
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: T System.Collections.Generic.IReadOnlyList<T>.Item[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ImmutableArray<T>.ICollection.CopyTo(Array, Int32)
  fullName: ImmutableArray<T>.ICollection.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection.Count
  nameWithType: ImmutableArray<T>.ICollection.Count
  fullName: ImmutableArray<T>.ICollection.Count
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: ImmutableArray<T>.ICollection.IsSynchronized
  fullName: ImmutableArray<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: ImmutableArray<T>.ICollection.SyncRoot
  fullName: ImmutableArray<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: ImmutableArray<T>.IEnumerable.GetEnumerator()
  fullName: ImmutableArray<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: ImmutableArray<T>.IList.Add(Object)
  fullName: ImmutableArray<T>.IList.Add(Object)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.Clear()
  nameWithType: ImmutableArray<T>.IList.Clear()
  fullName: ImmutableArray<T>.IList.Clear()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: ImmutableArray<T>.IList.Contains(Object)
  fullName: ImmutableArray<T>.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: ImmutableArray<T>.IList.IndexOf(Object)
  fullName: ImmutableArray<T>.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.Insert(Int32, Object)
  nameWithType: ImmutableArray<T>.IList.Insert(Int32, Object)
  fullName: ImmutableArray<T>.IList.Insert(Int32, Object)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: value
      type: System.Object
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: ImmutableArray<T>.IList.IsFixedSize
  fullName: ImmutableArray<T>.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.IsReadOnly
  nameWithType: ImmutableArray<T>.IList.IsReadOnly
  fullName: ImmutableArray<T>.IList.IsReadOnly
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: ImmutableArray<T>.IList.Item(Int32)
  fullName: ImmutableArray<T>.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: ImmutableArray<T>.IList.Remove(Object)
  fullName: ImmutableArray<T>.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IList.RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.IList.RemoveAt(Int32)
  fullName: ImmutableArray<T>.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#Add(`0)
  id: System#Collections#Immutable#IImmutableList{T}#Add(`0)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.Add(T)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Add(T)
  fullName: ImmutableArray<T>.IImmutableList<T>.Add(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.Add (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#AddRange(System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.AddRange(IEnumerable<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.AddRange(IEnumerable<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.AddRange(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.AddRange (System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#Clear
  id: System#Collections#Immutable#IImmutableList{T}#Clear
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.Clear()
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Clear()
  fullName: ImmutableArray<T>.IImmutableList<T>.Clear()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.Clear ();
    parameters: []
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#Insert(System.Int32,`0)
  id: System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.Insert(Int32, T)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Insert(Int32, T)
  fullName: ImmutableArray<T>.IImmutableList<T>.Insert(Int32, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.Insert (int index, T element);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: element
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.InsertRange(Int32, IEnumerable<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.InsertRange(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.InsertRange (int index, System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  id: System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.Remove(T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Remove(T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.Remove(T, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.Remove (T value, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: value
      type: T
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#RemoveAll(System.Predicate{`0})
  id: System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.RemoveAll(Predicate<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveAll(Predicate<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveAll(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.RemoveAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#RemoveAt(System.Int32)
  id: System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveAt(Int32)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.RemoveRange (System.Collections.Generic.IEnumerable<T> items, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#RemoveRange(System.Int32,System.Int32)
  id: System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.RemoveRange(Int32, Int32)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveRange(Int32, Int32)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveRange(Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  id: System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: oldValue
      type: T
      description: To be added.
    - id: newValue
      type: T
      description: To be added.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList<T>#SetItem(System.Int32,`0)
  id: System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IImmutableList<T>.SetItem(Int32, T)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.SetItem(Int32, T)
  fullName: ImmutableArray<T>.IImmutableList<T>.SetItem(Int32, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: System.Collections.Immutable.IImmutableList<T> IImmutableList<T>.SetItem (int index, T value);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType: ImmutableArray<T>.IStructuralComparable.CompareTo(Object, IComparer)
  fullName: ImmutableArray<T>.IStructuralComparable.CompareTo(Object, IComparer)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: To be added.
    - id: comparer
      type: System.Collections.IComparer
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType: ImmutableArray<T>.IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: ImmutableArray<T>.IStructuralEquatable.Equals(Object, IEqualityComparer)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: To be added.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Collections.Immutable.ImmutableArray`1
  langs:
  - csharp
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: ImmutableArray<T>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: ImmutableArray<T>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  syntax:
    content: int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
references:
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Collections.Immutable.ImmutableArray`1.Add(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Add(T)
  nameWithType: ImmutableArray<T>.Add(T)
  fullName: ImmutableArray<T>.Add(T)
- uid: System.Collections.Immutable.ImmutableArray`1
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: AddRange(IEnumerable<T>)
  nameWithType: ImmutableArray<T>.AddRange(IEnumerable<T>)
  fullName: ImmutableArray<T>.AddRange(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: AddRange(ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.AddRange(ImmutableArray<T>)
  fullName: ImmutableArray<T>.AddRange(ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.As``1
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: As<TOther>()
  nameWithType: ImmutableArray<T>.As<TOther>()
  fullName: ImmutableArray<T>.As<TOther>()
- uid: TOther
  name: TOther
  nameWithType: TOther
  fullName: TOther
- uid: System.Collections.Immutable.ImmutableArray{TOther}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<TOther>
  nameWithType: ImmutableArray<TOther>
  fullName: System.Collections.Immutable.ImmutableArray<TOther>
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOther
    name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray`1.CastArray``1
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CastArray<TOther>()
  nameWithType: ImmutableArray<T>.CastArray<TOther>()
  fullName: ImmutableArray<T>.CastArray<TOther>()
- uid: System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CastUp<TDerived>(ImmutableArray<TDerived>)
  nameWithType: ImmutableArray<T>.CastUp<TDerived>(ImmutableArray<TDerived>)
  fullName: ImmutableArray<T>.CastUp<TDerived>(ImmutableArray<TDerived>)
- uid: TDerived
  name: TDerived
  nameWithType: TDerived
  fullName: TDerived
- uid: System.Collections.Immutable.ImmutableArray{TDerived}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<TDerived>
  nameWithType: ImmutableArray<TDerived>
  fullName: System.Collections.Immutable.ImmutableArray<TDerived>
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: TDerived
    name: TDerived
    nameWithType: TDerived
    fullName: TDerived
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray`1.Clear
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Clear()
  nameWithType: ImmutableArray<T>.Clear()
  fullName: ImmutableArray<T>.Clear()
- uid: System.Collections.Immutable.ImmutableArray`1.Contains(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Contains(T)
  nameWithType: ImmutableArray<T>.Contains(T)
  fullName: ImmutableArray<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CopyTo(T[], Int32)
  nameWithType: ImmutableArray<T>.CopyTo(T[], Int32)
  fullName: ImmutableArray<T>.CopyTo(T[], Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: ImmutableArray<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: ImmutableArray<T>.CopyTo(Int32, T[], Int32, Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CopyTo(T[])
  nameWithType: ImmutableArray<T>.CopyTo(T[])
  fullName: ImmutableArray<T>.CopyTo(T[])
- uid: System.Collections.Immutable.ImmutableArray`1.Empty
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Empty
  nameWithType: ImmutableArray<T>.Empty
  fullName: ImmutableArray<T>.Empty
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Equals(ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.Equals(ImmutableArray<T>)
  fullName: ImmutableArray<T>.Equals(ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Equals(Object)
  nameWithType: ImmutableArray<T>.Equals(Object)
  fullName: ImmutableArray<T>.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Immutable.ImmutableArray`1.GetEnumerator
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: ImmutableArray<T>.GetEnumerator()
  fullName: ImmutableArray<T>.GetEnumerator()
- uid: System.Collections.Immutable.ImmutableArray{T}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>+Enumerator
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray`1.GetHashCode
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: GetHashCode()
  nameWithType: ImmutableArray<T>.GetHashCode()
  fullName: ImmutableArray<T>.GetHashCode()
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32, Int32, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IndexOf(T, Int32, Int32, IEqualityComparer<T>)
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: ImmutableArray<T>.IndexOf(T)
  fullName: ImmutableArray<T>.IndexOf(T)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IndexOf(T, Int32)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32)
  fullName: ImmutableArray<T>.IndexOf(T, Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IndexOf(T, Int32, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IndexOf(T, Int32, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IndexOf(T, Int32, Int32)
  nameWithType: ImmutableArray<T>.IndexOf(T, Int32, Int32)
  fullName: ImmutableArray<T>.IndexOf(T, Int32, Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Insert(Int32, T)
  nameWithType: ImmutableArray<T>.Insert(Int32, T)
  fullName: ImmutableArray<T>.Insert(Int32, T)
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: InsertRange(Int32, ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.InsertRange(Int32, ImmutableArray<T>)
  fullName: ImmutableArray<T>.InsertRange(Int32, ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: ImmutableArray<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: ImmutableArray<T>.InsertRange(Int32, IEnumerable<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefault
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IsDefault
  nameWithType: ImmutableArray<T>.IsDefault
  fullName: ImmutableArray<T>.IsDefault
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IsDefaultOrEmpty
  nameWithType: ImmutableArray<T>.IsDefaultOrEmpty
  fullName: ImmutableArray<T>.IsDefaultOrEmpty
- uid: System.Collections.Immutable.ImmutableArray`1.IsEmpty
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IsEmpty
  nameWithType: ImmutableArray<T>.IsEmpty
  fullName: ImmutableArray<T>.IsEmpty
- uid: System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Item(Int32)
  nameWithType: ImmutableArray<T>.Item(Int32)
  fullName: ImmutableArray<T>.Item(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: LastIndexOf(T)
  nameWithType: ImmutableArray<T>.LastIndexOf(T)
  fullName: ImmutableArray<T>.LastIndexOf(T)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: LastIndexOf(T, Int32)
  nameWithType: ImmutableArray<T>.LastIndexOf(T, Int32)
  fullName: ImmutableArray<T>.LastIndexOf(T, Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: ImmutableArray<T>.LastIndexOf(T, Int32, Int32)
  fullName: ImmutableArray<T>.LastIndexOf(T, Int32, Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.LastIndexOf(T, Int32, Int32, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.Length
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Length
  nameWithType: ImmutableArray<T>.Length
  fullName: ImmutableArray<T>.Length
- uid: System.Collections.Immutable.ImmutableArray`1.OfType``1
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: OfType<TResult>()
  nameWithType: ImmutableArray<T>.OfType<TResult>()
  fullName: ImmutableArray<T>.OfType<TResult>()
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Collections.Generic.IEnumerable{TResult}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: op_Equality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  nameWithType: ImmutableArray<T>.op_Equality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  fullName: ImmutableArray<T>.op_Equality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
- uid: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
- uid: System.Nullable{System.Collections.Immutable.ImmutableArray{T}}
  parent: System
  isExternal: false
  name: Nullable<ImmutableArray<T>>
  nameWithType: Nullable<ImmutableArray<T>>
  fullName: System.Nullable<System.Collections.Immutable.ImmutableArray<T>>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: op_Equality(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.op_Equality(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableArray<T>.op_Equality(ImmutableArray<T>, ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: op_Inequality(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.op_Inequality(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableArray<T>.op_Inequality(ImmutableArray<T>, ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: op_Inequality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  nameWithType: ImmutableArray<T>.op_Inequality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
  fullName: ImmutableArray<T>.op_Inequality(Nullable<ImmutableArray<T>>, Nullable<ImmutableArray<T>>)
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Remove(T)
  nameWithType: ImmutableArray<T>.Remove(T)
  fullName: ImmutableArray<T>.Remove(T)
- uid: System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Remove(T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.Remove(T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.Remove(T, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveAll(Predicate<T>)
  nameWithType: ImmutableArray<T>.RemoveAll(Predicate<T>)
  fullName: ImmutableArray<T>.RemoveAll(Predicate<T>)
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.RemoveAt(Int32)
  fullName: ImmutableArray<T>.RemoveAt(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.RemoveRange(ImmutableArray<T>, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveRange(Int32, Int32)
  nameWithType: ImmutableArray<T>.RemoveRange(Int32, Int32)
  fullName: ImmutableArray<T>.RemoveRange(Int32, Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveRange(IEnumerable<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(IEnumerable<T>)
  fullName: ImmutableArray<T>.RemoveRange(IEnumerable<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveRange(ImmutableArray<T>)
  nameWithType: ImmutableArray<T>.RemoveRange(ImmutableArray<T>)
  fullName: ImmutableArray<T>.RemoveRange(ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Replace(T, T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.Replace(T, T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.Replace(T, T, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Replace(T, T)
  nameWithType: ImmutableArray<T>.Replace(T, T)
  fullName: ImmutableArray<T>.Replace(T, T)
- uid: System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: SetItem(Int32, T)
  nameWithType: ImmutableArray<T>.SetItem(Int32, T)
  fullName: ImmutableArray<T>.SetItem(Int32, T)
- uid: System.Collections.Immutable.ImmutableArray`1.Sort
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Sort()
  nameWithType: ImmutableArray<T>.Sort()
  fullName: ImmutableArray<T>.Sort()
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Sort(IComparer<T>)
  nameWithType: ImmutableArray<T>.Sort(IComparer<T>)
  fullName: ImmutableArray<T>.Sort(IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Sort(Comparison<T>)
  nameWithType: ImmutableArray<T>.Sort(Comparison<T>)
  fullName: ImmutableArray<T>.Sort(Comparison<T>)
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
- uid: System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: ImmutableArray<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: ImmutableArray<T>.Sort(Int32, Int32, IComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.ToBuilder
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ToBuilder()
  nameWithType: ImmutableArray<T>.ToBuilder()
  fullName: ImmutableArray<T>.ToBuilder()
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: ImmutableArray<T>.ICollection<T>.Add(T)
  fullName: ImmutableArray<T>.ICollection<T>.Add(T)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection<T>.Clear()
  nameWithType: ImmutableArray<T>.ICollection<T>.Clear()
  fullName: ImmutableArray<T>.ICollection<T>.Clear()
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection<T>.Count
  nameWithType: ImmutableArray<T>.ICollection<T>.Count
  fullName: ImmutableArray<T>.ICollection<T>.Count
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: ImmutableArray<T>.ICollection<T>.IsReadOnly
  fullName: ImmutableArray<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection<T>.Remove(T)
  nameWithType: ImmutableArray<T>.ICollection<T>.Remove(T)
  fullName: ImmutableArray<T>.ICollection<T>.Remove(T)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: ImmutableArray<T>.IEnumerable<T>.GetEnumerator()
  fullName: ImmutableArray<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList<T>.Insert(Int32, T)
  nameWithType: ImmutableArray<T>.IList<T>.Insert(Int32, T)
  fullName: ImmutableArray<T>.IList<T>.Insert(Int32, T)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList<T>.Item(Int32)
  nameWithType: ImmutableArray<T>.IList<T>.Item(Int32)
  fullName: ImmutableArray<T>.IList<T>.Item(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList<T>.RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.IList<T>.RemoveAt(Int32)
  fullName: ImmutableArray<T>.IList<T>.RemoveAt(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IReadOnlyCollection<T>.Count
  nameWithType: ImmutableArray<T>.IReadOnlyCollection<T>.Count
  fullName: ImmutableArray<T>.IReadOnlyCollection<T>.Count
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IReadOnlyList<T>.Item(Int32)
  nameWithType: ImmutableArray<T>.IReadOnlyList<T>.Item(Int32)
  fullName: ImmutableArray<T>.IReadOnlyList<T>.Item(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ImmutableArray<T>.ICollection.CopyTo(Array, Int32)
  fullName: ImmutableArray<T>.ICollection.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection.Count
  nameWithType: ImmutableArray<T>.ICollection.Count
  fullName: ImmutableArray<T>.ICollection.Count
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: ImmutableArray<T>.ICollection.IsSynchronized
  fullName: ImmutableArray<T>.ICollection.IsSynchronized
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: ImmutableArray<T>.ICollection.SyncRoot
  fullName: ImmutableArray<T>.ICollection.SyncRoot
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: ImmutableArray<T>.IEnumerable.GetEnumerator()
  fullName: ImmutableArray<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.Add(Object)
  nameWithType: ImmutableArray<T>.IList.Add(Object)
  fullName: ImmutableArray<T>.IList.Add(Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.Clear()
  nameWithType: ImmutableArray<T>.IList.Clear()
  fullName: ImmutableArray<T>.IList.Clear()
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: ImmutableArray<T>.IList.Contains(Object)
  fullName: ImmutableArray<T>.IList.Contains(Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: ImmutableArray<T>.IList.IndexOf(Object)
  fullName: ImmutableArray<T>.IList.IndexOf(Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.Insert(Int32, Object)
  nameWithType: ImmutableArray<T>.IList.Insert(Int32, Object)
  fullName: ImmutableArray<T>.IList.Insert(Int32, Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: ImmutableArray<T>.IList.IsFixedSize
  fullName: ImmutableArray<T>.IList.IsFixedSize
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.IsReadOnly
  nameWithType: ImmutableArray<T>.IList.IsReadOnly
  fullName: ImmutableArray<T>.IList.IsReadOnly
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: ImmutableArray<T>.IList.Item(Int32)
  fullName: ImmutableArray<T>.IList.Item(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: ImmutableArray<T>.IList.Remove(Object)
  fullName: ImmutableArray<T>.IList.Remove(Object)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IList.RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.IList.RemoveAt(Int32)
  fullName: ImmutableArray<T>.IList.RemoveAt(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.Add(T)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Add(T)
  fullName: ImmutableArray<T>.IImmutableList<T>.Add(T)
- uid: System.Collections.Immutable.IImmutableList`1
  parent: System.Collections.Immutable
  isExternal: false
  name: IImmutableList<T>
  nameWithType: IImmutableList<T>
  fullName: System.Collections.Immutable.IImmutableList<T>
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.AddRange(IEnumerable<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.AddRange(IEnumerable<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.AddRange(IEnumerable<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.Clear()
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Clear()
  fullName: ImmutableArray<T>.IImmutableList<T>.Clear()
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.Insert(Int32, T)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Insert(Int32, T)
  fullName: ImmutableArray<T>.IImmutableList<T>.Insert(Int32, T)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.InsertRange(Int32, IEnumerable<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.InsertRange(Int32, IEnumerable<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.Remove(T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Remove(T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.Remove(T, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.RemoveAll(Predicate<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveAll(Predicate<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveAll(Predicate<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.RemoveAt(Int32)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveAt(Int32)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveAt(Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveRange(IEnumerable<T>, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.RemoveRange(Int32, Int32)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.RemoveRange(Int32, Int32)
  fullName: ImmutableArray<T>.IImmutableList<T>.RemoveRange(Int32, Int32)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
  fullName: ImmutableArray<T>.IImmutableList<T>.Replace(T, T, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IImmutableList<T>.SetItem(Int32, T)
  nameWithType: ImmutableArray<T>.IImmutableList<T>.SetItem(Int32, T)
  fullName: ImmutableArray<T>.IImmutableList<T>.SetItem(Int32, T)
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType: ImmutableArray<T>.IStructuralComparable.CompareTo(Object, IComparer)
  fullName: ImmutableArray<T>.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType: ImmutableArray<T>.IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: ImmutableArray<T>.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: ImmutableArray<T>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: ImmutableArray<T>.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Collections.Immutable.ImmutableArray`1.Add*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Add
  nameWithType: ImmutableArray<T>.Add
  fullName: ImmutableArray<T>.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.AddRange*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: AddRange
  nameWithType: ImmutableArray<T>.AddRange
  fullName: ImmutableArray<T>.AddRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.As``1*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: As<TOther>
  nameWithType: ImmutableArray<T>.As<TOther>
  fullName: ImmutableArray<T>.As<TOther>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CastArray``1*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CastArray<TOther>
  nameWithType: ImmutableArray<T>.CastArray<TOther>
  fullName: ImmutableArray<T>.CastArray<TOther>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CastUp``1*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CastUp<TDerived>
  nameWithType: ImmutableArray<T>.CastUp<TDerived>
  fullName: ImmutableArray<T>.CastUp<TDerived>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Clear*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Clear
  nameWithType: ImmutableArray<T>.Clear
  fullName: ImmutableArray<T>.Clear
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Contains*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Contains
  nameWithType: ImmutableArray<T>.Contains
  fullName: ImmutableArray<T>.Contains
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.CopyTo*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: CopyTo
  nameWithType: ImmutableArray<T>.CopyTo
  fullName: ImmutableArray<T>.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Equals*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Equals
  nameWithType: ImmutableArray<T>.Equals
  fullName: ImmutableArray<T>.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.GetEnumerator*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: GetEnumerator
  nameWithType: ImmutableArray<T>.GetEnumerator
  fullName: ImmutableArray<T>.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.GetHashCode*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: GetHashCode
  nameWithType: ImmutableArray<T>.GetHashCode
  fullName: ImmutableArray<T>.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IndexOf*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IndexOf
  nameWithType: ImmutableArray<T>.IndexOf
  fullName: ImmutableArray<T>.IndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Insert*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Insert
  nameWithType: ImmutableArray<T>.Insert
  fullName: ImmutableArray<T>.Insert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.InsertRange*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: InsertRange
  nameWithType: ImmutableArray<T>.InsertRange
  fullName: ImmutableArray<T>.InsertRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefault*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IsDefault
  nameWithType: ImmutableArray<T>.IsDefault
  fullName: ImmutableArray<T>.IsDefault
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IsDefaultOrEmpty
  nameWithType: ImmutableArray<T>.IsDefaultOrEmpty
  fullName: ImmutableArray<T>.IsDefaultOrEmpty
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.IsEmpty*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: IsEmpty
  nameWithType: ImmutableArray<T>.IsEmpty
  fullName: ImmutableArray<T>.IsEmpty
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Item*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Item
  nameWithType: ImmutableArray<T>.Item
  fullName: ImmutableArray<T>.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.LastIndexOf*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: LastIndexOf
  nameWithType: ImmutableArray<T>.LastIndexOf
  fullName: ImmutableArray<T>.LastIndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Length*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Length
  nameWithType: ImmutableArray<T>.Length
  fullName: ImmutableArray<T>.Length
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.OfType``1*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: OfType<TResult>
  nameWithType: ImmutableArray<T>.OfType<TResult>
  fullName: ImmutableArray<T>.OfType<TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.op_Equality*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: op_Equality
  nameWithType: ImmutableArray<T>.op_Equality
  fullName: ImmutableArray<T>.op_Equality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.op_Inequality*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: op_Inequality
  nameWithType: ImmutableArray<T>.op_Inequality
  fullName: ImmutableArray<T>.op_Inequality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Remove*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Remove
  nameWithType: ImmutableArray<T>.Remove
  fullName: ImmutableArray<T>.Remove
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAll*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveAll
  nameWithType: ImmutableArray<T>.RemoveAll
  fullName: ImmutableArray<T>.RemoveAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveAt*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveAt
  nameWithType: ImmutableArray<T>.RemoveAt
  fullName: ImmutableArray<T>.RemoveAt
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.RemoveRange*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: RemoveRange
  nameWithType: ImmutableArray<T>.RemoveRange
  fullName: ImmutableArray<T>.RemoveRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Replace*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Replace
  nameWithType: ImmutableArray<T>.Replace
  fullName: ImmutableArray<T>.Replace
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.SetItem*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: SetItem
  nameWithType: ImmutableArray<T>.SetItem
  fullName: ImmutableArray<T>.SetItem
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.Sort*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: Sort
  nameWithType: ImmutableArray<T>.Sort
  fullName: ImmutableArray<T>.Sort
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.ToBuilder*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: ToBuilder
  nameWithType: ImmutableArray<T>.ToBuilder
  fullName: ImmutableArray<T>.ToBuilder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Add
  fullName: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Clear
  nameWithType: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Clear
  fullName: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Clear
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Count
  nameWithType: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Count
  fullName: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Remove
  nameWithType: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Remove
  fullName: ImmutableArray<T>.System.Collections.Generic.ICollection<T>.Remove
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: ImmutableArray<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName: ImmutableArray<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Insert
  nameWithType: ImmutableArray<T>.System.Collections.Generic.IList<T>.Insert
  fullName: ImmutableArray<T>.System.Collections.Generic.IList<T>.Insert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Item
  nameWithType: ImmutableArray<T>.System.Collections.Generic.IList<T>.Item
  fullName: ImmutableArray<T>.System.Collections.Generic.IList<T>.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.RemoveAt
  nameWithType: ImmutableArray<T>.System.Collections.Generic.IList<T>.RemoveAt
  fullName: ImmutableArray<T>.System.Collections.Generic.IList<T>.RemoveAt
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType: ImmutableArray<T>.System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullName: ImmutableArray<T>.System.Collections.Generic.IReadOnlyCollection<T>.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Generic.IReadOnlyList<T>.Item
  nameWithType: ImmutableArray<T>.System.Collections.Generic.IReadOnlyList<T>.Item
  fullName: ImmutableArray<T>.System.Collections.Generic.IReadOnlyList<T>.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ImmutableArray<T>.System.Collections.ICollection.CopyTo
  fullName: ImmutableArray<T>.System.Collections.ICollection.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: ImmutableArray<T>.System.Collections.ICollection.Count
  fullName: ImmutableArray<T>.System.Collections.ICollection.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ImmutableArray<T>.System.Collections.ICollection.IsSynchronized
  fullName: ImmutableArray<T>.System.Collections.ICollection.IsSynchronized
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ImmutableArray<T>.System.Collections.ICollection.SyncRoot
  fullName: ImmutableArray<T>.System.Collections.ICollection.SyncRoot
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ImmutableArray<T>.System.Collections.IEnumerable.GetEnumerator
  fullName: ImmutableArray<T>.System.Collections.IEnumerable.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: ImmutableArray<T>.System.Collections.IList.Add
  fullName: ImmutableArray<T>.System.Collections.IList.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: ImmutableArray<T>.System.Collections.IList.Clear
  fullName: ImmutableArray<T>.System.Collections.IList.Clear
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: ImmutableArray<T>.System.Collections.IList.Contains
  fullName: ImmutableArray<T>.System.Collections.IList.Contains
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: ImmutableArray<T>.System.Collections.IList.IndexOf
  fullName: ImmutableArray<T>.System.Collections.IList.IndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: ImmutableArray<T>.System.Collections.IList.Insert
  fullName: ImmutableArray<T>.System.Collections.IList.Insert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: ImmutableArray<T>.System.Collections.IList.IsFixedSize
  fullName: ImmutableArray<T>.System.Collections.IList.IsFixedSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: ImmutableArray<T>.System.Collections.IList.IsReadOnly
  fullName: ImmutableArray<T>.System.Collections.IList.IsReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: ImmutableArray<T>.System.Collections.IList.Item
  fullName: ImmutableArray<T>.System.Collections.IList.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: ImmutableArray<T>.System.Collections.IList.Remove
  fullName: ImmutableArray<T>.System.Collections.IList.Remove
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: ImmutableArray<T>.System.Collections.IList.RemoveAt
  fullName: ImmutableArray<T>.System.Collections.IList.RemoveAt
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.Add
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Add
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.AddRange
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.AddRange
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.AddRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.Clear
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Clear
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Clear
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.Insert
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Insert
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Insert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.InsertRange
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.InsertRange
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.InsertRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.Remove
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Remove
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Remove
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.RemoveAll
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAll
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.RemoveAt
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAt
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveAt
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.RemoveRange
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveRange
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.RemoveRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.Replace
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Replace
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.Replace
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.Immutable.IImmutableList<T>.SetItem
  nameWithType: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.SetItem
  fullName: ImmutableArray<T>.System.Collections.Immutable.IImmutableList<T>.SetItem
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IStructuralComparable.CompareTo
  nameWithType: ImmutableArray<T>.System.Collections.IStructuralComparable.CompareTo
  fullName: ImmutableArray<T>.System.Collections.IStructuralComparable.CompareTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IStructuralEquatable.Equals
  nameWithType: ImmutableArray<T>.System.Collections.IStructuralEquatable.Equals
  fullName: ImmutableArray<T>.System.Collections.IStructuralEquatable.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode*
  parent: System.Collections.Immutable.ImmutableArray`1
  isExternal: false
  name: System.Collections.IStructuralEquatable.GetHashCode
  nameWithType: ImmutableArray<T>.System.Collections.IStructuralEquatable.GetHashCode
  fullName: ImmutableArray<T>.System.Collections.IStructuralEquatable.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray`1.xml
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T)
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: ToImmutableArray<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableHashSet
  isExternal: false
  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)
  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableHashSet
  isExternal: false
  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T, Int32)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T, Int32)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
- uid: System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Remove<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.Remove<T>(IImmutableList<T>, T)
  fullName: ImmutableList.Remove<T>(IImmutableList<T>, T)
- uid: System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  nameWithType: ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  fullName: ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
- uid: System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Replace<T>(IImmutableList<T>, T, T)
  nameWithType: ImmutableList.Replace<T>(IImmutableList<T>, T, T)
  fullName: ImmutableList.Replace<T>(IImmutableList<T>, T, T)
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: ToImmutableList<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)
  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)
  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)
- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)
  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)
  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)
- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)
  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)
  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)
- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Any<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Append<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: AsEnumerable<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Decimal>)
  nameWithType: Enumerable.Average(IEnumerable<Decimal>)
  fullName: Enumerable.Average(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Double>)
  nameWithType: Enumerable.Average(IEnumerable<Double>)
  fullName: Enumerable.Average(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Int32>)
  nameWithType: Enumerable.Average(IEnumerable<Int32>)
  fullName: Enumerable.Average(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Int64>)
  nameWithType: Enumerable.Average(IEnumerable<Int64>)
  fullName: Enumerable.Average(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Single>)
  nameWithType: Enumerable.Average(IEnumerable<Single>)
  fullName: Enumerable.Average(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: Enumerable.Cast<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Contains<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Count<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Distinct<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: First<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: FirstOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)
  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)
  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)
  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)
  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)
  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Last<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LastOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LongCount<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Decimal>)
  nameWithType: Enumerable.Max(IEnumerable<Decimal>)
  fullName: Enumerable.Max(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Double>)
  nameWithType: Enumerable.Max(IEnumerable<Double>)
  fullName: Enumerable.Max(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Int32>)
  nameWithType: Enumerable.Max(IEnumerable<Int32>)
  fullName: Enumerable.Max(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Int64>)
  nameWithType: Enumerable.Max(IEnumerable<Int64>)
  fullName: Enumerable.Max(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Single>)
  nameWithType: Enumerable.Max(IEnumerable<Single>)
  fullName: Enumerable.Max(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Decimal>)
  nameWithType: Enumerable.Min(IEnumerable<Decimal>)
  fullName: Enumerable.Min(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Double>)
  nameWithType: Enumerable.Min(IEnumerable<Double>)
  fullName: Enumerable.Min(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Int32>)
  nameWithType: Enumerable.Min(IEnumerable<Int32>)
  fullName: Enumerable.Min(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Int64>)
  nameWithType: Enumerable.Min(IEnumerable<Int64>)
  fullName: Enumerable.Min(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Single>)
  nameWithType: Enumerable.Min(IEnumerable<Single>)
  fullName: Enumerable.Min(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: Enumerable.OfType<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Prepend<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Reverse<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)
  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)
  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)
  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)
  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)
  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)
  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Single<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SingleOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Skip<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Decimal>)
  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)
  fullName: Enumerable.Sum(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Double>)
  nameWithType: Enumerable.Sum(IEnumerable<Double>)
  fullName: Enumerable.Sum(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Int32>)
  nameWithType: Enumerable.Sum(IEnumerable<Int32>)
  fullName: Enumerable.Sum(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Int64>)
  nameWithType: Enumerable.Sum(IEnumerable<Int64>)
  fullName: Enumerable.Sum(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Single>)
  nameWithType: Enumerable.Sum(IEnumerable<Single>)
  fullName: Enumerable.Sum(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Take<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToArray<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToHashSet<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToList<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)
  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)
  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Aggregate<T>(ImmutableArray<T>, Func<T,T,T>)
  nameWithType: ImmutableArrayExtensions.Aggregate<T>(ImmutableArray<T>, Func<T,T,T>)
  fullName: ImmutableArrayExtensions.Aggregate<T>(ImmutableArray<T>, Func<T,T,T>)
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Aggregate<TAccumulate,T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate,T,TAccumulate>)
  nameWithType: ImmutableArrayExtensions.Aggregate<TAccumulate,T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate,T,TAccumulate>)
  fullName: ImmutableArrayExtensions.Aggregate<TAccumulate,T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate,T,TAccumulate>)
- uid: System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Aggregate<TAccumulate,TResult,T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate,T,TAccumulate>, Func<TAccumulate,TResult>)
  nameWithType: ImmutableArrayExtensions.Aggregate<TAccumulate,TResult,T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate,T,TAccumulate>, Func<TAccumulate,TResult>)
  fullName: ImmutableArrayExtensions.Aggregate<TAccumulate,TResult,T>(ImmutableArray<T>, TAccumulate, Func<TAccumulate,T,TAccumulate>, Func<TAccumulate,TResult>)
- uid: System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: All<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.All<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.All<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Any<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.Any<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.Any<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Any<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.Any<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.Any<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: ElementAt<T>(ImmutableArray<T>, Int32)
  nameWithType: ImmutableArrayExtensions.ElementAt<T>(ImmutableArray<T>, Int32)
  fullName: ImmutableArrayExtensions.ElementAt<T>(ImmutableArray<T>, Int32)
- uid: System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: ElementAtOrDefault<T>(ImmutableArray<T>, Int32)
  nameWithType: ImmutableArrayExtensions.ElementAtOrDefault<T>(ImmutableArray<T>, Int32)
  fullName: ImmutableArrayExtensions.ElementAtOrDefault<T>(ImmutableArray<T>, Int32)
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: First<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.First<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.First<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: First<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.First<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.First<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: FirstOrDefault<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: FirstOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.FirstOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Last<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.Last<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.Last<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Last<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.Last<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.Last<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: LastOrDefault<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: LastOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.LastOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Select<T,TResult>(ImmutableArray<T>, Func<T,TResult>)
  nameWithType: ImmutableArrayExtensions.Select<T,TResult>(ImmutableArray<T>, Func<T,TResult>)
  fullName: ImmutableArrayExtensions.Select<T,TResult>(ImmutableArray<T>, Func<T,TResult>)
- uid: System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>(ImmutableArray<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  nameWithType: ImmutableArrayExtensions.SelectMany<TSource,TCollection,TResult>(ImmutableArray<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  fullName: ImmutableArrayExtensions.SelectMany<TSource,TCollection,TResult>(ImmutableArray<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>)
  nameWithType: ImmutableArrayExtensions.SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>)
  fullName: ImmutableArrayExtensions.SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, IEnumerable<TDerived>, IEqualityComparer<TBase>)
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>)
  nameWithType: ImmutableArrayExtensions.SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>)
  fullName: ImmutableArrayExtensions.SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, IEqualityComparer<TBase>)
- uid: System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase,TBase,Boolean>)
  nameWithType: ImmutableArrayExtensions.SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase,TBase,Boolean>)
  fullName: ImmutableArrayExtensions.SequenceEqual<TDerived,TBase>(ImmutableArray<TBase>, ImmutableArray<TDerived>, Func<TBase,TBase,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Single<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.Single<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.Single<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Single<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.Single<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.Single<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: SingleOrDefault<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: SingleOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.SingleOrDefault<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: ToArray<T>(ImmutableArray<T>)
  nameWithType: ImmutableArrayExtensions.ToArray<T>(ImmutableArray<T>)
  fullName: ImmutableArrayExtensions.ToArray<T>(ImmutableArray<T>)
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: ToDictionary<TKey,T>(ImmutableArray<T>, Func<T,TKey>)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey,T>(ImmutableArray<T>, Func<T,TKey>)
  fullName: ImmutableArrayExtensions.ToDictionary<TKey,T>(ImmutableArray<T>, Func<T,TKey>)
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: ToDictionary<TKey,T>(ImmutableArray<T>, Func<T,TKey>, IEqualityComparer<TKey>)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey,T>(ImmutableArray<T>, Func<T,TKey>, IEqualityComparer<TKey>)
  fullName: ImmutableArrayExtensions.ToDictionary<TKey,T>(ImmutableArray<T>, Func<T,TKey>, IEqualityComparer<TKey>)
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: ToDictionary<TKey,TElement,T>(ImmutableArray<T>, Func<T,TKey>, Func<T,TElement>)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey,TElement,T>(ImmutableArray<T>, Func<T,TKey>, Func<T,TElement>)
  fullName: ImmutableArrayExtensions.ToDictionary<TKey,TElement,T>(ImmutableArray<T>, Func<T,TKey>, Func<T,TElement>)
- uid: System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: ToDictionary<TKey,TElement,T>(ImmutableArray<T>, Func<T,TKey>, Func<T,TElement>, IEqualityComparer<TKey>)
  nameWithType: ImmutableArrayExtensions.ToDictionary<TKey,TElement,T>(ImmutableArray<T>, Func<T,TKey>, Func<T,TElement>, IEqualityComparer<TKey>)
  fullName: ImmutableArrayExtensions.ToDictionary<TKey,TElement,T>(ImmutableArray<T>, Func<T,TKey>, Func<T,TElement>, IEqualityComparer<TKey>)
- uid: System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.ImmutableArrayExtensions
  isExternal: false
  name: Where<T>(ImmutableArray<T>, Func<T,Boolean>)
  nameWithType: ImmutableArrayExtensions.Where<T>(ImmutableArray<T>, Func<T,Boolean>)
  fullName: ImmutableArrayExtensions.Where<T>(ImmutableArray<T>, Func<T,Boolean>)
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel<TSource>(IEnumerable<TSource>)
  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)
  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: Queryable.AsQueryable(IEnumerable)
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Ancestors<T>(IEnumerable<T>)
  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)
  fullName: Extensions.Ancestors<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Ancestors<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)
  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: AncestorsAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)
  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: AncestorsAndSelf(IEnumerable<XElement>, XName)
  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)
  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)
- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Attributes(IEnumerable<XElement>)
  nameWithType: Extensions.Attributes(IEnumerable<XElement>)
  fullName: Extensions.Attributes(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Attributes(IEnumerable<XElement>, XName)
  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)
  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)
- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantNodes<T>(IEnumerable<T>)
  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)
  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantNodesAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)
  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Descendants<T>(IEnumerable<T>)
  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)
  fullName: Extensions.Descendants<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Descendants<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)
  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantsAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)
  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantsAndSelf(IEnumerable<XElement>, XName)
  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)
  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)
- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Elements<T>(IEnumerable<T>)
  nameWithType: Extensions.Elements<T>(IEnumerable<T>)
  fullName: Extensions.Elements<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Elements<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)
  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)
- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: InDocumentOrder<T>(IEnumerable<T>)
  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)
  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Nodes<T>(IEnumerable<T>)
  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)
  fullName: Extensions.Nodes<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Remove(IEnumerable<XAttribute>)
  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)
  fullName: Extensions.Remove(IEnumerable<XAttribute>)
- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Remove<T>(IEnumerable<T>)
  nameWithType: Extensions.Remove<T>(IEnumerable<T>)
  fullName: Extensions.Remove<T>(IEnumerable<T>)
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  nameWithType: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  nameWithType: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: System.IEquatable`1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
- uid: System.IEquatable{System.Collections.Immutable.ImmutableArray{T}}
  parent: System
  isExternal: false
  name: IEquatable<ImmutableArray<T>>
  nameWithType: IEquatable<ImmutableArray<T>>
  fullName: System.IEquatable<System.Collections.Immutable.ImmutableArray<T>>
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
