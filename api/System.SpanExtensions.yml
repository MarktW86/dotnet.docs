### YamlMime:ManagedReference
items:
- uid: System.SpanExtensions
  commentId: T:System.SpanExtensions
  id: SpanExtensions
  children:
  - System.SpanExtensions.AsBytes``1(System.ReadOnlySpan{``0})
  - System.SpanExtensions.AsBytes``1(System.Span{``0})
  - System.SpanExtensions.AsSpan(System.String)
  - System.SpanExtensions.AsSpan``1(System.ArraySegment{``0})
  - System.SpanExtensions.AsSpan``1(``0[])
  - System.SpanExtensions.CopyTo``1(``0[],System.Span{``0})
  - System.SpanExtensions.IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.IndexOf(System.Span{System.Byte},System.Byte)
  - System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.Byte)
  - System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)
  - System.SpanExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.SpanExtensions.IndexOf``1(System.Span{``0},``0)
  - System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)
  - System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)
  - System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)
  - System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)
  - System.SpanExtensions.NonPortableCast``2(System.ReadOnlySpan{``0})
  - System.SpanExtensions.NonPortableCast``2(System.Span{``0})
  - System.SpanExtensions.SequenceEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.SpanExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  - System.SpanExtensions.StartsWith(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  - System.SpanExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  - System.SpanExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  langs:
  - csharp
  name: SpanExtensions
  nameWithType: SpanExtensions
  fullName: System.SpanExtensions
  type: Class
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static class SpanExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.AsBytes``1(System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.AsBytes``1(System.ReadOnlySpan{``0})
  id: AsBytes``1(System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: AsBytes<T>(ReadOnlySpan<T>)
  nameWithType: SpanExtensions.AsBytes<T>(ReadOnlySpan<T>)
  fullName: SpanExtensions.AsBytes<T>(ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static ReadOnlySpan<byte> AsBytes<T> (this ReadOnlySpan<T> source) where T : struct;'
    parameters:
    - id: source
      type: System.ReadOnlySpan`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
  overload: System.SpanExtensions.AsBytes``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.AsBytes``1(System.Span{``0})
  commentId: M:System.SpanExtensions.AsBytes``1(System.Span{``0})
  id: AsBytes``1(System.Span{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: AsBytes<T>(Span<T>)
  nameWithType: SpanExtensions.AsBytes<T>(Span<T>)
  fullName: SpanExtensions.AsBytes<T>(Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static Span<byte> AsBytes<T> (this Span<T> source) where T : struct;'
    parameters:
    - id: source
      type: System.Span`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Span{System.Byte}
      description: To be added.
  overload: System.SpanExtensions.AsBytes``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.AsSpan(System.String)
  commentId: M:System.SpanExtensions.AsSpan(System.String)
  id: AsSpan(System.String)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: AsSpan(String)
  nameWithType: SpanExtensions.AsSpan(String)
  fullName: SpanExtensions.AsSpan(String)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static ReadOnlySpan<char> AsSpan (this string text);
    parameters:
    - id: text
      type: System.String
      description: To be added.
    return:
      type: System.ReadOnlySpan{System.Char}
      description: To be added.
  overload: System.SpanExtensions.AsSpan*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.AsSpan``1(System.ArraySegment{``0})
  commentId: M:System.SpanExtensions.AsSpan``1(System.ArraySegment{``0})
  id: AsSpan``1(System.ArraySegment{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: AsSpan<T>(ArraySegment<T>)
  nameWithType: SpanExtensions.AsSpan<T>(ArraySegment<T>)
  fullName: SpanExtensions.AsSpan<T>(ArraySegment<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T> (this ArraySegment<T> arraySegment);
    parameters:
    - id: arraySegment
      type: System.ArraySegment`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Span`1
      description: To be added.
  overload: System.SpanExtensions.AsSpan``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.AsSpan``1(``0[])
  commentId: M:System.SpanExtensions.AsSpan``1(``0[])
  id: AsSpan``1(``0[])
  parent: System.SpanExtensions
  langs:
  - csharp
  name: AsSpan<T>(T[])
  nameWithType: SpanExtensions.AsSpan<T>(T[])
  fullName: SpanExtensions.AsSpan<T>(T[])
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static Span<T> AsSpan<T> (this T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Span`1
      description: To be added.
  overload: System.SpanExtensions.AsSpan``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.CopyTo``1(``0[],System.Span{``0})
  commentId: M:System.SpanExtensions.CopyTo``1(``0[],System.Span{``0})
  id: CopyTo``1(``0[],System.Span{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: CopyTo<T>(T[], Span<T>)
  nameWithType: SpanExtensions.CopyTo<T>(T[], Span<T>)
  fullName: SpanExtensions.CopyTo<T>(T[], Span<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static void CopyTo<T> (this T[] array, Span<T> destination);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: destination
      type: System.Span`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
  overload: System.SpanExtensions.CopyTo``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  id: IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOf (this Span<byte> span, ReadOnlySpan<byte> value);
    parameters:
    - id: span
      type: System.Span{System.Byte}
      description: To be added.
    - id: value
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf(System.Span{System.Byte},System.Byte)
  commentId: M:System.SpanExtensions.IndexOf(System.Span{System.Byte},System.Byte)
  id: IndexOf(System.Span{System.Byte},System.Byte)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf(Span<Byte>, Byte)
  nameWithType: SpanExtensions.IndexOf(Span<Byte>, Byte)
  fullName: SpanExtensions.IndexOf(Span<Byte>, Byte)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOf (this Span<byte> span, byte value);
    parameters:
    - id: span
      type: System.Span{System.Byte}
      description: To be added.
    - id: value
      type: System.Byte
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.Byte)
  commentId: M:System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.Byte)
  id: IndexOf(System.ReadOnlySpan{System.Byte},System.Byte)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf(ReadOnlySpan<Byte>, Byte)
  nameWithType: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, Byte)
  fullName: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, Byte)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOf (this ReadOnlySpan<byte> span, byte value);
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    - id: value
      type: System.Byte
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: IndexOf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOf (this ReadOnlySpan<byte> span, ReadOnlySpan<byte> value);
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    - id: value
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T> (this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : struct;'
    parameters:
    - id: span
      type: System.ReadOnlySpan`1
      description: To be added.
    - id: value
      type: System.ReadOnlySpan`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)
  commentId: M:System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)
  id: IndexOf``1(System.ReadOnlySpan{``0},``0)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf<T>(ReadOnlySpan<T>, T)
  nameWithType: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, T)
  fullName: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T> (this ReadOnlySpan<T> span, T value) where T : struct;'
    parameters:
    - id: span
      type: System.ReadOnlySpan`1
      description: To be added.
    - id: value
      type: T
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T> (this Span<T> span, ReadOnlySpan<T> value) where T : struct;'
    parameters:
    - id: span
      type: System.Span`1
      description: To be added.
    - id: value
      type: System.ReadOnlySpan`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf``1(System.Span{``0},``0)
  commentId: M:System.SpanExtensions.IndexOf``1(System.Span{``0},``0)
  id: IndexOf``1(System.Span{``0},``0)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOf<T>(Span<T>, T)
  nameWithType: SpanExtensions.IndexOf<T>(Span<T>, T)
  fullName: SpanExtensions.IndexOf<T>(Span<T>, T)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static int IndexOf<T> (this Span<T> span, T value) where T : struct;'
    parameters:
    - id: span
      type: System.Span`1
      description: To be added.
    - id: value
      type: T
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOf``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)
  commentId: M:System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)
  id: IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte, Byte)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOfAny (this ReadOnlySpan<byte> span, byte value0, byte value1, byte value2);
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    - id: value0
      type: System.Byte
      description: To be added.
    - id: value1
      type: System.Byte
      description: To be added.
    - id: value2
      type: System.Byte
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOfAny*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)
  commentId: M:System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)
  id: IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOfAny(Span<Byte>, Byte, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte, Byte)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOfAny (this Span<byte> span, byte value0, byte value1, byte value2);
    parameters:
    - id: span
      type: System.Span{System.Byte}
      description: To be added.
    - id: value0
      type: System.Byte
      description: To be added.
    - id: value1
      type: System.Byte
      description: To be added.
    - id: value2
      type: System.Byte
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOfAny*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)
  commentId: M:System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)
  id: IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOfAny(Span<Byte>, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOfAny (this Span<byte> span, byte value0, byte value1);
    parameters:
    - id: span
      type: System.Span{System.Byte}
      description: To be added.
    - id: value0
      type: System.Byte
      description: To be added.
    - id: value1
      type: System.Byte
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOfAny*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: IndexOfAny(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOfAny(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOfAny (this ReadOnlySpan<byte> span, ReadOnlySpan<byte> values);
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    - id: values
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOfAny*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  id: IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOfAny (this Span<byte> span, ReadOnlySpan<byte> values);
    parameters:
    - id: span
      type: System.Span{System.Byte}
      description: To be added.
    - id: values
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOfAny*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)
  commentId: M:System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)
  id: IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)
  parent: System.SpanExtensions
  langs:
  - csharp
  name: IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static int IndexOfAny (this ReadOnlySpan<byte> span, byte value0, byte value1);
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    - id: value0
      type: System.Byte
      description: To be added.
    - id: value1
      type: System.Byte
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.SpanExtensions.IndexOfAny*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.NonPortableCast``2(System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.NonPortableCast``2(System.ReadOnlySpan{``0})
  id: NonPortableCast``2(System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: NonPortableCast<TFrom,TTo>(ReadOnlySpan<TFrom>)
  nameWithType: SpanExtensions.NonPortableCast<TFrom,TTo>(ReadOnlySpan<TFrom>)
  fullName: SpanExtensions.NonPortableCast<TFrom,TTo>(ReadOnlySpan<TFrom>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static ReadOnlySpan<TTo> NonPortableCast<TFrom,TTo> (this ReadOnlySpan<TFrom> source) where TFrom : struct where TTo : struct;'
    parameters:
    - id: source
      type: System.ReadOnlySpan{TFrom}
      description: To be added.
    typeParameters:
    - id: TFrom
      description: To be added.
    - id: TTo
      description: To be added.
    return:
      type: System.ReadOnlySpan{TTo}
      description: To be added.
  overload: System.SpanExtensions.NonPortableCast``2*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.NonPortableCast``2(System.Span{``0})
  commentId: M:System.SpanExtensions.NonPortableCast``2(System.Span{``0})
  id: NonPortableCast``2(System.Span{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: NonPortableCast<TFrom,TTo>(Span<TFrom>)
  nameWithType: SpanExtensions.NonPortableCast<TFrom,TTo>(Span<TFrom>)
  fullName: SpanExtensions.NonPortableCast<TFrom,TTo>(Span<TFrom>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static Span<TTo> NonPortableCast<TFrom,TTo> (this Span<TFrom> source) where TFrom : struct where TTo : struct;'
    parameters:
    - id: source
      type: System.Span{TFrom}
      description: To be added.
    typeParameters:
    - id: TFrom
      description: To be added.
    - id: TTo
      description: To be added.
    return:
      type: System.Span{TTo}
      description: To be added.
  overload: System.SpanExtensions.NonPortableCast``2*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.SequenceEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.SequenceEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: SequenceEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: SequenceEqual(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.SequenceEqual(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.SequenceEqual(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool SequenceEqual (this ReadOnlySpan<byte> first, ReadOnlySpan<byte> second);
    parameters:
    - id: first
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    - id: second
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.SequenceEqual*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  id: SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool SequenceEqual (this Span<byte> first, ReadOnlySpan<byte> second);
    parameters:
    - id: first
      type: System.Span{System.Byte}
      description: To be added.
    - id: second
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.SequenceEqual*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool SequenceEqual<T> (this ReadOnlySpan<T> first, ReadOnlySpan<T> second) where T : struct;'
    parameters:
    - id: first
      type: System.ReadOnlySpan`1
      description: To be added.
    - id: second
      type: System.ReadOnlySpan`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.SequenceEqual``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool SequenceEqual<T> (this Span<T> first, ReadOnlySpan<T> second) where T : struct;'
    parameters:
    - id: first
      type: System.Span`1
      description: To be added.
    - id: second
      type: System.ReadOnlySpan`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.SequenceEqual``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.StartsWith(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.StartsWith(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  id: StartsWith(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: StartsWith(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.StartsWith(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.StartsWith(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool StartsWith (this ReadOnlySpan<byte> span, ReadOnlySpan<byte> value);
    parameters:
    - id: span
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    - id: value
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.StartsWith*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  commentId: M:System.SpanExtensions.StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  id: StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: public static bool StartsWith (this Span<byte> span, ReadOnlySpan<byte> value);
    parameters:
    - id: span
      type: System.Span{System.Byte}
      description: To be added.
    - id: value
      type: System.ReadOnlySpan{System.Byte}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.StartsWith*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  id: StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool StartsWith<T> (this ReadOnlySpan<T> span, ReadOnlySpan<T> value) where T : struct;'
    parameters:
    - id: span
      type: System.ReadOnlySpan`1
      description: To be added.
    - id: value
      type: System.ReadOnlySpan`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.StartsWith``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  commentId: M:System.SpanExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  id: StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  langs:
  - csharp
  name: StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  type: Method
  assemblies:
  - System.Memory
  namespace: System
  syntax:
    content: 'public static bool StartsWith<T> (this Span<T> span, ReadOnlySpan<T> value) where T : struct;'
    parameters:
    - id: span
      type: System.Span`1
      description: To be added.
    - id: value
      type: System.ReadOnlySpan`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.SpanExtensions.StartsWith``1*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.SpanExtensions.AsBytes``1(System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: AsBytes<T>(ReadOnlySpan<T>)
  nameWithType: SpanExtensions.AsBytes<T>(ReadOnlySpan<T>)
  fullName: SpanExtensions.AsBytes<T>(ReadOnlySpan<T>)
- uid: System.ReadOnlySpan`1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.ReadOnlySpan{System.Byte}
  parent: System
  isExternal: false
  name: ReadOnlySpan<Byte>
  nameWithType: ReadOnlySpan<Byte>
  fullName: System.ReadOnlySpan<System.Byte>
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.SpanExtensions.AsBytes``1(System.Span{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: AsBytes<T>(Span<T>)
  nameWithType: SpanExtensions.AsBytes<T>(Span<T>)
  fullName: SpanExtensions.AsBytes<T>(Span<T>)
- uid: System.Span`1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
- uid: System.Span{System.Byte}
  parent: System
  isExternal: false
  name: Span<Byte>
  nameWithType: Span<Byte>
  fullName: System.Span<System.Byte>
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.SpanExtensions.AsSpan(System.String)
  parent: System.SpanExtensions
  isExternal: false
  name: AsSpan(String)
  nameWithType: SpanExtensions.AsSpan(String)
  fullName: SpanExtensions.AsSpan(String)
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.ReadOnlySpan{System.Char}
  parent: System
  isExternal: false
  name: ReadOnlySpan<Char>
  nameWithType: ReadOnlySpan<Char>
  fullName: System.ReadOnlySpan<System.Char>
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.SpanExtensions.AsSpan``1(System.ArraySegment{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: AsSpan<T>(ArraySegment<T>)
  nameWithType: SpanExtensions.AsSpan<T>(ArraySegment<T>)
  fullName: SpanExtensions.AsSpan<T>(ArraySegment<T>)
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
- uid: System.SpanExtensions.AsSpan``1(``0[])
  parent: System.SpanExtensions
  isExternal: false
  name: AsSpan<T>(T[])
  nameWithType: SpanExtensions.AsSpan<T>(T[])
  fullName: SpanExtensions.AsSpan<T>(T[])
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.SpanExtensions.CopyTo``1(``0[],System.Span{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: CopyTo<T>(T[], Span<T>)
  nameWithType: SpanExtensions.CopyTo<T>(T[], Span<T>)
  fullName: SpanExtensions.CopyTo<T>(T[], Span<T>)
- uid: System.SpanExtensions.IndexOf(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOf(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.SpanExtensions.IndexOf(System.Span{System.Byte},System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf(Span<Byte>, Byte)
  nameWithType: SpanExtensions.IndexOf(Span<Byte>, Byte)
  fullName: SpanExtensions.IndexOf(Span<Byte>, Byte)
- uid: System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf(ReadOnlySpan<Byte>, Byte)
  nameWithType: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, Byte)
  fullName: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, Byte)
- uid: System.SpanExtensions.IndexOf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOf(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf<T>(ReadOnlySpan<T>, T)
  nameWithType: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, T)
  fullName: SpanExtensions.IndexOf<T>(ReadOnlySpan<T>, T)
- uid: System.SpanExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.IndexOf<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.IndexOf<T>(Span<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.IndexOf``1(System.Span{``0},``0)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf<T>(Span<T>, T)
  nameWithType: SpanExtensions.IndexOf<T>(Span<T>, T)
  fullName: SpanExtensions.IndexOf<T>(Span<T>, T)
- uid: System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte,System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte, Byte)
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte,System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(Span<Byte>, Byte, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte, Byte)
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.Byte,System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(Span<Byte>, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, Byte, Byte)
- uid: System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.IndexOfAny(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.IndexOfAny(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.IndexOfAny(System.ReadOnlySpan{System.Byte},System.Byte,System.Byte)
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte)
  nameWithType: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte)
  fullName: SpanExtensions.IndexOfAny(ReadOnlySpan<Byte>, Byte, Byte)
- uid: System.SpanExtensions.NonPortableCast``2(System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: NonPortableCast<TFrom,TTo>(ReadOnlySpan<TFrom>)
  nameWithType: SpanExtensions.NonPortableCast<TFrom,TTo>(ReadOnlySpan<TFrom>)
  fullName: SpanExtensions.NonPortableCast<TFrom,TTo>(ReadOnlySpan<TFrom>)
- uid: TTo
  name: TTo
  nameWithType: TTo
  fullName: TTo
- uid: System.ReadOnlySpan{TTo}
  parent: System
  isExternal: false
  name: ReadOnlySpan<TTo>
  nameWithType: ReadOnlySpan<TTo>
  fullName: System.ReadOnlySpan<TTo>
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
  - name: <
    nameWithType: <
    fullName: <
  - uid: TTo
    name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TFrom
  name: TFrom
  nameWithType: TFrom
  fullName: TFrom
- uid: System.ReadOnlySpan{TFrom}
  parent: System
  isExternal: false
  name: ReadOnlySpan<TFrom>
  nameWithType: ReadOnlySpan<TFrom>
  fullName: System.ReadOnlySpan<TFrom>
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    nameWithType: ReadOnlySpan
    fullName: System.ReadOnlySpan
  - name: <
    nameWithType: <
    fullName: <
  - uid: TFrom
    name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.SpanExtensions.NonPortableCast``2(System.Span{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: NonPortableCast<TFrom,TTo>(Span<TFrom>)
  nameWithType: SpanExtensions.NonPortableCast<TFrom,TTo>(Span<TFrom>)
  fullName: SpanExtensions.NonPortableCast<TFrom,TTo>(Span<TFrom>)
- uid: System.Span{TTo}
  parent: System
  isExternal: false
  name: Span<TTo>
  nameWithType: Span<TTo>
  fullName: System.Span<TTo>
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
  - name: <
    nameWithType: <
    fullName: <
  - uid: TTo
    name: TTo
    nameWithType: TTo
    fullName: TTo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Span{TFrom}
  parent: System
  isExternal: false
  name: Span<TFrom>
  nameWithType: Span<TFrom>
  fullName: System.Span<TFrom>
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
  - name: <
    nameWithType: <
    fullName: <
  - uid: TFrom
    name: TFrom
    nameWithType: TFrom
    fullName: TFrom
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.SpanExtensions.SequenceEqual(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.SequenceEqual(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.SequenceEqual(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.SpanExtensions.SequenceEqual(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.SequenceEqual(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.SequenceEqual<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.SequenceEqual<T>(Span<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.StartsWith(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.StartsWith(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.StartsWith(ReadOnlySpan<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.StartsWith(System.Span{System.Byte},System.ReadOnlySpan{System.Byte})
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
  nameWithType: SpanExtensions.StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
  fullName: SpanExtensions.StartsWith(Span<Byte>, ReadOnlySpan<Byte>)
- uid: System.SpanExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.StartsWith<T>(ReadOnlySpan<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  nameWithType: SpanExtensions.StartsWith<T>(Span<T>, ReadOnlySpan<T>)
  fullName: SpanExtensions.StartsWith<T>(Span<T>, ReadOnlySpan<T>)
- uid: System.SpanExtensions.AsBytes``1*
  parent: System.SpanExtensions
  isExternal: false
  name: AsBytes<T>
  nameWithType: SpanExtensions.AsBytes<T>
  fullName: SpanExtensions.AsBytes<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.AsSpan*
  parent: System.SpanExtensions
  isExternal: false
  name: AsSpan
  nameWithType: SpanExtensions.AsSpan
  fullName: SpanExtensions.AsSpan
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.AsSpan``1*
  parent: System.SpanExtensions
  isExternal: false
  name: AsSpan<T>
  nameWithType: SpanExtensions.AsSpan<T>
  fullName: SpanExtensions.AsSpan<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.CopyTo``1*
  parent: System.SpanExtensions
  isExternal: false
  name: CopyTo<T>
  nameWithType: SpanExtensions.CopyTo<T>
  fullName: SpanExtensions.CopyTo<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf*
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf
  nameWithType: SpanExtensions.IndexOf
  fullName: SpanExtensions.IndexOf
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOf``1*
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOf<T>
  nameWithType: SpanExtensions.IndexOf<T>
  fullName: SpanExtensions.IndexOf<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.IndexOfAny*
  parent: System.SpanExtensions
  isExternal: false
  name: IndexOfAny
  nameWithType: SpanExtensions.IndexOfAny
  fullName: SpanExtensions.IndexOfAny
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.NonPortableCast``2*
  parent: System.SpanExtensions
  isExternal: false
  name: NonPortableCast<TFrom,TTo>
  nameWithType: SpanExtensions.NonPortableCast<TFrom,TTo>
  fullName: SpanExtensions.NonPortableCast<TFrom,TTo>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.SequenceEqual*
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual
  nameWithType: SpanExtensions.SequenceEqual
  fullName: SpanExtensions.SequenceEqual
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.SequenceEqual``1*
  parent: System.SpanExtensions
  isExternal: false
  name: SequenceEqual<T>
  nameWithType: SpanExtensions.SequenceEqual<T>
  fullName: SpanExtensions.SequenceEqual<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.StartsWith*
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith
  nameWithType: SpanExtensions.StartsWith
  fullName: SpanExtensions.StartsWith
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
- uid: System.SpanExtensions.StartsWith``1*
  parent: System.SpanExtensions
  isExternal: false
  name: StartsWith<T>
  nameWithType: SpanExtensions.StartsWith<T>
  fullName: SpanExtensions.StartsWith<T>
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/SpanExtensions.xml
