### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Collections.MapModule
  commentId: T:Microsoft.FSharp.Collections.MapModule
  id: MapModule
  children:
  - Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Empty``2
  - Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)
  - Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])
  - Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  - Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})
  - Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  - Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  langs:
  - csharp
  name: MapModule
  nameWithType: MapModule
  fullName: Microsoft.FSharp.Collections.MapModule
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      [Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)]

      [Microsoft.FSharp.Core.RequireQualifiedAccess]

      public static class MapModule
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.CompilationRepresentationAttribute
  - type: Microsoft.FSharp.Core.RequireQualifiedAccessAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Add<TKey,T>(TKey, T, FSharpMap<TKey,T>)
  nameWithType: MapModule.Add<TKey,T>(TKey, T, FSharpMap<TKey,T>)
  fullName: MapModule.Add<TKey,T>(TKey, T, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("add")]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,T> Add<TKey,T> (TKey key, T value, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: value
      type: T
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Add``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: ContainsKey<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.ContainsKey<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.ContainsKey<TKey,T>(TKey, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("containsKey")]

      public static bool ContainsKey<TKey,T> (TKey key, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.ContainsKey``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Empty``2
  commentId: M:Microsoft.FSharp.Collections.MapModule.Empty``2
  id: Empty``2
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Empty<TKey,T>()
  nameWithType: MapModule.Empty<TKey,T>()
  fullName: MapModule.Empty<TKey,T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("empty")]

      [Microsoft.FSharp.Core.GeneralizableValue]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,T> Empty<TKey,T> ();
    parameters: []
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Empty``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  - type: Microsoft.FSharp.Core.GeneralizableValueAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Exists<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Exists<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.Exists<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists")]

      public static bool Exists<TKey,T> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,bool>> predicate, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Exists``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Filter<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Filter<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.Filter<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("filter")]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,T> Filter<TKey,T> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,bool>> predicate, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Filter``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Find<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.Find<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.Find<TKey,T>(TKey, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("find")]

      public static T Find<TKey,T> (TKey key, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Find``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: FindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.FindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.FindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findKey")]

      public static TKey FindKey<TKey,T> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,bool>> predicate, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: TKey
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.FindKey``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Fold<TKey,T,TState>(FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>, TState, FSharpMap<TKey,T>)
  nameWithType: MapModule.Fold<TKey,T,TState>(FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>, TState, FSharpMap<TKey,T>)
  fullName: MapModule.Fold<TKey,T,TState>(FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>, TState, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold")]

      public static TState Fold<TKey,T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,TState>>> folder, TState state, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Fold``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)
  commentId: M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)
  id: FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: FoldBack<TKey,T,TState>(FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>, FSharpMap<TKey,T>, TState)
  nameWithType: MapModule.FoldBack<TKey,T,TState>(FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>, FSharpMap<TKey,T>, TState)
  fullName: MapModule.FoldBack<TKey,T,TState>(FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>, FSharpMap<TKey,T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack")]

      public static TState FoldBack<TKey,T,TState> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>> folder, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.FoldBack``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: ForAll<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.ForAll<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.ForAll<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall")]

      public static bool ForAll<TKey,T> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,bool>> predicate, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.ForAll``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: IsEmpty<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.IsEmpty<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.IsEmpty<TKey,T>(FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("isEmpty")]

      public static bool IsEmpty<TKey,T> (Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.IsEmpty``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Iterate<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Unit>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Iterate<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Unit>>, FSharpMap<TKey,T>)
  fullName: MapModule.Iterate<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Unit>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter")]

      public static void Iterate<TKey,T> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>> action, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Iterate``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Map<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,TResult>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Map<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,TResult>>, FSharpMap<TKey,T>)
  fullName: MapModule.Map<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,TResult>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map")]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,TResult> Map<TKey,T,TResult> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,TResult>> mapping, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Map``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])
  commentId: M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])
  id: OfArray``2(System.Tuple{``0,``1}[])
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: OfArray<TKey,T>(Tuple<TKey,T>[])
  nameWithType: MapModule.OfArray<TKey,T>(Tuple<TKey,T>[])
  fullName: MapModule.OfArray<TKey,T>(Tuple<TKey,T>[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofArray")]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,T> OfArray<TKey,T> (Tuple<TKey,T>[] elements);
    parameters:
    - id: elements
      type: System.Tuple{TKey,T}[]
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.OfArray``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  commentId: M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  id: OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: OfList<TKey,T>(FSharpList<Tuple<TKey,T>>)
  nameWithType: MapModule.OfList<TKey,T>(FSharpList<Tuple<TKey,T>>)
  fullName: MapModule.OfList<TKey,T>(FSharpList<Tuple<TKey,T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofList")]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,T> OfList<TKey,T> (Microsoft.FSharp.Collections.FSharpList<Tuple<TKey,T>> elements);
    parameters:
    - id: elements
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{TKey,T}}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.OfList``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})
  commentId: M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})
  id: OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: OfSeq<TKey,T>(IEnumerable<Tuple<TKey,T>>)
  nameWithType: MapModule.OfSeq<TKey,T>(IEnumerable<Tuple<TKey,T>>)
  fullName: MapModule.OfSeq<TKey,T>(IEnumerable<Tuple<TKey,T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofSeq")]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,T> OfSeq<TKey,T> (System.Collections.Generic.IEnumerable<Tuple<TKey,T>> elements);
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.Tuple{TKey,T}}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.OfSeq``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Partition<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Partition<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.Partition<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("partition")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpMap<TKey,T>,Microsoft.FSharp.Collections.FSharpMap<TKey,T>> Partition<TKey,T> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,bool>> predicate, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpMap{TKey,T},Microsoft.FSharp.Collections.FSharpMap{TKey,T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Partition``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Pick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Pick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  fullName: MapModule.Pick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("pick")]

      public static TResult Pick<TKey,T,TResult> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>>> chooser, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Pick``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: Remove<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.Remove<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.Remove<TKey,T>(TKey, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("remove")]

      public static Microsoft.FSharp.Collections.FSharpMap<TKey,T> Remove<TKey,T> (TKey key, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.Remove``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: ToArray<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.ToArray<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.ToArray<TKey,T>(FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toArray")]

      public static Tuple<TKey,T>[] ToArray<TKey,T> (Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: System.Tuple{TKey,T}[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.ToArray``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: ToList<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.ToList<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.ToList<TKey,T>(FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toList")]

      public static Microsoft.FSharp.Collections.FSharpList<Tuple<TKey,T>> ToList<TKey,T> (Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList{System.Tuple{TKey,T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.ToList``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: ToSeq<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.ToSeq<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.ToSeq<TKey,T>(FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toSeq")]

      public static System.Collections.Generic.IEnumerable<Tuple<TKey,T>> ToSeq<TKey,T> (Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{TKey,T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.ToSeq``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: TryFind<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.TryFind<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.TryFind<TKey,T>(TKey, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFind")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryFind<TKey,T> (TKey key, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.TryFind``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: TryFindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.TryFindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.TryFindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindKey")]

      public static Microsoft.FSharp.Core.FSharpOption<TKey> TryFindKey<TKey,T> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,bool>> predicate, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{TKey}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.TryFindKey``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  commentId: M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  id: TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  langs:
  - csharp
  name: TryPick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.TryPick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  fullName: MapModule.TryPick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryPick")]

      public static Microsoft.FSharp.Core.FSharpOption<TResult> TryPick<TKey,T,TResult> (Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>>> chooser, Microsoft.FSharp.Collections.FSharpMap<TKey,T> table);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}}
      description: To be added.
    - id: table
      type: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
      description: To be added.
    typeParameters:
    - id: TKey
      description: To be added.
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.MapModule.TryPick``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Add<TKey,T>(TKey, T, FSharpMap<TKey,T>)
  nameWithType: MapModule.Add<TKey,T>(TKey, T, FSharpMap<TKey,T>)
  fullName: MapModule.Add<TKey,T>(TKey, T, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.FSharpMap`2
  name: FSharpMap<TKey,TValue>
  nameWithType: FSharpMap<TKey,TValue>
  fullName: Microsoft.FSharp.Collections.FSharpMap<TKey,TValue>
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Collections.FSharpMap{TKey,T}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpMap<TKey,T>
  nameWithType: FSharpMap<TKey,T>
  fullName: Microsoft.FSharp.Collections.FSharpMap<TKey,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpMap`2
    name: FSharpMap
    nameWithType: FSharpMap
    fullName: Microsoft.FSharp.Collections.FSharpMap
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ContainsKey<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.ContainsKey<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.ContainsKey<TKey,T>(TKey, FSharpMap<TKey,T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Collections.MapModule.Empty``2
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Empty<TKey,T>()
  nameWithType: MapModule.Empty<TKey,T>()
  fullName: MapModule.Empty<TKey,T>()
- uid: Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Exists<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Exists<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.Exists<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TKey,FSharpFunc<T,Boolean>>
  nameWithType: FSharpFunc<TKey,FSharpFunc<T,Boolean>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,System.Boolean>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Filter<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Filter<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.Filter<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Find<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.Find<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.Find<TKey,T>(TKey, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: FindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.FindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.FindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Fold<TKey,T,TState>(FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>, TState, FSharpMap<TKey,T>)
  nameWithType: MapModule.Fold<TKey,T,TState>(FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>, TState, FSharpMap<TKey,T>)
  fullName: MapModule.Fold<TKey,T,TState>(FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>, TState, FSharpMap<TKey,T>)
- uid: TState
  isExternal: true
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>
  nameWithType: FSharpFunc<TState,FSharpFunc<TKey,FSharpFunc<T,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: FoldBack<TKey,T,TState>(FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>, FSharpMap<TKey,T>, TState)
  nameWithType: MapModule.FoldBack<TKey,T,TState>(FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>, FSharpMap<TKey,T>, TState)
  fullName: MapModule.FoldBack<TKey,T,TState>(FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>, FSharpMap<TKey,T>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>
  nameWithType: FSharpFunc<TKey,FSharpFunc<T,FSharpFunc<TState,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ForAll<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.ForAll<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.ForAll<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: IsEmpty<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.IsEmpty<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.IsEmpty<TKey,T>(FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Iterate<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Unit>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Iterate<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Unit>>, FSharpMap<TKey,T>)
  fullName: MapModule.Iterate<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Unit>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TKey,FSharpFunc<T,Unit>>
  nameWithType: FSharpFunc<TKey,FSharpFunc<T,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Map<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,TResult>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Map<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,TResult>>, FSharpMap<TKey,T>)
  fullName: MapModule.Map<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,TResult>>, FSharpMap<TKey,T>)
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.FSharp.Collections.FSharpMap{TKey,TResult}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpMap<TKey,TResult>
  nameWithType: FSharpMap<TKey,TResult>
  fullName: Microsoft.FSharp.Collections.FSharpMap<TKey,TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpMap`2
    name: FSharpMap
    nameWithType: FSharpMap
    fullName: Microsoft.FSharp.Collections.FSharpMap
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TKey,FSharpFunc<T,TResult>>
  nameWithType: FSharpFunc<TKey,FSharpFunc<T,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: OfArray<TKey,T>(Tuple<TKey,T>[])
  nameWithType: MapModule.OfArray<TKey,T>(Tuple<TKey,T>[])
  fullName: MapModule.OfArray<TKey,T>(Tuple<TKey,T>[])
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: System.Tuple{TKey,T}[]
  parent: System
  isExternal: false
  name: Tuple<TKey,T>[]
  nameWithType: Tuple<TKey,T>[]
  fullName: System.Tuple<TKey,T>[]
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: OfList<TKey,T>(FSharpList<Tuple<TKey,T>>)
  nameWithType: MapModule.OfList<TKey,T>(FSharpList<Tuple<TKey,T>>)
  fullName: MapModule.OfList<TKey,T>(FSharpList<Tuple<TKey,T>>)
- uid: Microsoft.FSharp.Collections.FSharpList`1
  name: FSharpList<T>
  nameWithType: FSharpList<T>
  fullName: Microsoft.FSharp.Collections.FSharpList<T>
- uid: Microsoft.FSharp.Collections.FSharpList{System.Tuple{TKey,T}}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<Tuple<TKey,T>>
  nameWithType: FSharpList<Tuple<TKey,T>>
  fullName: Microsoft.FSharp.Collections.FSharpList<System.Tuple<TKey,T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpList`1
    name: FSharpList
    nameWithType: FSharpList
    fullName: Microsoft.FSharp.Collections.FSharpList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: OfSeq<TKey,T>(IEnumerable<Tuple<TKey,T>>)
  nameWithType: MapModule.OfSeq<TKey,T>(IEnumerable<Tuple<TKey,T>>)
  fullName: MapModule.OfSeq<TKey,T>(IEnumerable<Tuple<TKey,T>>)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{System.Tuple{TKey,T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<TKey,T>>
  nameWithType: IEnumerable<Tuple<TKey,T>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<TKey,T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Partition<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Partition<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.Partition<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
- uid: System.Tuple{Microsoft.FSharp.Collections.FSharpMap{TKey,T},Microsoft.FSharp.Collections.FSharpMap{TKey,T}}
  parent: System
  isExternal: false
  name: Tuple<FSharpMap<TKey,T>,FSharpMap<TKey,T>>
  nameWithType: Tuple<FSharpMap<TKey,T>,FSharpMap<TKey,T>>
  fullName: System.Tuple<Microsoft.FSharp.Collections.FSharpMap<TKey,T>,Microsoft.FSharp.Collections.FSharpMap<TKey,T>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpMap`2
    name: FSharpMap
    nameWithType: FSharpMap
    fullName: Microsoft.FSharp.Collections.FSharpMap
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpMap`2
    name: FSharpMap
    nameWithType: FSharpMap
    fullName: Microsoft.FSharp.Collections.FSharpMap
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Pick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.Pick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  fullName: MapModule.Pick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: Microsoft.FSharp.Core.FSharpFunc{TKey,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>
  nameWithType: FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TKey,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Remove<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.Remove<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.Remove<TKey,T>(TKey, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ToArray<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.ToArray<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.ToArray<TKey,T>(FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ToList<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.ToList<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.ToList<TKey,T>(FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ToSeq<TKey,T>(FSharpMap<TKey,T>)
  nameWithType: MapModule.ToSeq<TKey,T>(FSharpMap<TKey,T>)
  fullName: MapModule.ToSeq<TKey,T>(FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: TryFind<TKey,T>(TKey, FSharpMap<TKey,T>)
  nameWithType: MapModule.TryFind<TKey,T>(TKey, FSharpMap<TKey,T>)
  fullName: MapModule.TryFind<TKey,T>(TKey, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: TryFindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.TryFindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
  fullName: MapModule.TryFindKey<TKey,T>(FSharpFunc<TKey,FSharpFunc<T,Boolean>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Core.FSharpOption{TKey}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<TKey>
  nameWithType: FSharpOption<TKey>
  fullName: Microsoft.FSharp.Core.FSharpOption<TKey>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: TryPick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  nameWithType: MapModule.TryPick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
  fullName: MapModule.TryPick<TKey,T,TResult>(FSharpFunc<TKey,FSharpFunc<T,FSharpOption<TResult>>>, FSharpMap<TKey,T>)
- uid: Microsoft.FSharp.Core.FSharpOption{TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<TResult>
  nameWithType: FSharpOption<TResult>
  fullName: Microsoft.FSharp.Core.FSharpOption<TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.MapModule.Add``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Add<TKey,T>
  nameWithType: MapModule.Add<TKey,T>
  fullName: MapModule.Add<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ContainsKey``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ContainsKey<TKey,T>
  nameWithType: MapModule.ContainsKey<TKey,T>
  fullName: MapModule.ContainsKey<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Empty``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Empty<TKey,T>
  nameWithType: MapModule.Empty<TKey,T>
  fullName: MapModule.Empty<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Exists``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Exists<TKey,T>
  nameWithType: MapModule.Exists<TKey,T>
  fullName: MapModule.Exists<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Filter``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Filter<TKey,T>
  nameWithType: MapModule.Filter<TKey,T>
  fullName: MapModule.Filter<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Find``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Find<TKey,T>
  nameWithType: MapModule.Find<TKey,T>
  fullName: MapModule.Find<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.FindKey``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: FindKey<TKey,T>
  nameWithType: MapModule.FindKey<TKey,T>
  fullName: MapModule.FindKey<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Fold``3*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Fold<TKey,T,TState>
  nameWithType: MapModule.Fold<TKey,T,TState>
  fullName: MapModule.Fold<TKey,T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.FoldBack``3*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: FoldBack<TKey,T,TState>
  nameWithType: MapModule.FoldBack<TKey,T,TState>
  fullName: MapModule.FoldBack<TKey,T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ForAll``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ForAll<TKey,T>
  nameWithType: MapModule.ForAll<TKey,T>
  fullName: MapModule.ForAll<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.IsEmpty``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: IsEmpty<TKey,T>
  nameWithType: MapModule.IsEmpty<TKey,T>
  fullName: MapModule.IsEmpty<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Iterate``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Iterate<TKey,T>
  nameWithType: MapModule.Iterate<TKey,T>
  fullName: MapModule.Iterate<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Map``3*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Map<TKey,T,TResult>
  nameWithType: MapModule.Map<TKey,T,TResult>
  fullName: MapModule.Map<TKey,T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.OfArray``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: OfArray<TKey,T>
  nameWithType: MapModule.OfArray<TKey,T>
  fullName: MapModule.OfArray<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.OfList``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: OfList<TKey,T>
  nameWithType: MapModule.OfList<TKey,T>
  fullName: MapModule.OfList<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.OfSeq``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: OfSeq<TKey,T>
  nameWithType: MapModule.OfSeq<TKey,T>
  fullName: MapModule.OfSeq<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Partition``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Partition<TKey,T>
  nameWithType: MapModule.Partition<TKey,T>
  fullName: MapModule.Partition<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Pick``3*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Pick<TKey,T,TResult>
  nameWithType: MapModule.Pick<TKey,T,TResult>
  fullName: MapModule.Pick<TKey,T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.Remove``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: Remove<TKey,T>
  nameWithType: MapModule.Remove<TKey,T>
  fullName: MapModule.Remove<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ToArray``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ToArray<TKey,T>
  nameWithType: MapModule.ToArray<TKey,T>
  fullName: MapModule.ToArray<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ToList``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ToList<TKey,T>
  nameWithType: MapModule.ToList<TKey,T>
  fullName: MapModule.ToList<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.ToSeq``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: ToSeq<TKey,T>
  nameWithType: MapModule.ToSeq<TKey,T>
  fullName: MapModule.ToSeq<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.TryFind``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: TryFind<TKey,T>
  nameWithType: MapModule.TryFind<TKey,T>
  fullName: MapModule.TryFind<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.TryFindKey``2*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: TryFindKey<TKey,T>
  nameWithType: MapModule.TryFindKey<TKey,T>
  fullName: MapModule.TryFindKey<TKey,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
- uid: Microsoft.FSharp.Collections.MapModule.TryPick``3*
  parent: Microsoft.FSharp.Collections.MapModule
  isExternal: false
  name: TryPick<TKey,T,TResult>
  nameWithType: MapModule.TryPick<TKey,T,TResult>
  fullName: MapModule.TryPick<TKey,T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/MapModule.xml
