### YamlMime:ManagedReference
items:
- uid: Mono.CodeGeneration.CodeConditionExpression
  commentId: T:Mono.CodeGeneration.CodeConditionExpression
  id: CodeConditionExpression
  children:
  - Mono.CodeGeneration.CodeConditionExpression.#ctor
  - Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  langs:
  - csharp
  name: CodeConditionExpression
  nameWithType: CodeConditionExpression
  fullName: Mono.CodeGeneration.CodeConditionExpression
  type: Class
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: 'public abstract class CodeConditionExpression : Mono.CodeGeneration.CodeExpression'
  inheritance:
  - System.Object
  - Mono.CodeGeneration.CodeItem
  - Mono.CodeGeneration.CodeExpression
  derivedClasses:
  - Mono.CodeGeneration.CodeAnd
  - Mono.CodeGeneration.CodeBinaryComparison
  - Mono.CodeGeneration.CodeBinaryOperation
  - Mono.CodeGeneration.CodeEquals
  - Mono.CodeGeneration.CodeIs
  - Mono.CodeGeneration.CodeNot
  - Mono.CodeGeneration.CodeNotEquals
  - Mono.CodeGeneration.CodeOr
  implements: []
  inheritedMembers:
  - Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.ArrayLength
  - Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.CallToString
  - Mono.CodeGeneration.CodeExpression.CastTo(System.Type)
  - Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeExpression.GetResultType
  - Mono.CodeGeneration.CodeExpression.Is(System.Type)
  - Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsNull
  - Mono.CodeGeneration.CodeExpression.IsNumber
  - Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.String)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.String)
  - Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.NullValue(System.Type)
  - Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeItem.Generate(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeItem.PrintCode(Mono.CodeGeneration.CodeWriter)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeConditionExpression.xml
- uid: Mono.CodeGeneration.CodeConditionExpression.#ctor
  commentId: M:Mono.CodeGeneration.CodeConditionExpression.#ctor
  id: '#ctor'
  parent: Mono.CodeGeneration.CodeConditionExpression
  langs:
  - csharp
  name: CodeConditionExpression()
  nameWithType: CodeConditionExpression.CodeConditionExpression()
  fullName: Mono.CodeGeneration.CodeConditionExpression.CodeConditionExpression()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: protected CodeConditionExpression ();
    parameters: []
  overload: Mono.CodeGeneration.CodeConditionExpression.#ctor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeConditionExpression.xml
- uid: Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  commentId: M:Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  id: GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  parent: Mono.CodeGeneration.CodeConditionExpression
  langs:
  - csharp
  name: GenerateForBranch(ILGenerator, Label, Boolean)
  nameWithType: CodeConditionExpression.GenerateForBranch(ILGenerator, Label, Boolean)
  fullName: Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch(ILGenerator, Label, Boolean)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public virtual void GenerateForBranch (System.Reflection.Emit.ILGenerator gen, System.Reflection.Emit.Label label, bool jumpCase);
    parameters:
    - id: gen
      type: System.Reflection.Emit.ILGenerator
      description: To be added.
    - id: label
      type: System.Reflection.Emit.Label
      description: To be added.
    - id: jumpCase
      type: System.Boolean
      description: To be added.
  overload: Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeConditionExpression.xml
references:
- uid: Mono.CodeGeneration.CodeExpression
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: Mono.CodeGeneration.CodeExpression
- uid: Mono.CodeGeneration.CodeConditionExpression.#ctor
  parent: Mono.CodeGeneration.CodeConditionExpression
  isExternal: false
  name: CodeConditionExpression()
  nameWithType: CodeConditionExpression.CodeConditionExpression()
  fullName: Mono.CodeGeneration.CodeConditionExpression.CodeConditionExpression()
- uid: Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label,System.Boolean)
  parent: Mono.CodeGeneration.CodeConditionExpression
  isExternal: false
  name: GenerateForBranch(ILGenerator, Label, Boolean)
  nameWithType: CodeConditionExpression.GenerateForBranch(ILGenerator, Label, Boolean)
  fullName: Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch(ILGenerator, Label, Boolean)
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mono.CodeGeneration.CodeConditionExpression.#ctor*
  parent: Mono.CodeGeneration.CodeConditionExpression
  isExternal: false
  name: CodeConditionExpression
  nameWithType: CodeConditionExpression.CodeConditionExpression
  fullName: Mono.CodeGeneration.CodeConditionExpression.CodeConditionExpression
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeConditionExpression.xml
- uid: Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch*
  parent: Mono.CodeGeneration.CodeConditionExpression
  isExternal: false
  name: GenerateForBranch
  nameWithType: CodeConditionExpression.GenerateForBranch
  fullName: Mono.CodeGeneration.CodeConditionExpression.GenerateForBranch
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeConditionExpression.xml
