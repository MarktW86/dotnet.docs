### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.CommonAce
  commentId: T:System.Security.AccessControl.CommonAce
  id: CommonAce
  children:
  - System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
  - System.Security.AccessControl.CommonAce.BinaryLength
  - System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  langs:
  - csharp
  name: CommonAce
  nameWithType: CommonAce
  fullName: System.Security.AccessControl.CommonAce
  type: Class
  assemblies:
  - System.Security.AccessControl
  - mscorlib
  namespace: System.Security.AccessControl
  summary: Represents an access control entry (ACE).
  remarks: "The <xref:System.Security.AccessControl.CommonAce> class represents the eight most common ACE types:  \n  \n-   <xref:System.Security.AccessControl.AceType.AccessAllowed>  \n  \n-   <xref:System.Security.AccessControl.AceType.AccessAllowedCallback>  \n  \n-   <xref:System.Security.AccessControl.AceType.AccessDenied>  \n  \n-   <xref:System.Security.AccessControl.AceType.AccessDeniedCallback>  \n  \n-   <xref:System.Security.AccessControl.AceType.SystemAudit>  \n  \n-   <xref:System.Security.AccessControl.AceType.SystemAuditCallback>  \n  \n-   <xref:System.Security.AccessControl.AceType.SystemAlarm>  \n  \n-   <xref:System.Security.AccessControl.AceType.SystemAlarmCallback>"
  syntax:
    content: 'public sealed class CommonAce : System.Security.AccessControl.QualifiedAce'
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  - System.Security.AccessControl.KnownAce
  - System.Security.AccessControl.QualifiedAce
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.KnownAce.AccessMask
  - System.Security.AccessControl.KnownAce.SecurityIdentifier
  - System.Security.AccessControl.QualifiedAce.AceQualifier
  - System.Security.AccessControl.QualifiedAce.GetOpaque
  - System.Security.AccessControl.QualifiedAce.IsCallback
  - System.Security.AccessControl.QualifiedAce.OpaqueLength
  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
- uid: System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
  commentId: M:System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
  id: '#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])'
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  name: CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])
  nameWithType: CommonAce.CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])
  fullName: CommonAce.CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])
  type: Constructor
  assemblies:
  - System.Security.AccessControl
  - mscorlib
  namespace: System.Security.AccessControl
  summary: Initializes a new instance of the <xref href="System.Security.AccessControl.CommonAce"></xref> class.
  syntax:
    content: public CommonAce (System.Security.AccessControl.AceFlags flags, System.Security.AccessControl.AceQualifier qualifier, int accessMask, System.Security.Principal.SecurityIdentifier sid, bool isCallback, byte[] opaque);
    parameters:
    - id: flags
      type: System.Security.AccessControl.AceFlags
      description: Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new access control entry (ACE).
    - id: qualifier
      type: System.Security.AccessControl.AceQualifier
      description: The use of the new ACE.
    - id: accessMask
      type: System.Int32
      description: The access mask for the ACE.
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: The <xref href="System.Security.Principal.SecurityIdentifier"></xref> associated with the new ACE.
    - id: isCallback
      type: System.Boolean
      description: '`true` to specify that the new ACE is a callback type ACE.'
    - id: opaque
      type: System.Byte[]
      description: Opaque data associated with the new ACE. Opaque data is allowed only for callback ACE types. The length of this array must not be greater than the return value of the <xref href="System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)"></xref> method.
  overload: System.Security.AccessControl.CommonAce.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
- uid: System.Security.AccessControl.CommonAce.BinaryLength
  commentId: P:System.Security.AccessControl.CommonAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  name: BinaryLength
  nameWithType: CommonAce.BinaryLength
  fullName: CommonAce.BinaryLength
  type: Property
  assemblies:
  - System.Security.AccessControl
  - mscorlib
  namespace: System.Security.AccessControl
  summary: Gets the length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CommonAce"></xref> object. Use this length with the <xref href="System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)"></xref> method before marshaling the ACL into a binary array.
  syntax:
    content: public override int BinaryLength { get; }
    return:
      type: System.Int32
      description: The length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CommonAce"></xref> object.
  overload: System.Security.AccessControl.CommonAce.BinaryLength*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
- uid: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  name: GetBinaryForm(Byte[], Int32)
  nameWithType: CommonAce.GetBinaryForm(Byte[], Int32)
  fullName: CommonAce.GetBinaryForm(Byte[], Int32)
  type: Method
  assemblies:
  - System.Security.AccessControl
  - mscorlib
  namespace: System.Security.AccessControl
  summary: Marshals the contents of the <xref href="System.Security.AccessControl.CommonAce"></xref> object into the specified byte array beginning at the specified offset.
  syntax:
    content: public override void GetBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: The byte array into which the contents of the <xref href="System.Security.AccessControl.CommonAce"></xref> object is marshaled.
    - id: offset
      type: System.Int32
      description: The offset at which to start marshaling.
  overload: System.Security.AccessControl.CommonAce.GetBinaryForm*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> is negative or too high to allow the entire <xref href="System.Security.AccessControl.CommonAce"></xref> to be copied into the <code>binaryForm</code> array.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
- uid: System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  commentId: M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  id: MaxOpaqueLength(System.Boolean)
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  name: MaxOpaqueLength(Boolean)
  nameWithType: CommonAce.MaxOpaqueLength(Boolean)
  fullName: CommonAce.MaxOpaqueLength(Boolean)
  type: Method
  assemblies:
  - System.Security.AccessControl
  - mscorlib
  namespace: System.Security.AccessControl
  summary: Gets the maximum allowed length of an opaque data BLOB for callback access control entries (ACEs).
  syntax:
    content: public static int MaxOpaqueLength (bool isCallback);
    parameters:
    - id: isCallback
      type: System.Boolean
      description: '`true` to specify that the <xref href="System.Security.AccessControl.CommonAce"></xref> object is a callback ACE type.'
    return:
      type: System.Int32
      description: The allowed length of an opaque data BLOB.
  overload: System.Security.AccessControl.CommonAce.MaxOpaqueLength*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
references:
- uid: System.Security.AccessControl.QualifiedAce
  parent: System.Security.AccessControl
  isExternal: false
  name: QualifiedAce
  nameWithType: QualifiedAce
  fullName: System.Security.AccessControl.QualifiedAce
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])
  nameWithType: CommonAce.CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])
  fullName: CommonAce.CommonAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, Boolean, Byte[])
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  nameWithType: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.AceQualifier
  parent: System.Security.AccessControl
  isExternal: false
  name: AceQualifier
  nameWithType: AceQualifier
  fullName: System.Security.AccessControl.AceQualifier
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.AccessControl.CommonAce.BinaryLength
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: BinaryLength
  nameWithType: CommonAce.BinaryLength
  fullName: CommonAce.BinaryLength
- uid: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: GetBinaryForm(Byte[], Int32)
  nameWithType: CommonAce.GetBinaryForm(Byte[], Int32)
  fullName: CommonAce.GetBinaryForm(Byte[], Int32)
- uid: System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: MaxOpaqueLength(Boolean)
  nameWithType: CommonAce.MaxOpaqueLength(Boolean)
  fullName: CommonAce.MaxOpaqueLength(Boolean)
- uid: System.Security.AccessControl.CommonAce.#ctor*
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: CommonAce
  nameWithType: CommonAce.CommonAce
  fullName: CommonAce.CommonAce
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
- uid: System.Security.AccessControl.CommonAce.BinaryLength*
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: BinaryLength
  nameWithType: CommonAce.BinaryLength
  fullName: CommonAce.BinaryLength
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
- uid: System.Security.AccessControl.CommonAce.GetBinaryForm*
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: GetBinaryForm
  nameWithType: CommonAce.GetBinaryForm
  fullName: CommonAce.GetBinaryForm
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
- uid: System.Security.AccessControl.CommonAce.MaxOpaqueLength*
  parent: System.Security.AccessControl.CommonAce
  isExternal: false
  name: MaxOpaqueLength
  nameWithType: CommonAce.MaxOpaqueLength
  fullName: CommonAce.MaxOpaqueLength
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CommonAce.xml
