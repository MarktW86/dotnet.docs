### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Reflection.FSharpType
  commentId: T:Microsoft.FSharp.Reflection.FSharpType
  id: FSharpType
  children:
  - Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(System.Type)
  - Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(System.Type)
  - Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpType.IsFunction(System.Type)
  - Microsoft.FSharp.Reflection.FSharpType.IsModule(System.Type)
  - Microsoft.FSharp.Reflection.FSharpType.IsRecord(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpType.IsTuple(System.Type)
  - Microsoft.FSharp.Reflection.FSharpType.IsUnion(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(System.Type,System.Type)
  - Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(System.Type[])
  langs:
  - csharp
  name: FSharpType
  nameWithType: FSharpType
  fullName: Microsoft.FSharp.Reflection.FSharpType
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: >-
      [Microsoft.FSharp.Core.AbstractClass]

      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)]

      [Microsoft.FSharp.Core.Sealed]

      public static class FSharpType
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.AbstractClassAttribute
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.SealedAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: GetExceptionFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: GetExceptionFields(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.GetExceptionFields(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo[] GetExceptionFields (Type exceptionType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: exceptionType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(System.Type)
  id: GetFunctionElements(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: GetFunctionElements(Type)
  nameWithType: FSharpType.GetFunctionElements(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Tuple<Type,Type> GetFunctionElements (Type functionType);
    parameters:
    - id: functionType
      type: System.Type
      description: To be added.
    return:
      type: System.Tuple{System.Type,System.Type}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: GetRecordFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: GetRecordFields(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.GetRecordFields(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo[] GetRecordFields (Type recordType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.GetRecordFields*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(System.Type)
  id: GetTupleElements(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: GetTupleElements(Type)
  nameWithType: FSharpType.GetTupleElements(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Type[] GetTupleElements (Type tupleType);
    parameters:
    - id: tupleType
      type: System.Type
      description: To be added.
    return:
      type: System.Type[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.GetTupleElements*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: GetUnionCases(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: GetUnionCases(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.GetUnionCases(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Reflection.UnionCaseInfo[] GetUnionCases (Type unionType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: unionType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: Microsoft.FSharp.Reflection.UnionCaseInfo[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.GetUnionCases*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: IsExceptionRepresentation(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: IsExceptionRepresentation(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.IsExceptionRepresentation(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool IsExceptionRepresentation (Type exceptionType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: exceptionType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsFunction(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.IsFunction(System.Type)
  id: IsFunction(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: IsFunction(Type)
  nameWithType: FSharpType.IsFunction(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsFunction(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool IsFunction (Type typ);
    parameters:
    - id: typ
      type: System.Type
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.IsFunction*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsModule(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.IsModule(System.Type)
  id: IsModule(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: IsModule(Type)
  nameWithType: FSharpType.IsModule(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsModule(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool IsModule (Type typ);
    parameters:
    - id: typ
      type: System.Type
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.IsModule*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsRecord(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.IsRecord(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: IsRecord(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: IsRecord(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.IsRecord(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsRecord(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool IsRecord (Type typ, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: typ
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.IsRecord*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsTuple(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.IsTuple(System.Type)
  id: IsTuple(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: IsTuple(Type)
  nameWithType: FSharpType.IsTuple(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsTuple(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool IsTuple (Type typ);
    parameters:
    - id: typ
      type: System.Type
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.IsTuple*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsUnion(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.IsUnion(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: IsUnion(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: IsUnion(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.IsUnion(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsUnion(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool IsUnion (Type typ, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: typ
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.IsUnion*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(System.Type,System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(System.Type,System.Type)
  id: MakeFunctionType(System.Type,System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: MakeFunctionType(Type, Type)
  nameWithType: FSharpType.MakeFunctionType(Type, Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(Type, Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Type MakeFunctionType (Type domain, Type range);
    parameters:
    - id: domain
      type: System.Type
      description: To be added.
    - id: range
      type: System.Type
      description: To be added.
    return:
      type: System.Type
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(System.Type[])
  commentId: M:Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(System.Type[])
  id: MakeTupleType(System.Type[])
  parent: Microsoft.FSharp.Reflection.FSharpType
  langs:
  - csharp
  name: MakeTupleType(Type[])
  nameWithType: FSharpType.MakeTupleType(Type[])
  fullName: Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(Type[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Type MakeTupleType (Type[] types);
    parameters:
    - id: types
      type: System.Type[]
      description: To be added.
    return:
      type: System.Type
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpType.MakeTupleType*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetExceptionFields(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.GetExceptionFields(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(Type, FSharpOption<BindingFlags>)
- uid: System.Reflection.PropertyInfo
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: System.Reflection.BindingFlags
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<BindingFlags>
  nameWithType: FSharpOption<BindingFlags>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetFunctionElements(Type)
  nameWithType: FSharpType.GetFunctionElements(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(Type)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: System.Tuple{System.Type,System.Type}
  parent: System
  isExternal: false
  name: Tuple<Type,Type>
  nameWithType: Tuple<Type,Type>
  fullName: System.Tuple<System.Type,System.Type>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetRecordFields(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.GetRecordFields(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(Type, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetTupleElements(Type)
  nameWithType: FSharpType.GetTupleElements(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(Type)
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetUnionCases(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.GetUnionCases(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(Type, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.UnionCaseInfo
  name: UnionCaseInfo
  nameWithType: UnionCaseInfo
  fullName: Microsoft.FSharp.Reflection.UnionCaseInfo
- uid: Microsoft.FSharp.Reflection.UnionCaseInfo[]
  parent: Microsoft.FSharp.Reflection
  isExternal: false
  name: UnionCaseInfo[]
  nameWithType: UnionCaseInfo[]
  fullName: Microsoft.FSharp.Reflection.UnionCaseInfo[]
  spec.csharp:
  - uid: Microsoft.FSharp.Reflection.UnionCaseInfo
    name: UnionCaseInfo
    nameWithType: UnionCaseInfo
    fullName: Microsoft.FSharp.Reflection.UnionCaseInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsExceptionRepresentation(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.IsExceptionRepresentation(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(Type, FSharpOption<BindingFlags>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Reflection.FSharpType.IsFunction(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsFunction(Type)
  nameWithType: FSharpType.IsFunction(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsFunction(Type)
- uid: Microsoft.FSharp.Reflection.FSharpType.IsModule(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsModule(Type)
  nameWithType: FSharpType.IsModule(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsModule(Type)
- uid: Microsoft.FSharp.Reflection.FSharpType.IsRecord(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsRecord(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.IsRecord(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsRecord(Type, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpType.IsTuple(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsTuple(Type)
  nameWithType: FSharpType.IsTuple(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsTuple(Type)
- uid: Microsoft.FSharp.Reflection.FSharpType.IsUnion(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsUnion(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpType.IsUnion(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsUnion(Type, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(System.Type,System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: MakeFunctionType(Type, Type)
  nameWithType: FSharpType.MakeFunctionType(Type, Type)
  fullName: Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(Type, Type)
- uid: Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(System.Type[])
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: MakeTupleType(Type[])
  nameWithType: FSharpType.MakeTupleType(Type[])
  fullName: Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(Type[])
- uid: Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetExceptionFields
  nameWithType: FSharpType.GetExceptionFields
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetFunctionElements
  nameWithType: FSharpType.GetFunctionElements
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetRecordFields*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetRecordFields
  nameWithType: FSharpType.GetRecordFields
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetRecordFields
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetTupleElements*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetTupleElements
  nameWithType: FSharpType.GetTupleElements
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetTupleElements
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.GetUnionCases*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: GetUnionCases
  nameWithType: FSharpType.GetUnionCases
  fullName: Microsoft.FSharp.Reflection.FSharpType.GetUnionCases
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsExceptionRepresentation
  nameWithType: FSharpType.IsExceptionRepresentation
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsFunction*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsFunction
  nameWithType: FSharpType.IsFunction
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsFunction
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsModule*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsModule
  nameWithType: FSharpType.IsModule
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsModule
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsRecord*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsRecord
  nameWithType: FSharpType.IsRecord
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsRecord
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsTuple*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsTuple
  nameWithType: FSharpType.IsTuple
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsTuple
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.IsUnion*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: IsUnion
  nameWithType: FSharpType.IsUnion
  fullName: Microsoft.FSharp.Reflection.FSharpType.IsUnion
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: MakeFunctionType
  nameWithType: FSharpType.MakeFunctionType
  fullName: Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
- uid: Microsoft.FSharp.Reflection.FSharpType.MakeTupleType*
  parent: Microsoft.FSharp.Reflection.FSharpType
  isExternal: false
  name: MakeTupleType
  nameWithType: FSharpType.MakeTupleType
  fullName: Microsoft.FSharp.Reflection.FSharpType.MakeTupleType
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpType.xml
