### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Core.LanguagePrimitives
  commentId: T:Microsoft.FSharp.Core.LanguagePrimitives
  id: LanguagePrimitives
  children:
  - Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3(``0,``1)
  - Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3(``0,``1)
  - Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3(``0,``1)
  - Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure(System.Decimal)
  - Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1(``0,System.Int32)
  - Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1(``0,System.Int32)
  - Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2(``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2(``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1
  - Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable``1
  - Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1
  - Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable``1
  - Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1(System.Int32)
  - Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure(System.Single)
  - Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure(System.Double)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1(``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1(System.Int32,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1
  - Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1
  - Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure(System.Int16)
  - Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure(System.Int32)
  - Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure(System.Int64)
  - Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3(``0,``1)
  - Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(System.String)
  - Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(System.String)
  - Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(System.String)
  - Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(System.String)
  - Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1(``0,``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1(``0)
  - Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure(System.SByte)
  langs:
  - csharp
  name: LanguagePrimitives
  nameWithType: LanguagePrimitives
  fullName: Microsoft.FSharp.Core.LanguagePrimitives
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      public static class LanguagePrimitives
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3(``0,``1)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3(``0,``1)
  id: AdditionDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: AdditionDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.AdditionDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic<T1,T2,TResult>(T1, T2)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)]

      public static TResult AdditionDynamic<T1,T2,TResult> (T1 x, T2 y);
    parameters:
    - id: x
      type: T1
      description: To be added.
    - id: y
      type: T2
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3(``0,``1)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3(``0,``1)
  id: CheckedAdditionDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: CheckedAdditionDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.CheckedAdditionDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic<T1,T2,TResult>(T1, T2)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)]

      public static TResult CheckedAdditionDynamic<T1,T2,TResult> (T1 x, T2 y);
    parameters:
    - id: x
      type: T1
      description: To be added.
    - id: y
      type: T2
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3(``0,``1)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3(``0,``1)
  id: CheckedMultiplyDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: CheckedMultiplyDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.CheckedMultiplyDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic<T1,T2,TResult>(T1, T2)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)]

      public static TResult CheckedMultiplyDynamic<T1,T2,TResult> (T1 x, T2 y);
    parameters:
    - id: x
      type: T1
      description: To be added.
    - id: y
      type: T2
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure(System.Decimal)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure(System.Decimal)
  id: DecimalWithMeasure(System.Decimal)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: DecimalWithMeasure(Decimal)
  nameWithType: LanguagePrimitives.DecimalWithMeasure(Decimal)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure(Decimal)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static decimal DecimalWithMeasure (decimal f);
    parameters:
    - id: f
      type: System.Decimal
      description: To be added.
    return:
      type: System.Decimal
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1(``0,System.Int32)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1(``0,System.Int32)
  id: DivideByInt``1(``0,System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: DivideByInt<T>(T, Int32)
  nameWithType: LanguagePrimitives.DivideByInt<T>(T, Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt<T>(T, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static T DivideByInt<T> (T x, int y);
    parameters:
    - id: x
      type: T
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1(``0,System.Int32)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1(``0,System.Int32)
  id: DivideByIntDynamic``1(``0,System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: DivideByIntDynamic<T>(T, Int32)
  nameWithType: LanguagePrimitives.DivideByIntDynamic<T>(T, Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic<T>(T, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)]

      public static T DivideByIntDynamic<T> (T x, int y);
    parameters:
    - id: x
      type: T
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2(``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2(``0)
  id: EnumOfValue``2(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: EnumOfValue<T,TEnum>(T)
  nameWithType: LanguagePrimitives.EnumOfValue<T,TEnum>(T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue<T,TEnum>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static TEnum EnumOfValue<T,TEnum> (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: TEnum
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2(``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2(``0)
  id: EnumToValue``2(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: EnumToValue<TEnum,T>(TEnum)
  nameWithType: LanguagePrimitives.EnumToValue<TEnum,T>(TEnum)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue<TEnum,T>(TEnum)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static T EnumToValue<TEnum,T> (TEnum enum);
    parameters:
    - id: enum
      type: TEnum
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1
  id: FastGenericComparer``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: FastGenericComparer<T>()
  nameWithType: LanguagePrimitives.FastGenericComparer<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static System.Collections.Generic.IComparer<T> FastGenericComparer<T> ();
    parameters: []
    return:
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable``1
  id: FastGenericComparerFromTable``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: FastGenericComparerFromTable<T>()
  nameWithType: LanguagePrimitives.FastGenericComparerFromTable<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilerMessage("This function is a compiler intrinsic should not be used directly", 1204, IsHidden=true)]

      public static System.Collections.Generic.IComparer<T> FastGenericComparerFromTable<T> ();
    parameters: []
    return:
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1
  id: FastGenericEqualityComparer``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: FastGenericEqualityComparer<T>()
  nameWithType: LanguagePrimitives.FastGenericEqualityComparer<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static System.Collections.Generic.IEqualityComparer<T> FastGenericEqualityComparer<T> ();
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable``1
  id: FastGenericEqualityComparerFromTable``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: FastGenericEqualityComparerFromTable<T>()
  nameWithType: LanguagePrimitives.FastGenericEqualityComparerFromTable<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilerMessage("This function is a compiler intrinsic should not be used directly", 1204, IsHidden=true)]

      public static System.Collections.Generic.IEqualityComparer<T> FastGenericEqualityComparerFromTable<T> ();
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1(System.Int32)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1(System.Int32)
  id: FastLimitedGenericEqualityComparer``1(System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: FastLimitedGenericEqualityComparer<T>(Int32)
  nameWithType: LanguagePrimitives.FastLimitedGenericEqualityComparer<T>(Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer<T>(Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static System.Collections.Generic.IEqualityComparer<T> FastLimitedGenericEqualityComparer<T> (int limit);
    parameters:
    - id: limit
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure(System.Single)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure(System.Single)
  id: Float32WithMeasure(System.Single)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: Float32WithMeasure(Single)
  nameWithType: LanguagePrimitives.Float32WithMeasure(Single)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure(Single)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static float Float32WithMeasure (float f);
    parameters:
    - id: f
      type: System.Single
      description: To be added.
    return:
      type: System.Single
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure(System.Double)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure(System.Double)
  id: FloatWithMeasure(System.Double)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: FloatWithMeasure(Double)
  nameWithType: LanguagePrimitives.FloatWithMeasure(Double)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure(Double)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static double FloatWithMeasure (double f);
    parameters:
    - id: f
      type: System.Double
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer
  commentId: P:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer
  id: GenericComparer
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericComparer
  nameWithType: LanguagePrimitives.GenericComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer
  type: Property
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Value)]

      public static System.Collections.IComparer GenericComparer { get; }
    return:
      type: System.Collections.IComparer
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1(``0,``0)
  id: GenericComparison``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericComparison<T>(T, T)
  nameWithType: LanguagePrimitives.GenericComparison<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static int GenericComparison<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)
  id: GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericComparisonWithComparer<T>(IComparer, T, T)
  nameWithType: LanguagePrimitives.GenericComparisonWithComparer<T>(IComparer, T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer<T>(IComparer, T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static int GenericComparisonWithComparer<T> (System.Collections.IComparer comp, T e1, T e2);
    parameters:
    - id: comp
      type: System.Collections.IComparer
      description: To be added.
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1(``0,``0)
  id: GenericEquality``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericEquality<T>(T, T)
  nameWithType: LanguagePrimitives.GenericEquality<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool GenericEquality<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer
  commentId: P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer
  id: GenericEqualityComparer
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericEqualityComparer
  nameWithType: LanguagePrimitives.GenericEqualityComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer
  type: Property
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Value)]

      public static System.Collections.IEqualityComparer GenericEqualityComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1(``0,``0)
  id: GenericEqualityER``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericEqualityER<T>(T, T)
  nameWithType: LanguagePrimitives.GenericEqualityER<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool GenericEqualityER<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer
  commentId: P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer
  id: GenericEqualityERComparer
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericEqualityERComparer
  nameWithType: LanguagePrimitives.GenericEqualityERComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer
  type: Property
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Value)]

      public static System.Collections.IEqualityComparer GenericEqualityERComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)
  id: GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericEqualityWithComparer<T>(IEqualityComparer, T, T)
  nameWithType: LanguagePrimitives.GenericEqualityWithComparer<T>(IEqualityComparer, T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer<T>(IEqualityComparer, T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool GenericEqualityWithComparer<T> (System.Collections.IEqualityComparer comp, T e1, T e2);
    parameters:
    - id: comp
      type: System.Collections.IEqualityComparer
      description: To be added.
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1(``0,``0)
  id: GenericGreaterOrEqual``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericGreaterOrEqual<T>(T, T)
  nameWithType: LanguagePrimitives.GenericGreaterOrEqual<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool GenericGreaterOrEqual<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1(``0,``0)
  id: GenericGreaterThan``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericGreaterThan<T>(T, T)
  nameWithType: LanguagePrimitives.GenericGreaterThan<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool GenericGreaterThan<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1(``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1(``0)
  id: GenericHash``1(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericHash<T>(T)
  nameWithType: LanguagePrimitives.GenericHash<T>(T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericHash<T>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static int GenericHash<T> (T obj);
    parameters:
    - id: obj
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)
  id: GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericHashWithComparer<T>(IEqualityComparer, T)
  nameWithType: LanguagePrimitives.GenericHashWithComparer<T>(IEqualityComparer, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer<T>(IEqualityComparer, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static int GenericHashWithComparer<T> (System.Collections.IEqualityComparer comparer, T obj);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: To be added.
    - id: obj
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1(``0,``0)
  id: GenericLessOrEqual``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericLessOrEqual<T>(T, T)
  nameWithType: LanguagePrimitives.GenericLessOrEqual<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool GenericLessOrEqual<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1(``0,``0)
  id: GenericLessThan``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericLessThan<T>(T, T)
  nameWithType: LanguagePrimitives.GenericLessThan<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool GenericLessThan<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1(System.Int32,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1(System.Int32,``0)
  id: GenericLimitedHash``1(System.Int32,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericLimitedHash<T>(Int32, T)
  nameWithType: LanguagePrimitives.GenericLimitedHash<T>(Int32, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash<T>(Int32, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static int GenericLimitedHash<T> (int limit, T obj);
    parameters:
    - id: limit
      type: System.Int32
      description: To be added.
    - id: obj
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1(``0,``0)
  id: GenericMaximum``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericMaximum<T>(T, T)
  nameWithType: LanguagePrimitives.GenericMaximum<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static T GenericMaximum<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1(``0,``0)
  id: GenericMinimum``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericMinimum<T>(T, T)
  nameWithType: LanguagePrimitives.GenericMinimum<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static T GenericMinimum<T> (T e1, T e2);
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1
  id: GenericOne``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericOne<T>()
  nameWithType: LanguagePrimitives.GenericOne<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static T GenericOne<T> ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1
  id: GenericOneDynamic``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericOneDynamic<T>()
  nameWithType: LanguagePrimitives.GenericOneDynamic<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)]

      public static T GenericOneDynamic<T> ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1
  id: GenericZero``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericZero<T>()
  nameWithType: LanguagePrimitives.GenericZero<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static T GenericZero<T> ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1
  id: GenericZeroDynamic``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: GenericZeroDynamic<T>()
  nameWithType: LanguagePrimitives.GenericZeroDynamic<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilerMessage("This function is for use by compiled F# code and should not be used directly", 1204, IsHidden=true)]

      public static T GenericZeroDynamic<T> ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure(System.Int16)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure(System.Int16)
  id: Int16WithMeasure(System.Int16)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: Int16WithMeasure(Int16)
  nameWithType: LanguagePrimitives.Int16WithMeasure(Int16)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure(Int16)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static short Int16WithMeasure (short f);
    parameters:
    - id: f
      type: System.Int16
      description: To be added.
    return:
      type: System.Int16
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure(System.Int32)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure(System.Int32)
  id: Int32WithMeasure(System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: Int32WithMeasure(Int32)
  nameWithType: LanguagePrimitives.Int32WithMeasure(Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure(Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static int Int32WithMeasure (int f);
    parameters:
    - id: f
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure(System.Int64)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure(System.Int64)
  id: Int64WithMeasure(System.Int64)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: Int64WithMeasure(Int64)
  nameWithType: LanguagePrimitives.Int64WithMeasure(Int64)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure(Int64)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static long Int64WithMeasure (long f);
    parameters:
    - id: f
      type: System.Int64
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3(``0,``1)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3(``0,``1)
  id: MultiplyDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: MultiplyDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.MultiplyDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic<T1,T2,TResult>(T1, T2)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilerMessage("This function is for use by dynamic invocations of F# code and should not be used directly", 1204, IsHidden=true)]

      public static TResult MultiplyDynamic<T1,T2,TResult> (T1 x, T2 y);
    parameters:
    - id: x
      type: T1
      description: To be added.
    - id: y
      type: T2
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilerMessageAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(System.String)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(System.String)
  id: ParseInt32(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: ParseInt32(String)
  nameWithType: LanguagePrimitives.ParseInt32(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(String)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static int ParseInt32 (string s);
    parameters:
    - id: s
      type: System.String
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(System.String)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(System.String)
  id: ParseInt64(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: ParseInt64(String)
  nameWithType: LanguagePrimitives.ParseInt64(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(String)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static long ParseInt64 (string s);
    parameters:
    - id: s
      type: System.String
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(System.String)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(System.String)
  id: ParseUInt32(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: ParseUInt32(String)
  nameWithType: LanguagePrimitives.ParseUInt32(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(String)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static uint ParseUInt32 (string s);
    parameters:
    - id: s
      type: System.String
      description: To be added.
    return:
      type: System.UInt32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(System.String)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(System.String)
  id: ParseUInt64(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: ParseUInt64(String)
  nameWithType: LanguagePrimitives.ParseUInt64(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(String)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static ulong ParseUInt64 (string s);
    parameters:
    - id: s
      type: System.String
      description: To be added.
    return:
      type: System.UInt64
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1(``0,``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1(``0,``0)
  id: PhysicalEquality``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: PhysicalEquality<T>(T, T)
  nameWithType: LanguagePrimitives.PhysicalEquality<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality<T>(T, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      public static bool PhysicalEquality<T> (T e1, T e2) where T : class;
    parameters:
    - id: e1
      type: T
      description: To be added.
    - id: e2
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1(``0)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1(``0)
  id: PhysicalHash``1(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: PhysicalHash<T>(T)
  nameWithType: LanguagePrimitives.PhysicalHash<T>(T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash<T>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: 'public static int PhysicalHash<T> (T obj) where T : class;'
    parameters:
    - id: obj
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure(System.SByte)
  commentId: M:Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure(System.SByte)
  id: SByteWithMeasure(System.SByte)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  langs:
  - csharp
  name: SByteWithMeasure(SByte)
  nameWithType: LanguagePrimitives.SByteWithMeasure(SByte)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure(SByte)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Core
  syntax:
    content: public static sbyte SByteWithMeasure (sbyte f);
    parameters:
    - id: f
      type: System.SByte
      description: To be added.
    return:
      type: System.SByte
      description: To be added.
  overload: Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: AdditionDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.AdditionDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic<T1,T2,TResult>(T1, T2)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  isExternal: true
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  isExternal: true
  name: T2
  nameWithType: T2
  fullName: T2
- uid: Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: CheckedAdditionDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.CheckedAdditionDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic<T1,T2,TResult>(T1, T2)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: CheckedMultiplyDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.CheckedMultiplyDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic<T1,T2,TResult>(T1, T2)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure(System.Decimal)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: DecimalWithMeasure(Decimal)
  nameWithType: LanguagePrimitives.DecimalWithMeasure(Decimal)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1(``0,System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: DivideByInt<T>(T, Int32)
  nameWithType: LanguagePrimitives.DivideByInt<T>(T, Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt<T>(T, Int32)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1(``0,System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: DivideByIntDynamic<T>(T, Int32)
  nameWithType: LanguagePrimitives.DivideByIntDynamic<T>(T, Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic<T>(T, Int32)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: EnumOfValue<T,TEnum>(T)
  nameWithType: LanguagePrimitives.EnumOfValue<T,TEnum>(T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue<T,TEnum>(T)
- uid: TEnum
  isExternal: true
  name: TEnum
  nameWithType: TEnum
  fullName: TEnum
- uid: Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: EnumToValue<TEnum,T>(TEnum)
  nameWithType: LanguagePrimitives.EnumToValue<TEnum,T>(TEnum)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue<TEnum,T>(TEnum)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericComparer<T>()
  nameWithType: LanguagePrimitives.FastGenericComparer<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer<T>()
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericComparerFromTable<T>()
  nameWithType: LanguagePrimitives.FastGenericComparerFromTable<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable<T>()
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericEqualityComparer<T>()
  nameWithType: LanguagePrimitives.FastGenericEqualityComparer<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer<T>()
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericEqualityComparerFromTable<T>()
  nameWithType: LanguagePrimitives.FastGenericEqualityComparerFromTable<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable<T>()
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1(System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastLimitedGenericEqualityComparer<T>(Int32)
  nameWithType: LanguagePrimitives.FastLimitedGenericEqualityComparer<T>(Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer<T>(Int32)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure(System.Single)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Float32WithMeasure(Single)
  nameWithType: LanguagePrimitives.Float32WithMeasure(Single)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure(System.Double)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FloatWithMeasure(Double)
  nameWithType: LanguagePrimitives.FloatWithMeasure(Double)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericComparer
  nameWithType: LanguagePrimitives.GenericComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericComparison<T>(T, T)
  nameWithType: LanguagePrimitives.GenericComparison<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericComparisonWithComparer<T>(IComparer, T, T)
  nameWithType: LanguagePrimitives.GenericComparisonWithComparer<T>(IComparer, T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer<T>(IComparer, T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEquality<T>(T, T)
  nameWithType: LanguagePrimitives.GenericEquality<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality<T>(T, T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityComparer
  nameWithType: LanguagePrimitives.GenericEqualityComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityER<T>(T, T)
  nameWithType: LanguagePrimitives.GenericEqualityER<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityERComparer
  nameWithType: LanguagePrimitives.GenericEqualityERComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityWithComparer<T>(IEqualityComparer, T, T)
  nameWithType: LanguagePrimitives.GenericEqualityWithComparer<T>(IEqualityComparer, T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer<T>(IEqualityComparer, T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericGreaterOrEqual<T>(T, T)
  nameWithType: LanguagePrimitives.GenericGreaterOrEqual<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericGreaterThan<T>(T, T)
  nameWithType: LanguagePrimitives.GenericGreaterThan<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericHash<T>(T)
  nameWithType: LanguagePrimitives.GenericHash<T>(T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericHash<T>(T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericHashWithComparer<T>(IEqualityComparer, T)
  nameWithType: LanguagePrimitives.GenericHashWithComparer<T>(IEqualityComparer, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer<T>(IEqualityComparer, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericLessOrEqual<T>(T, T)
  nameWithType: LanguagePrimitives.GenericLessOrEqual<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericLessThan<T>(T, T)
  nameWithType: LanguagePrimitives.GenericLessThan<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1(System.Int32,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericLimitedHash<T>(Int32, T)
  nameWithType: LanguagePrimitives.GenericLimitedHash<T>(Int32, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash<T>(Int32, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericMaximum<T>(T, T)
  nameWithType: LanguagePrimitives.GenericMaximum<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericMinimum<T>(T, T)
  nameWithType: LanguagePrimitives.GenericMinimum<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericOne<T>()
  nameWithType: LanguagePrimitives.GenericOne<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne<T>()
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericOneDynamic<T>()
  nameWithType: LanguagePrimitives.GenericOneDynamic<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic<T>()
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericZero<T>()
  nameWithType: LanguagePrimitives.GenericZero<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero<T>()
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericZeroDynamic<T>()
  nameWithType: LanguagePrimitives.GenericZeroDynamic<T>()
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic<T>()
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure(System.Int16)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Int16WithMeasure(Int16)
  nameWithType: LanguagePrimitives.Int16WithMeasure(Int16)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure(System.Int32)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Int32WithMeasure(Int32)
  nameWithType: LanguagePrimitives.Int32WithMeasure(Int32)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure(Int32)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure(System.Int64)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Int64WithMeasure(Int64)
  nameWithType: LanguagePrimitives.Int64WithMeasure(Int64)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3(``0,``1)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: MultiplyDynamic<T1,T2,TResult>(T1, T2)
  nameWithType: LanguagePrimitives.MultiplyDynamic<T1,T2,TResult>(T1, T2)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic<T1,T2,TResult>(T1, T2)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseInt32(String)
  nameWithType: LanguagePrimitives.ParseInt32(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseInt64(String)
  nameWithType: LanguagePrimitives.ParseInt64(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(String)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseUInt32(String)
  nameWithType: LanguagePrimitives.ParseUInt32(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(String)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(System.String)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseUInt64(String)
  nameWithType: LanguagePrimitives.ParseUInt64(String)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(String)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1(``0,``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: PhysicalEquality<T>(T, T)
  nameWithType: LanguagePrimitives.PhysicalEquality<T>(T, T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality<T>(T, T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1(``0)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: PhysicalHash<T>(T)
  nameWithType: LanguagePrimitives.PhysicalHash<T>(T)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash<T>(T)
- uid: Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure(System.SByte)
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: SByteWithMeasure(SByte)
  nameWithType: LanguagePrimitives.SByteWithMeasure(SByte)
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure(SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: AdditionDynamic<T1,T2,TResult>
  nameWithType: LanguagePrimitives.AdditionDynamic<T1,T2,TResult>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: CheckedAdditionDynamic<T1,T2,TResult>
  nameWithType: LanguagePrimitives.CheckedAdditionDynamic<T1,T2,TResult>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: CheckedMultiplyDynamic<T1,T2,TResult>
  nameWithType: LanguagePrimitives.CheckedMultiplyDynamic<T1,T2,TResult>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: DecimalWithMeasure
  nameWithType: LanguagePrimitives.DecimalWithMeasure
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: DivideByInt<T>
  nameWithType: LanguagePrimitives.DivideByInt<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: DivideByIntDynamic<T>
  nameWithType: LanguagePrimitives.DivideByIntDynamic<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: EnumOfValue<T,TEnum>
  nameWithType: LanguagePrimitives.EnumOfValue<T,TEnum>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue<T,TEnum>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: EnumToValue<TEnum,T>
  nameWithType: LanguagePrimitives.EnumToValue<TEnum,T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue<TEnum,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericComparer<T>
  nameWithType: LanguagePrimitives.FastGenericComparer<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericComparerFromTable<T>
  nameWithType: LanguagePrimitives.FastGenericComparerFromTable<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerFromTable<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericEqualityComparer<T>
  nameWithType: LanguagePrimitives.FastGenericEqualityComparer<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastGenericEqualityComparerFromTable<T>
  nameWithType: LanguagePrimitives.FastGenericEqualityComparerFromTable<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparerFromTable<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FastLimitedGenericEqualityComparer<T>
  nameWithType: LanguagePrimitives.FastLimitedGenericEqualityComparer<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Float32WithMeasure
  nameWithType: LanguagePrimitives.Float32WithMeasure
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: FloatWithMeasure
  nameWithType: LanguagePrimitives.FloatWithMeasure
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericComparer
  nameWithType: LanguagePrimitives.GenericComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericComparison<T>
  nameWithType: LanguagePrimitives.GenericComparison<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericComparisonWithComparer<T>
  nameWithType: LanguagePrimitives.GenericComparisonWithComparer<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEquality<T>
  nameWithType: LanguagePrimitives.GenericEquality<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityComparer
  nameWithType: LanguagePrimitives.GenericEqualityComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityER<T>
  nameWithType: LanguagePrimitives.GenericEqualityER<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityERComparer
  nameWithType: LanguagePrimitives.GenericEqualityERComparer
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericEqualityWithComparer<T>
  nameWithType: LanguagePrimitives.GenericEqualityWithComparer<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericGreaterOrEqual<T>
  nameWithType: LanguagePrimitives.GenericGreaterOrEqual<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericGreaterThan<T>
  nameWithType: LanguagePrimitives.GenericGreaterThan<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericHash<T>
  nameWithType: LanguagePrimitives.GenericHash<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericHash<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericHashWithComparer<T>
  nameWithType: LanguagePrimitives.GenericHashWithComparer<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericLessOrEqual<T>
  nameWithType: LanguagePrimitives.GenericLessOrEqual<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericLessThan<T>
  nameWithType: LanguagePrimitives.GenericLessThan<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericLimitedHash<T>
  nameWithType: LanguagePrimitives.GenericLimitedHash<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericMaximum<T>
  nameWithType: LanguagePrimitives.GenericMaximum<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericMinimum<T>
  nameWithType: LanguagePrimitives.GenericMinimum<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericOne<T>
  nameWithType: LanguagePrimitives.GenericOne<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericOne<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericOneDynamic<T>
  nameWithType: LanguagePrimitives.GenericOneDynamic<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericZero<T>
  nameWithType: LanguagePrimitives.GenericZero<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: GenericZeroDynamic<T>
  nameWithType: LanguagePrimitives.GenericZeroDynamic<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Int16WithMeasure
  nameWithType: LanguagePrimitives.Int16WithMeasure
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Int32WithMeasure
  nameWithType: LanguagePrimitives.Int32WithMeasure
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: Int64WithMeasure
  nameWithType: LanguagePrimitives.Int64WithMeasure
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: MultiplyDynamic<T1,T2,TResult>
  nameWithType: LanguagePrimitives.MultiplyDynamic<T1,T2,TResult>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseInt32
  nameWithType: LanguagePrimitives.ParseInt32
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseInt64
  nameWithType: LanguagePrimitives.ParseInt64
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseUInt32
  nameWithType: LanguagePrimitives.ParseUInt32
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: ParseUInt64
  nameWithType: LanguagePrimitives.ParseUInt64
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: PhysicalEquality<T>
  nameWithType: LanguagePrimitives.PhysicalEquality<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: PhysicalHash<T>
  nameWithType: LanguagePrimitives.PhysicalHash<T>
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
- uid: Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure*
  parent: Microsoft.FSharp.Core.LanguagePrimitives
  isExternal: false
  name: SByteWithMeasure
  nameWithType: LanguagePrimitives.SByteWithMeasure
  fullName: Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Core/LanguagePrimitives.xml
