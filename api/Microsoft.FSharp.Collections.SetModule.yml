### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Collections.SetModule
  commentId: T:Microsoft.FSharp.Collections.SetModule
  id: SetModule
  children:
  - Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Empty``1
  - Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)
  - Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  - Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])
  - Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)
  - Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  - Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  langs:
  - csharp
  name: SetModule
  nameWithType: SetModule
  fullName: Microsoft.FSharp.Collections.SetModule
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      [Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)]

      [Microsoft.FSharp.Core.RequireQualifiedAccess]

      public static class SetModule
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.CompilationRepresentationAttribute
  - type: Microsoft.FSharp.Core.RequireQualifiedAccessAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Add<T>(T, FSharpSet<T>)
  nameWithType: SetModule.Add<T>(T, FSharpSet<T>)
  fullName: SetModule.Add<T>(T, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("add")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Add<T> (T value, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: value
      type: T
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Add``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Contains<T>(T, FSharpSet<T>)
  nameWithType: SetModule.Contains<T>(T, FSharpSet<T>)
  fullName: SetModule.Contains<T>(T, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("contains")]

      public static bool Contains<T> (T element, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: element
      type: T
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Contains``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Count<T>(FSharpSet<T>)
  nameWithType: SetModule.Count<T>(FSharpSet<T>)
  fullName: SetModule.Count<T>(FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("count")]

      public static int Count<T> (Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Count``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Difference<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.Difference<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.Difference<T>(FSharpSet<T>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("difference")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Difference<T> (Microsoft.FSharp.Collections.FSharpSet<T> set1, Microsoft.FSharp.Collections.FSharpSet<T> set2);
    parameters:
    - id: set1
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: set2
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Difference``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Empty``1
  commentId: M:Microsoft.FSharp.Collections.SetModule.Empty``1
  id: Empty``1
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Empty<T>()
  nameWithType: SetModule.Empty<T>()
  fullName: SetModule.Empty<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("empty")]

      [Microsoft.FSharp.Core.GeneralizableValue]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Empty<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Empty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  - type: Microsoft.FSharp.Core.GeneralizableValueAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Exists<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists")]

      public static bool Exists<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Exists``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Filter<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("filter")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Filter<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Filter``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpSet<T>)
  nameWithType: SetModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpSet<T>)
  fullName: SetModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold")]

      public static TState Fold<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>> folder, TState state, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Fold``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)
  commentId: M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)
  id: FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpSet<T>, TState)
  nameWithType: SetModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpSet<T>, TState)
  fullName: SetModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpSet<T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack")]

      public static TState FoldBack<T,TState> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>> folder, Microsoft.FSharp.Collections.FSharpSet<T> set, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.FoldBack``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: ForAll<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall")]

      public static bool ForAll<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.ForAll``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Intersect<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.Intersect<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.Intersect<T>(FSharpSet<T>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("intersect")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Intersect<T> (Microsoft.FSharp.Collections.FSharpSet<T> set1, Microsoft.FSharp.Collections.FSharpSet<T> set2);
    parameters:
    - id: set1
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: set2
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Intersect``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  commentId: M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  id: IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: IntersectMany<T>(IEnumerable<FSharpSet<T>>)
  nameWithType: SetModule.IntersectMany<T>(IEnumerable<FSharpSet<T>>)
  fullName: SetModule.IntersectMany<T>(IEnumerable<FSharpSet<T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("intersectMany")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> IntersectMany<T> (System.Collections.Generic.IEnumerable<Microsoft.FSharp.Collections.FSharpSet<T>> sets);
    parameters:
    - id: sets
      type: System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{T}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.IntersectMany``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  id: IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: IsEmpty<T>(FSharpSet<T>)
  nameWithType: SetModule.IsEmpty<T>(FSharpSet<T>)
  fullName: SetModule.IsEmpty<T>(FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("isEmpty")]

      public static bool IsEmpty<T> (Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.IsEmpty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: IsProperSubset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsProperSubset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsProperSubset<T>(FSharpSet<T>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("isProperSubset")]

      public static bool IsProperSubset<T> (Microsoft.FSharp.Collections.FSharpSet<T> set1, Microsoft.FSharp.Collections.FSharpSet<T> set2);
    parameters:
    - id: set1
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: set2
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.IsProperSubset``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: IsProperSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsProperSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsProperSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("isProperSuperset")]

      public static bool IsProperSuperset<T> (Microsoft.FSharp.Collections.FSharpSet<T> set1, Microsoft.FSharp.Collections.FSharpSet<T> set2);
    parameters:
    - id: set1
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: set2
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: IsSubset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsSubset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsSubset<T>(FSharpSet<T>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("isSubset")]

      public static bool IsSubset<T> (Microsoft.FSharp.Collections.FSharpSet<T> set1, Microsoft.FSharp.Collections.FSharpSet<T> set2);
    parameters:
    - id: set1
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: set2
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.IsSubset``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: IsSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("isSuperset")]

      public static bool IsSuperset<T> (Microsoft.FSharp.Collections.FSharpSet<T> set1, Microsoft.FSharp.Collections.FSharpSet<T> set2);
    parameters:
    - id: set1
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: set2
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.IsSuperset``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Iterate<T>(FSharpFunc<T,Unit>, FSharpSet<T>)
  nameWithType: SetModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpSet<T>)
  fullName: SetModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter")]

      public static void Iterate<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit> action, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Iterate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Map<T,TResult>(FSharpFunc<T,TResult>, FSharpSet<T>)
  nameWithType: SetModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpSet<T>)
  fullName: SetModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map")]

      public static Microsoft.FSharp.Collections.FSharpSet<TResult> Map<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> mapping, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Map``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  id: MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: MaxElement<T>(FSharpSet<T>)
  nameWithType: SetModule.MaxElement<T>(FSharpSet<T>)
  fullName: SetModule.MaxElement<T>(FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("maxElement")]

      public static T MaxElement<T> (Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.MaxElement``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  id: MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: MinElement<T>(FSharpSet<T>)
  nameWithType: SetModule.MinElement<T>(FSharpSet<T>)
  fullName: SetModule.MinElement<T>(FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("minElement")]

      public static T MinElement<T> (Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.MinElement``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])
  id: OfArray``1(``0[])
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: OfArray<T>(T[])
  nameWithType: SetModule.OfArray<T>(T[])
  fullName: SetModule.OfArray<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofArray")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> OfArray<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.OfArray``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: OfList<T>(FSharpList<T>)
  nameWithType: SetModule.OfList<T>(FSharpList<T>)
  fullName: SetModule.OfList<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofList")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> OfList<T> (Microsoft.FSharp.Collections.FSharpList<T> elements);
    parameters:
    - id: elements
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.OfList``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  id: OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: OfSeq<T>(IEnumerable<T>)
  nameWithType: SetModule.OfSeq<T>(IEnumerable<T>)
  fullName: SetModule.OfSeq<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofSeq")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> OfSeq<T> (System.Collections.Generic.IEnumerable<T> elements);
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.OfSeq``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Partition<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("partition")]

      public static Tuple<Microsoft.FSharp.Collections.FSharpSet<T>,Microsoft.FSharp.Collections.FSharpSet<T>> Partition<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Collections.FSharpSet{T},Microsoft.FSharp.Collections.FSharpSet{T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Partition``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Remove<T>(T, FSharpSet<T>)
  nameWithType: SetModule.Remove<T>(T, FSharpSet<T>)
  fullName: SetModule.Remove<T>(T, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("remove")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Remove<T> (T value, Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: value
      type: T
      description: To be added.
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Remove``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)
  commentId: M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)
  id: Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Singleton<T>(T)
  nameWithType: SetModule.Singleton<T>(T)
  fullName: SetModule.Singleton<T>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("singleton")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Singleton<T> (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Singleton``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  id: ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: ToArray<T>(FSharpSet<T>)
  nameWithType: SetModule.ToArray<T>(FSharpSet<T>)
  fullName: SetModule.ToArray<T>(FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toArray")]

      public static T[] ToArray<T> (Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.ToArray``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  id: ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: ToList<T>(FSharpSet<T>)
  nameWithType: SetModule.ToList<T>(FSharpSet<T>)
  fullName: SetModule.ToList<T>(FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toList")]

      public static Microsoft.FSharp.Collections.FSharpList<T> ToList<T> (Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.ToList``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  id: ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: ToSeq<T>(FSharpSet<T>)
  nameWithType: SetModule.ToSeq<T>(FSharpSet<T>)
  fullName: SetModule.ToSeq<T>(FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toSeq")]

      public static System.Collections.Generic.IEnumerable<T> ToSeq<T> (Microsoft.FSharp.Collections.FSharpSet<T> set);
    parameters:
    - id: set
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.ToSeq``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  commentId: M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  id: Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: Union<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.Union<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.Union<T>(FSharpSet<T>, FSharpSet<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("union")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> Union<T> (Microsoft.FSharp.Collections.FSharpSet<T> set1, Microsoft.FSharp.Collections.FSharpSet<T> set2);
    parameters:
    - id: set1
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    - id: set2
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.Union``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  commentId: M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  id: UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  parent: Microsoft.FSharp.Collections.SetModule
  langs:
  - csharp
  name: UnionMany<T>(IEnumerable<FSharpSet<T>>)
  nameWithType: SetModule.UnionMany<T>(IEnumerable<FSharpSet<T>>)
  fullName: SetModule.UnionMany<T>(IEnumerable<FSharpSet<T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("unionMany")]

      public static Microsoft.FSharp.Collections.FSharpSet<T> UnionMany<T> (System.Collections.Generic.IEnumerable<Microsoft.FSharp.Collections.FSharpSet<T>> sets);
    parameters:
    - id: sets
      type: System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{T}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpSet`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SetModule.UnionMany``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Add<T>(T, FSharpSet<T>)
  nameWithType: SetModule.Add<T>(T, FSharpSet<T>)
  fullName: SetModule.Add<T>(T, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.FSharpSet`1
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpSet<T>
  nameWithType: FSharpSet<T>
  fullName: Microsoft.FSharp.Collections.FSharpSet<T>
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Contains<T>(T, FSharpSet<T>)
  nameWithType: SetModule.Contains<T>(T, FSharpSet<T>)
  fullName: SetModule.Contains<T>(T, FSharpSet<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Count<T>(FSharpSet<T>)
  nameWithType: SetModule.Count<T>(FSharpSet<T>)
  fullName: SetModule.Count<T>(FSharpSet<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Difference<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.Difference<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.Difference<T>(FSharpSet<T>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.Empty``1
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Empty<T>()
  nameWithType: SetModule.Empty<T>()
  fullName: SetModule.Empty<T>()
- uid: Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Exists<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.Exists<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Boolean>
  nameWithType: FSharpFunc<T,Boolean>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Filter<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.Filter<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpSet<T>)
  nameWithType: SetModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpSet<T>)
  fullName: SetModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, FSharpSet<T>)
- uid: TState
  isExternal: true
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T,TState>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpSet<T>, TState)
  nameWithType: SetModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpSet<T>, TState)
  fullName: SetModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, FSharpSet<T>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<TState,TState>>
  nameWithType: FSharpFunc<T,FSharpFunc<TState,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ForAll<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.ForAll<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Intersect<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.Intersect<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.Intersect<T>(FSharpSet<T>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IntersectMany<T>(IEnumerable<FSharpSet<T>>)
  nameWithType: SetModule.IntersectMany<T>(IEnumerable<FSharpSet<T>>)
  fullName: SetModule.IntersectMany<T>(IEnumerable<FSharpSet<T>>)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<FSharpSet<T>>
  nameWithType: IEnumerable<FSharpSet<T>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.FSharp.Collections.FSharpSet<T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpSet`1
    name: FSharpSet
    nameWithType: FSharpSet
    fullName: Microsoft.FSharp.Collections.FSharpSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsEmpty<T>(FSharpSet<T>)
  nameWithType: SetModule.IsEmpty<T>(FSharpSet<T>)
  fullName: SetModule.IsEmpty<T>(FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsProperSubset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsProperSubset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsProperSubset<T>(FSharpSet<T>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsProperSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsProperSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsProperSuperset<T>(FSharpSet<T>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsSubset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsSubset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsSubset<T>(FSharpSet<T>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.IsSuperset<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.IsSuperset<T>(FSharpSet<T>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Iterate<T>(FSharpFunc<T,Unit>, FSharpSet<T>)
  nameWithType: SetModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpSet<T>)
  fullName: SetModule.Iterate<T>(FSharpFunc<T,Unit>, FSharpSet<T>)
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Unit>
  nameWithType: FSharpFunc<T,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Map<T,TResult>(FSharpFunc<T,TResult>, FSharpSet<T>)
  nameWithType: SetModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpSet<T>)
  fullName: SetModule.Map<T,TResult>(FSharpFunc<T,TResult>, FSharpSet<T>)
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.FSharp.Collections.FSharpSet{TResult}
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpSet<TResult>
  nameWithType: FSharpSet<TResult>
  fullName: Microsoft.FSharp.Collections.FSharpSet<TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Collections.FSharpSet`1
    name: FSharpSet
    nameWithType: FSharpSet
    fullName: Microsoft.FSharp.Collections.FSharpSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: MaxElement<T>(FSharpSet<T>)
  nameWithType: SetModule.MaxElement<T>(FSharpSet<T>)
  fullName: SetModule.MaxElement<T>(FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: MinElement<T>(FSharpSet<T>)
  nameWithType: SetModule.MinElement<T>(FSharpSet<T>)
  fullName: SetModule.MinElement<T>(FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: OfArray<T>(T[])
  nameWithType: SetModule.OfArray<T>(T[])
  fullName: SetModule.OfArray<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: OfList<T>(FSharpList<T>)
  nameWithType: SetModule.OfList<T>(FSharpList<T>)
  fullName: SetModule.OfList<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList`1
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<T>
  nameWithType: FSharpList<T>
  fullName: Microsoft.FSharp.Collections.FSharpList<T>
- uid: Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: OfSeq<T>(IEnumerable<T>)
  nameWithType: SetModule.OfSeq<T>(IEnumerable<T>)
  fullName: SetModule.OfSeq<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Partition<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  nameWithType: SetModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
  fullName: SetModule.Partition<T>(FSharpFunc<T,Boolean>, FSharpSet<T>)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: System.Tuple{Microsoft.FSharp.Collections.FSharpSet{T},Microsoft.FSharp.Collections.FSharpSet{T}}
  parent: System
  isExternal: false
  name: Tuple<FSharpSet<T>,FSharpSet<T>>
  nameWithType: Tuple<FSharpSet<T>,FSharpSet<T>>
  fullName: System.Tuple<Microsoft.FSharp.Collections.FSharpSet<T>,Microsoft.FSharp.Collections.FSharpSet<T>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Collections.FSharpSet`1
    name: FSharpSet
    nameWithType: FSharpSet
    fullName: Microsoft.FSharp.Collections.FSharpSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Collections.FSharpSet`1
    name: FSharpSet
    nameWithType: FSharpSet
    fullName: Microsoft.FSharp.Collections.FSharpSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Remove<T>(T, FSharpSet<T>)
  nameWithType: SetModule.Remove<T>(T, FSharpSet<T>)
  fullName: SetModule.Remove<T>(T, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Singleton<T>(T)
  nameWithType: SetModule.Singleton<T>(T)
  fullName: SetModule.Singleton<T>(T)
- uid: Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ToArray<T>(FSharpSet<T>)
  nameWithType: SetModule.ToArray<T>(FSharpSet<T>)
  fullName: SetModule.ToArray<T>(FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ToList<T>(FSharpSet<T>)
  nameWithType: SetModule.ToList<T>(FSharpSet<T>)
  fullName: SetModule.ToList<T>(FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ToSeq<T>(FSharpSet<T>)
  nameWithType: SetModule.ToSeq<T>(FSharpSet<T>)
  fullName: SetModule.ToSeq<T>(FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Union<T>(FSharpSet<T>, FSharpSet<T>)
  nameWithType: SetModule.Union<T>(FSharpSet<T>, FSharpSet<T>)
  fullName: SetModule.Union<T>(FSharpSet<T>, FSharpSet<T>)
- uid: Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: UnionMany<T>(IEnumerable<FSharpSet<T>>)
  nameWithType: SetModule.UnionMany<T>(IEnumerable<FSharpSet<T>>)
  fullName: SetModule.UnionMany<T>(IEnumerable<FSharpSet<T>>)
- uid: Microsoft.FSharp.Collections.SetModule.Add``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Add<T>
  nameWithType: SetModule.Add<T>
  fullName: SetModule.Add<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Contains``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Contains<T>
  nameWithType: SetModule.Contains<T>
  fullName: SetModule.Contains<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Count``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Count<T>
  nameWithType: SetModule.Count<T>
  fullName: SetModule.Count<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Difference``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Difference<T>
  nameWithType: SetModule.Difference<T>
  fullName: SetModule.Difference<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Empty``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Empty<T>
  nameWithType: SetModule.Empty<T>
  fullName: SetModule.Empty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Exists``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Exists<T>
  nameWithType: SetModule.Exists<T>
  fullName: SetModule.Exists<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Filter``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Filter<T>
  nameWithType: SetModule.Filter<T>
  fullName: SetModule.Filter<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Fold``2*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Fold<T,TState>
  nameWithType: SetModule.Fold<T,TState>
  fullName: SetModule.Fold<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.FoldBack``2*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: FoldBack<T,TState>
  nameWithType: SetModule.FoldBack<T,TState>
  fullName: SetModule.FoldBack<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ForAll``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ForAll<T>
  nameWithType: SetModule.ForAll<T>
  fullName: SetModule.ForAll<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Intersect``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Intersect<T>
  nameWithType: SetModule.Intersect<T>
  fullName: SetModule.Intersect<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IntersectMany``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IntersectMany<T>
  nameWithType: SetModule.IntersectMany<T>
  fullName: SetModule.IntersectMany<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsEmpty``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsEmpty<T>
  nameWithType: SetModule.IsEmpty<T>
  fullName: SetModule.IsEmpty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsProperSubset``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsProperSubset<T>
  nameWithType: SetModule.IsProperSubset<T>
  fullName: SetModule.IsProperSubset<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsProperSuperset<T>
  nameWithType: SetModule.IsProperSuperset<T>
  fullName: SetModule.IsProperSuperset<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsSubset``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsSubset<T>
  nameWithType: SetModule.IsSubset<T>
  fullName: SetModule.IsSubset<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.IsSuperset``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: IsSuperset<T>
  nameWithType: SetModule.IsSuperset<T>
  fullName: SetModule.IsSuperset<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Iterate``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Iterate<T>
  nameWithType: SetModule.Iterate<T>
  fullName: SetModule.Iterate<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Map``2*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Map<T,TResult>
  nameWithType: SetModule.Map<T,TResult>
  fullName: SetModule.Map<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.MaxElement``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: MaxElement<T>
  nameWithType: SetModule.MaxElement<T>
  fullName: SetModule.MaxElement<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.MinElement``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: MinElement<T>
  nameWithType: SetModule.MinElement<T>
  fullName: SetModule.MinElement<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.OfArray``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: OfArray<T>
  nameWithType: SetModule.OfArray<T>
  fullName: SetModule.OfArray<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.OfList``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: OfList<T>
  nameWithType: SetModule.OfList<T>
  fullName: SetModule.OfList<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.OfSeq``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: OfSeq<T>
  nameWithType: SetModule.OfSeq<T>
  fullName: SetModule.OfSeq<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Partition``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Partition<T>
  nameWithType: SetModule.Partition<T>
  fullName: SetModule.Partition<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Remove``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Remove<T>
  nameWithType: SetModule.Remove<T>
  fullName: SetModule.Remove<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Singleton``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Singleton<T>
  nameWithType: SetModule.Singleton<T>
  fullName: SetModule.Singleton<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ToArray``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ToArray<T>
  nameWithType: SetModule.ToArray<T>
  fullName: SetModule.ToArray<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ToList``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ToList<T>
  nameWithType: SetModule.ToList<T>
  fullName: SetModule.ToList<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.ToSeq``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: ToSeq<T>
  nameWithType: SetModule.ToSeq<T>
  fullName: SetModule.ToSeq<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.Union``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: Union<T>
  nameWithType: SetModule.Union<T>
  fullName: SetModule.Union<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
- uid: Microsoft.FSharp.Collections.SetModule.UnionMany``1*
  parent: Microsoft.FSharp.Collections.SetModule
  isExternal: false
  name: UnionMany<T>
  nameWithType: SetModule.UnionMany<T>
  fullName: SetModule.UnionMany<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SetModule.xml
