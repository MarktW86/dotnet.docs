### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Collections.SeqModule
  commentId: T:Microsoft.FSharp.Collections.SeqModule
  id: SeqModule
  children:
  - Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)
  - Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.ChunkBySize``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})
  - Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Empty``1
  - Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  - Microsoft.FSharp.Collections.SeqModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2)
  - Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Indexed``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  - Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  - Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Item``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  - Microsoft.FSharp.Collections.SeqModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},System.Collections.Generic.IEnumerable{``0},``1)
  - Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])
  - Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  - Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Replicate``1(System.Int32,``0)
  - Microsoft.FSharp.Collections.SeqModule.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  - Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)
  - Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.SortDescending``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.SplitInto``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Tail``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryHead``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryItem``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryLast``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)
  - Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  - Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  langs:
  - csharp
  name: SeqModule
  nameWithType: SeqModule
  fullName: Microsoft.FSharp.Collections.SeqModule
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      [Microsoft.FSharp.Core.CompilationRepresentation(Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix)]

      [Microsoft.FSharp.Core.RequireQualifiedAccess]

      public static class SeqModule
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.CompilationRepresentationAttribute
  - type: Microsoft.FSharp.Core.RequireQualifiedAccessAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Append<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: SeqModule.Append<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Append<T>(IEnumerable<T>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("append")]

      public static System.Collections.Generic.IEnumerable<T> Append<T> (System.Collections.Generic.IEnumerable<T> source1, System.Collections.Generic.IEnumerable<T> source2);
    parameters:
    - id: source1
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Append``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})
  id: Average``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Average<T>(IEnumerable<T>)
  nameWithType: SeqModule.Average<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Average<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("average")]

      public static T Average<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Average``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: AverageBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("averageBy")]

      public static TResult AverageBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.AverageBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})
  id: Cache``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Cache<T>(IEnumerable<T>)
  nameWithType: SeqModule.Cache<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Cache<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("cache")]

      public static System.Collections.Generic.IEnumerable<T> Cache<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Cache``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)
  id: Cast``1(System.Collections.IEnumerable)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Cast<T>(IEnumerable)
  nameWithType: SeqModule.Cast<T>(IEnumerable)
  fullName: Microsoft.FSharp.Collections.SeqModule.Cast<T>(IEnumerable)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("cast")]

      public static System.Collections.Generic.IEnumerable<T> Cast<T> (System.Collections.IEnumerable source);
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Cast``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  id: Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("choose")]

      public static System.Collections.Generic.IEnumerable<TResult> Choose<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Choose``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ChunkBySize``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ChunkBySize``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: ChunkBySize``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ChunkBySize<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.ChunkBySize<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ChunkBySize<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("chunkBySize")]

      public static System.Collections.Generic.IEnumerable<T[]> ChunkBySize<T> (int chunkSize, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: chunkSize
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{T[]}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ChunkBySize``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Collect<T,TCollection,TResult>(FSharpFunc<T,TCollection>, IEnumerable<T>)
  nameWithType: SeqModule.Collect<T,TCollection,TResult>(FSharpFunc<T,TCollection>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Collect<T,TCollection,TResult>(FSharpFunc<T,TCollection>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("collect")]

      public static System.Collections.Generic.IEnumerable<TResult> Collect<T,TCollection,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TCollection> mapping, System.Collections.Generic.IEnumerable<T> source) where TCollection : System.Collections.Generic.IEnumerable<TResult>;
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T,TCollection}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Collect``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>, IEnumerable<T>)
  nameWithType: SeqModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("compareWith")]

      public static int CompareWith<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,int>> comparer, System.Collections.Generic.IEnumerable<T> source1, System.Collections.Generic.IEnumerable<T> source2);
    parameters:
    - id: comparer
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.CompareWith``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})
  id: Concat``2(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Concat<TCollection,T>(IEnumerable<TCollection>)
  nameWithType: SeqModule.Concat<TCollection,T>(IEnumerable<TCollection>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Concat<TCollection,T>(IEnumerable<TCollection>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("concat")]

      public static System.Collections.Generic.IEnumerable<T> Concat<TCollection,T> (System.Collections.Generic.IEnumerable<TCollection> sources) where TCollection : System.Collections.Generic.IEnumerable<T>;
    parameters:
    - id: sources
      type: System.Collections.Generic.IEnumerable{TCollection}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Concat``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  id: Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Contains<T>(T, IEnumerable<T>)
  nameWithType: SeqModule.Contains<T>(T, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Contains<T>(T, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("contains")]

      public static bool Contains<T> (T value, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: value
      type: T
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Contains``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: CountBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("countBy")]

      public static System.Collections.Generic.IEnumerable<Tuple<TKey,int>> CountBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{TKey,System.Int32}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.CountBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})
  id: Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Delay<T>(FSharpFunc<Unit,IEnumerable<T>>)
  nameWithType: SeqModule.Delay<T>(FSharpFunc<Unit,IEnumerable<T>>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Delay<T>(FSharpFunc<Unit,IEnumerable<T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("delay")]

      public static System.Collections.Generic.IEnumerable<T> Delay<T> (Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable<T>> generator);
    parameters:
    - id: generator
      type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{T}}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Delay``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Distinct<T>(IEnumerable<T>)
  nameWithType: SeqModule.Distinct<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Distinct<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("distinct")]

      public static System.Collections.Generic.IEnumerable<T> Distinct<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Distinct``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: DistinctBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("distinctBy")]

      public static System.Collections.Generic.IEnumerable<T> DistinctBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.DistinctBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Empty``1
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Empty``1
  id: Empty``1
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Empty<T>()
  nameWithType: SeqModule.Empty<T>()
  fullName: Microsoft.FSharp.Collections.SeqModule.Empty<T>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("empty")]

      [Microsoft.FSharp.Core.GeneralizableValue]

      public static System.Collections.Generic.IEnumerable<T> Empty<T> ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Empty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  - type: Microsoft.FSharp.Core.GeneralizableValueAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})
  id: ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ExactlyOne<T>(IEnumerable<T>)
  nameWithType: SeqModule.ExactlyOne<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ExactlyOne<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("exactlyOne")]

      public static T ExactlyOne<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Except<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: SeqModule.Except<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Except<T>(IEnumerable<T>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("except")]

      public static System.Collections.Generic.IEnumerable<T> Except<T> (System.Collections.Generic.IEnumerable<T> itemsToExclude, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: itemsToExclude
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Except``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Exists<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Exists<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Exists<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists")]

      public static bool Exists<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Exists``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("exists2")]

      public static bool Exists2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,bool>> predicate, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Exists2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Filter<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Filter<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Filter<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("filter")]

      public static System.Collections.Generic.IEnumerable<T> Filter<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Filter``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Find<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Find<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Find<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("find")]

      public static T Find<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Find``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: FindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.FindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.FindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findBack")]

      public static T FindBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.FindBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: FindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.FindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.FindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findIndex")]

      public static int FindIndex<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.FindIndex``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: FindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("findIndexBack")]

      public static int FindIndexBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.FindIndexBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  id: Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  nameWithType: SeqModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold")]

      public static TState Fold<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>> folder, TState state, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Fold``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("fold2")]

      public static TState Fold2<T1,T2,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TState>>> folder, TState state, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Fold2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  id: FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  nameWithType: SeqModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack")]

      public static TState FoldBack<T,TState> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>> folder, System.Collections.Generic.IEnumerable<T> source, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.FoldBack``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2)
  id: FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, IEnumerable<T1>, IEnumerable<T2>, TState)
  nameWithType: SeqModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, IEnumerable<T1>, IEnumerable<T2>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, IEnumerable<T1>, IEnumerable<T2>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("foldBack2")]

      public static TState FoldBack2<T1,T2,TState> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>> folder, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: TState
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.FoldBack2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ForAll<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.ForAll<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ForAll<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall")]

      public static bool ForAll<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ForAll``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("forall2")]

      public static bool ForAll2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,bool>> predicate, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ForAll2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Get<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Get<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Get<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("nth")]

      [System.Obsolete("please use Seq.item")]

      public static T Get<T> (int index, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Get``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: GroupBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("groupBy")]

      public static System.Collections.Generic.IEnumerable<Tuple<TKey,System.Collections.Generic.IEnumerable<T>>> GroupBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{TKey,System.Collections.Generic.IEnumerable{T}}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.GroupBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})
  id: Head``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Head<T>(IEnumerable<T>)
  nameWithType: SeqModule.Head<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Head<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("head")]

      public static T Head<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Head``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Indexed``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Indexed``1(System.Collections.Generic.IEnumerable{``0})
  id: Indexed``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Indexed<T>(IEnumerable<T>)
  nameWithType: SeqModule.Indexed<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Indexed<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("indexed")]

      public static System.Collections.Generic.IEnumerable<Tuple<int,T>> Indexed<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Indexed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  id: Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Initialize<T>(Int32, FSharpFunc<Int32,T>)
  nameWithType: SeqModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("init")]

      public static System.Collections.Generic.IEnumerable<T> Initialize<T> (int count, Microsoft.FSharp.Core.FSharpFunc<int,T> initializer);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: initializer
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,T}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Initialize``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  id: InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: InitializeInfinite<T>(FSharpFunc<Int32,T>)
  nameWithType: SeqModule.InitializeInfinite<T>(FSharpFunc<Int32,T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.InitializeInfinite<T>(FSharpFunc<Int32,T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("initInfinite")]

      public static System.Collections.Generic.IEnumerable<T> InitializeInfinite<T> (Microsoft.FSharp.Core.FSharpFunc<int,T> initializer);
    parameters:
    - id: initializer
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,T}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  id: IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: SeqModule.IsEmpty<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.IsEmpty<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("isEmpty")]

      public static bool IsEmpty<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.IsEmpty``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Item``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Item``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: Item``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Item<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Item<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Item<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("item")]

      public static T Item<T> (int index, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Item``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})
  id: Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Iterate<T>(FSharpFunc<T,Unit>, IEnumerable<T>)
  nameWithType: SeqModule.Iterate<T>(FSharpFunc<T,Unit>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Iterate<T>(FSharpFunc<T,Unit>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter")]

      public static void Iterate<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit> action, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Iterate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iter2")]

      public static void Iterate2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>> action, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Iterate2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})
  id: IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, IEnumerable<T>)
  nameWithType: SeqModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iteri")]

      public static void IterateIndexed<T> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>> action, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("iteri2")]

      public static void IterateIndexed2<T1,T2> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>> action, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: action
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.IterateIndexed2``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})
  id: Last``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Last<T>(IEnumerable<T>)
  nameWithType: SeqModule.Last<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Last<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("last")]

      public static T Last<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Last``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})
  id: Length``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Length<T>(IEnumerable<T>)
  nameWithType: SeqModule.Length<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Length<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("length")]

      public static int Length<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Length``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Map<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.Map<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Map<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map")]

      public static System.Collections.Generic.IEnumerable<TResult> Map<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> mapping, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Map``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map2")]

      public static System.Collections.Generic.IEnumerable<TResult> Map2<T1,T2,TResult> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>> mapping, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Map2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  id: Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  nameWithType: SeqModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("map3")]

      public static System.Collections.Generic.IEnumerable<TResult> Map3<T1,T2,T3,TResult> (Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>> mapping, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2, System.Collections.Generic.IEnumerable<T3> source3);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    - id: source3
      type: System.Collections.Generic.IEnumerable{T3}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Map3``4*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,System.Collections.Generic.IEnumerable{``0})
  id: MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, IEnumerable<T>)
  nameWithType: SeqModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapFold")]

      public static Tuple<System.Collections.Generic.IEnumerable<TResult>,TState> MapFold<T,TState,TResult> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,Tuple<TResult,TState>>> mapping, TState state, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,System.Tuple{TResult,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Tuple{System.Collections.Generic.IEnumerable{TResult},TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.MapFold``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},System.Collections.Generic.IEnumerable{``0},``1)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},System.Collections.Generic.IEnumerable{``0},``1)
  id: MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},System.Collections.Generic.IEnumerable{``0},``1)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, IEnumerable<T>, TState)
  nameWithType: SeqModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, IEnumerable<T>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, IEnumerable<T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapFoldBack")]

      public static Tuple<System.Collections.Generic.IEnumerable<TResult>,TState> MapFoldBack<T,TState,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,Tuple<TResult,TState>>> mapping, System.Collections.Generic.IEnumerable<T> source, TState state);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,System.Tuple{TResult,TState}}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: System.Tuple{System.Collections.Generic.IEnumerable{TResult},TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.MapFoldBack``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})
  id: MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapi")]

      public static System.Collections.Generic.IEnumerable<TResult> MapIndexed<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T,TResult>> mapping, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.MapIndexed``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("mapi2")]

      public static System.Collections.Generic.IEnumerable<TResult> MapIndexed2<T1,T2,TResult> (Microsoft.FSharp.Core.FSharpFunc<int,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>> mapping, System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: mapping
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}}
      description: To be added.
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.MapIndexed2``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})
  id: Max``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Max<T>(IEnumerable<T>)
  nameWithType: SeqModule.Max<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Max<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("max")]

      public static T Max<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Max``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: MaxBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("maxBy")]

      public static T MaxBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.MaxBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})
  id: Min``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Min<T>(IEnumerable<T>)
  nameWithType: SeqModule.Min<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Min<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("min")]

      public static T Min<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Min``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: MinBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("minBy")]

      public static T MinBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.MinBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])
  commentId: M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])
  id: OfArray``1(``0[])
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: OfArray<T>(T[])
  nameWithType: SeqModule.OfArray<T>(T[])
  fullName: Microsoft.FSharp.Collections.SeqModule.OfArray<T>(T[])
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofArray")]

      public static System.Collections.Generic.IEnumerable<T> OfArray<T> (T[] source);
    parameters:
    - id: source
      type: T[]
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.OfArray``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  id: OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: OfList<T>(FSharpList<T>)
  nameWithType: SeqModule.OfList<T>(FSharpList<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.OfList<T>(FSharpList<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("ofList")]

      public static System.Collections.Generic.IEnumerable<T> OfList<T> (Microsoft.FSharp.Collections.FSharpList<T> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.OfList``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})
  id: Pairwise``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Pairwise<T>(IEnumerable<T>)
  nameWithType: SeqModule.Pairwise<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Pairwise<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("pairwise")]

      public static System.Collections.Generic.IEnumerable<Tuple<T,T>> Pairwise<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{T,T}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Pairwise``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},System.Collections.Generic.IEnumerable{``0})
  id: Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Permute<T>(FSharpFunc<Int32,Int32>, IEnumerable<T>)
  nameWithType: SeqModule.Permute<T>(FSharpFunc<Int32,Int32>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Permute<T>(FSharpFunc<Int32,Int32>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("permute")]

      public static System.Collections.Generic.IEnumerable<T> Permute<T> (Microsoft.FSharp.Core.FSharpFunc<int,int> indexMap, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: indexMap
      type: Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Permute``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  id: Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("pick")]

      public static TResult Pick<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Pick``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})
  id: ReadOnly``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ReadOnly<T>(IEnumerable<T>)
  nameWithType: SeqModule.ReadOnly<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ReadOnly<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("readonly")]

      public static System.Collections.Generic.IEnumerable<T> ReadOnly<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ReadOnly``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  id: Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  nameWithType: SeqModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("reduce")]

      public static T Reduce<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>> reduction, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: reduction
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Reduce``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  id: ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  nameWithType: SeqModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("reduceBack")]

      public static T ReduceBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>> reduction, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: reduction
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ReduceBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Replicate``1(System.Int32,``0)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Replicate``1(System.Int32,``0)
  id: Replicate``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Replicate<T>(Int32, T)
  nameWithType: SeqModule.Replicate<T>(Int32, T)
  fullName: Microsoft.FSharp.Collections.SeqModule.Replicate<T>(Int32, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("replicate")]

      public static System.Collections.Generic.IEnumerable<T> Replicate<T> (int count, T initial);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: initial
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Replicate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  id: Reverse``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Reverse<T>(IEnumerable<T>)
  nameWithType: SeqModule.Reverse<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Reverse<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("rev")]

      public static System.Collections.Generic.IEnumerable<T> Reverse<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Reverse``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  id: Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  nameWithType: SeqModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("scan")]

      public static System.Collections.Generic.IEnumerable<TState> Scan<T,TState> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>> folder, TState state, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Scan``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  id: ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  nameWithType: SeqModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("scanBack")]

      public static System.Collections.Generic.IEnumerable<TState> ScanBack<T,TState> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>> folder, System.Collections.Generic.IEnumerable<T> source, TState state);
    parameters:
    - id: folder
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{TState}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ScanBack``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)
  id: Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Singleton<T>(T)
  nameWithType: SeqModule.Singleton<T>(T)
  fullName: Microsoft.FSharp.Collections.SeqModule.Singleton<T>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("singleton")]

      public static System.Collections.Generic.IEnumerable<T> Singleton<T> (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Singleton``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Skip<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Skip<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Skip<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("skip")]

      public static System.Collections.Generic.IEnumerable<T> Skip<T> (int count, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Skip``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: SkipWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.SkipWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SkipWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("skipWhile")]

      public static System.Collections.Generic.IEnumerable<T> SkipWhile<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.SkipWhile``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})
  id: Sort``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Sort<T>(IEnumerable<T>)
  nameWithType: SeqModule.Sort<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Sort<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sort")]

      public static System.Collections.Generic.IEnumerable<T> Sort<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Sort``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: SortBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortBy")]

      public static System.Collections.Generic.IEnumerable<T> SortBy<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.SortBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: SortByDescending<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortByDescending")]

      public static System.Collections.Generic.IEnumerable<T> SortByDescending<T,TKey> (Microsoft.FSharp.Core.FSharpFunc<T,TKey> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.SortByDescending``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortDescending``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.SortDescending``1(System.Collections.Generic.IEnumerable{``0})
  id: SortDescending``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: SortDescending<T>(IEnumerable<T>)
  nameWithType: SeqModule.SortDescending<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortDescending<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sortDescending")]

      public static System.Collections.Generic.IEnumerable<T> SortDescending<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.SortDescending``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0})
  id: SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>)
  nameWithType: SeqModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sortWith")]

      public static System.Collections.Generic.IEnumerable<T> SortWith<T> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,int>> comparer, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: comparer
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.SortWith``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SplitInto``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.SplitInto``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: SplitInto``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: SplitInto<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.SplitInto<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SplitInto<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("splitInto")]

      public static System.Collections.Generic.IEnumerable<T[]> SplitInto<T> (int count, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{T[]}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.SplitInto``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Sum<T>(IEnumerable<T>)
  nameWithType: SeqModule.Sum<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Sum<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("sum")]

      public static T Sum<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Sum``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  id: SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: SumBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("sumBy")]

      public static TResult SumBy<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: TResult
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.SumBy``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Tail``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Tail``1(System.Collections.Generic.IEnumerable{``0})
  id: Tail``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Tail<T>(IEnumerable<T>)
  nameWithType: SeqModule.Tail<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Tail<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tail")]

      public static System.Collections.Generic.IEnumerable<T> Tail<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Tail``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Take<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Take<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Take<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("take")]

      public static System.Collections.Generic.IEnumerable<T> Take<T> (int count, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Take``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TakeWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TakeWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TakeWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("takeWhile")]

      public static System.Collections.Generic.IEnumerable<T> TakeWhile<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TakeWhile``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  id: ToArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ToArray<T>(IEnumerable<T>)
  nameWithType: SeqModule.ToArray<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ToArray<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toArray")]

      public static T[] ToArray<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: T[]
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ToArray``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})
  id: ToList``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: ToList<T>(IEnumerable<T>)
  nameWithType: SeqModule.ToList<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ToList<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("toList")]

      public static Microsoft.FSharp.Collections.FSharpList<T> ToList<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Collections.FSharpList`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.ToList``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Truncate<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Truncate<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Truncate<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("truncate")]

      public static System.Collections.Generic.IEnumerable<T> Truncate<T> (int count, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: count
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Truncate``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryFind<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFind<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFind<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFind")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryFind<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryFind``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryFindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindBack")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryFindBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryFindBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryFindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindIndex")]

      public static Microsoft.FSharp.Core.FSharpOption<int> TryFindIndex<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryFindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryFindIndexBack")]

      public static Microsoft.FSharp.Core.FSharpOption<int> TryFindIndexBack<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryHead``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryHead``1(System.Collections.Generic.IEnumerable{``0})
  id: TryHead``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryHead<T>(IEnumerable<T>)
  nameWithType: SeqModule.TryHead<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryHead<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tryHead")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryHead<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryHead``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryItem``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryItem``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: TryItem``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryItem<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.TryItem<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryItem<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryItem")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryItem<T> (int index, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryItem``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryLast``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryLast``1(System.Collections.Generic.IEnumerable{``0})
  id: TryLast``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryLast<T>(IEnumerable<T>)
  nameWithType: SeqModule.TryLast<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryLast<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationSourceName("tryLast")]

      public static Microsoft.FSharp.Core.FSharpOption<T> TryLast<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryLast``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  id: TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("tryPick")]

      public static Microsoft.FSharp.Core.FSharpOption<TResult> TryPick<T,TResult> (Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>> chooser, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: chooser
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpOption{TResult}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.TryPick``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)
  id: Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Unfold<TState,T>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  nameWithType: SeqModule.Unfold<TState,T>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.Unfold<TState,T>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("unfold")]

      public static System.Collections.Generic.IEnumerable<T> Unfold<TState,T> (Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpOption<Tuple<T,TState>>> generator, TState state);
    parameters:
    - id: generator
      type: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpOption{System.Tuple{T,TState}}}
      description: To be added.
    - id: state
      type: TState
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Unfold``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  id: Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Where<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Where<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Where<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("where")]

      public static System.Collections.Generic.IEnumerable<T> Where<T> (Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Where``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  id: Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Windowed<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Windowed<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Windowed<T>(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("windowed")]

      public static System.Collections.Generic.IEnumerable<T[]> Windowed<T> (int windowSize, System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: windowSize
      type: System.Int32
      description: To be added.
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{T[]}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Windowed``1*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  id: Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Zip<T1,T2>(IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Zip<T1,T2>(IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Zip<T1,T2>(IEnumerable<T1>, IEnumerable<T2>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("zip")]

      public static System.Collections.Generic.IEnumerable<Tuple<T1,T2>> Zip<T1,T2> (System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2);
    parameters:
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{T1,T2}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Zip``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  commentId: M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  id: Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  parent: Microsoft.FSharp.Collections.SeqModule
  langs:
  - csharp
  name: Zip3<T1,T2,T3>(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  nameWithType: SeqModule.Zip3<T1,T2,T3>(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Zip3<T1,T2,T3>(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Collections
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationArgumentCounts(Mono.Cecil.CustomAttributeArgument[])]

      [Microsoft.FSharp.Core.CompilationSourceName("zip3")]

      public static System.Collections.Generic.IEnumerable<Tuple<T1,T2,T3>> Zip3<T1,T2,T3> (System.Collections.Generic.IEnumerable<T1> source1, System.Collections.Generic.IEnumerable<T2> source2, System.Collections.Generic.IEnumerable<T3> source3);
    parameters:
    - id: source1
      type: System.Collections.Generic.IEnumerable{T1}
      description: To be added.
    - id: source2
      type: System.Collections.Generic.IEnumerable{T2}
      description: To be added.
    - id: source3
      type: System.Collections.Generic.IEnumerable{T3}
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{T1,T2,T3}}
      description: To be added.
  overload: Microsoft.FSharp.Collections.SeqModule.Zip3``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CompilationArgumentCountsAttribute
  - type: Microsoft.FSharp.Core.CompilationSourceNameAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Append<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: SeqModule.Append<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Append<T>(IEnumerable<T>, IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Average<T>(IEnumerable<T>)
  nameWithType: SeqModule.Average<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Average<T>(IEnumerable<T>)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: AverageBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.AverageBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Cache<T>(IEnumerable<T>)
  nameWithType: SeqModule.Cache<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Cache<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Cast<T>(IEnumerable)
  nameWithType: SeqModule.Cast<T>(IEnumerable)
  fullName: Microsoft.FSharp.Collections.SeqModule.Cast<T>(IEnumerable)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Choose<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable{TResult}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpOption{TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpOption<TResult>>
  nameWithType: FSharpFunc<T,FSharpOption<TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpOption<TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.ChunkBySize``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ChunkBySize<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.ChunkBySize<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ChunkBySize<T>(Int32, IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable{T[]}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T[]>
  nameWithType: IEnumerable<T[]>
  fullName: System.Collections.Generic.IEnumerable<T[]>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Collect<T,TCollection,TResult>(FSharpFunc<T,TCollection>, IEnumerable<T>)
  nameWithType: SeqModule.Collect<T,TCollection,TResult>(FSharpFunc<T,TCollection>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Collect<T,TCollection,TResult>(FSharpFunc<T,TCollection>, IEnumerable<T>)
- uid: TCollection
  name: TCollection
  nameWithType: TCollection
  fullName: TCollection
- uid: Microsoft.FSharp.Core.FSharpFunc{T,TCollection}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TCollection>
  nameWithType: FSharpFunc<T,TCollection>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TCollection>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TCollection
    name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>, IEnumerable<T>)
  nameWithType: SeqModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.CompareWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,System.Int32}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<T,Int32>>
  nameWithType: FSharpFunc<T,FSharpFunc<T,Int32>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,System.Int32>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Concat<TCollection,T>(IEnumerable<TCollection>)
  nameWithType: SeqModule.Concat<TCollection,T>(IEnumerable<TCollection>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Concat<TCollection,T>(IEnumerable<TCollection>)
- uid: System.Collections.Generic.IEnumerable{TCollection}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TCollection>
  nameWithType: IEnumerable<TCollection>
  fullName: System.Collections.Generic.IEnumerable<TCollection>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TCollection
    name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Contains<T>(T, IEnumerable<T>)
  nameWithType: SeqModule.Contains<T>(T, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Contains<T>(T, IEnumerable<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: CountBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.CountBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IEnumerable{System.Tuple{TKey,System.Int32}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<TKey,Int32>>
  nameWithType: IEnumerable<Tuple<TKey,Int32>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<TKey,System.Int32>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TKey>
  nameWithType: FSharpFunc<T,TKey>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TKey>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Delay<T>(FSharpFunc<Unit,IEnumerable<T>>)
  nameWithType: SeqModule.Delay<T>(FSharpFunc<Unit,IEnumerable<T>>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Delay<T>(FSharpFunc<Unit,IEnumerable<T>>)
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{T}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Unit,IEnumerable<T>>
  nameWithType: FSharpFunc<Unit,IEnumerable<T>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable<T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Distinct<T>(IEnumerable<T>)
  nameWithType: SeqModule.Distinct<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Distinct<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: DistinctBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.DistinctBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Empty``1
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Empty<T>()
  nameWithType: SeqModule.Empty<T>()
  fullName: Microsoft.FSharp.Collections.SeqModule.Empty<T>()
- uid: Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ExactlyOne<T>(IEnumerable<T>)
  nameWithType: SeqModule.ExactlyOne<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ExactlyOne<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Except<T>(IEnumerable<T>, IEnumerable<T>)
  nameWithType: SeqModule.Except<T>(IEnumerable<T>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Except<T>(IEnumerable<T>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Exists<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Exists<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Exists<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Boolean>
  nameWithType: FSharpFunc<T,Boolean>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Exists2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,System.Boolean}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,Boolean>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,Boolean>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,System.Boolean>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{T1}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T1>
  nameWithType: IEnumerable<T1>
  fullName: System.Collections.Generic.IEnumerable<T1>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{T2}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T2>
  nameWithType: IEnumerable<T2>
  fullName: System.Collections.Generic.IEnumerable<T2>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Filter<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Filter<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Filter<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Find<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Find<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Find<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.FindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.FindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.FindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.FindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.FindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.FindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.FindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  nameWithType: SeqModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Fold<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
- uid: TState
  isExternal: true
  name: TState
  nameWithType: TState
  fullName: TState
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T,TState>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Fold2<T1,T2,TState>(FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>, TState, IEnumerable<T1>, IEnumerable<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T1,FSharpFunc<T2,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  nameWithType: SeqModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.FoldBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<TState,TState>>
  nameWithType: FSharpFunc<T,FSharpFunc<TState,TState>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, IEnumerable<T1>, IEnumerable<T2>, TState)
  nameWithType: SeqModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, IEnumerable<T1>, IEnumerable<T2>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.FoldBack2<T1,T2,TState>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>, IEnumerable<T1>, IEnumerable<T2>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{TState,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<TState,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<TState,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ForAll<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.ForAll<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ForAll<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ForAll2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Boolean>>, IEnumerable<T1>, IEnumerable<T2>)
- uid: Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Get<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Get<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Get<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: GroupBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.GroupBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable{System.Tuple{TKey,System.Collections.Generic.IEnumerable{T}}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<TKey,IEnumerable<T>>>
  nameWithType: IEnumerable<Tuple<TKey,IEnumerable<T>>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<TKey,System.Collections.Generic.IEnumerable<T>>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Head<T>(IEnumerable<T>)
  nameWithType: SeqModule.Head<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Head<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Indexed``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Indexed<T>(IEnumerable<T>)
  nameWithType: SeqModule.Indexed<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Indexed<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<Int32,T>>
  nameWithType: IEnumerable<Tuple<Int32,T>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<System.Int32,T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Initialize<T>(Int32, FSharpFunc<Int32,T>)
  nameWithType: SeqModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Initialize<T>(Int32, FSharpFunc<Int32,T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,T}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,T>
  nameWithType: FSharpFunc<Int32,T>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: InitializeInfinite<T>(FSharpFunc<Int32,T>)
  nameWithType: SeqModule.InitializeInfinite<T>(FSharpFunc<Int32,T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.InitializeInfinite<T>(FSharpFunc<Int32,T>)
- uid: Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: IsEmpty<T>(IEnumerable<T>)
  nameWithType: SeqModule.IsEmpty<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.IsEmpty<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Item``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Item<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Item<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Item<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Iterate<T>(FSharpFunc<T,Unit>, IEnumerable<T>)
  nameWithType: SeqModule.Iterate<T>(FSharpFunc<T,Unit>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Iterate<T>(FSharpFunc<T,Unit>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Unit>
  nameWithType: FSharpFunc<T,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Iterate2<T1,T2>(FSharpFunc<T1,FSharpFunc<T2,Unit>>, IEnumerable<T1>, IEnumerable<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,Unit>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, IEnumerable<T>)
  nameWithType: SeqModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.IterateIndexed<T>(FSharpFunc<Int32,FSharpFunc<T,Unit>>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T,Unit>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.IterateIndexed2<T1,T2>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>, IEnumerable<T1>, IEnumerable<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.Unit}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,Unit>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.Unit>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Last<T>(IEnumerable<T>)
  nameWithType: SeqModule.Last<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Last<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Length<T>(IEnumerable<T>)
  nameWithType: SeqModule.Length<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Length<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Map<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.Map<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Map<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Map2<T1,T2,TResult>(FSharpFunc<T1,FSharpFunc<T2,TResult>>, IEnumerable<T1>, IEnumerable<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  nameWithType: SeqModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Map3<T1,T2,T3,TResult>(FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>, IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,Microsoft.FSharp.Core.FSharpFunc{T3,TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  nameWithType: FSharpFunc<T1,FSharpFunc<T2,FSharpFunc<T3,TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,Microsoft.FSharp.Core.FSharpFunc<T3,TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{T3}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T3>
  nameWithType: IEnumerable<T3>
  fullName: System.Collections.Generic.IEnumerable<T3>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.MapFold``3(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{``2,``1}}},``1,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, IEnumerable<T>)
  nameWithType: SeqModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapFold<T,TState,TResult>(FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>, TState, IEnumerable<T>)
- uid: System.Tuple{System.Collections.Generic.IEnumerable{TResult},TState}
  parent: System
  isExternal: false
  name: Tuple<IEnumerable<TResult>,TState>
  nameWithType: Tuple<IEnumerable<TResult>,TState>
  fullName: System.Tuple<System.Collections.Generic.IEnumerable<TResult>,TState>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpFunc{T,System.Tuple{TResult,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>
  nameWithType: FSharpFunc<TState,FSharpFunc<T,Tuple<TResult,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpFunc<T,System.Tuple<TResult,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.MapFoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Tuple{``2,``1}}},System.Collections.Generic.IEnumerable{``0},``1)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, IEnumerable<T>, TState)
  nameWithType: SeqModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, IEnumerable<T>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapFoldBack<T,TState,TResult>(FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>, IEnumerable<T>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{TState,System.Tuple{TResult,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>
  nameWithType: FSharpFunc<T,FSharpFunc<TState,Tuple<TResult,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<TState,System.Tuple<TResult,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapIndexed<T,TResult>(FSharpFunc<Int32,FSharpFunc<T,TResult>>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T,TResult>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MapIndexed2<T1,T2,TResult>(FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>, IEnumerable<T1>, IEnumerable<T2>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{T1,Microsoft.FSharp.Core.FSharpFunc{T2,TResult}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>
  nameWithType: FSharpFunc<Int32,FSharpFunc<T1,FSharpFunc<T2,TResult>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,Microsoft.FSharp.Core.FSharpFunc<T1,Microsoft.FSharp.Core.FSharpFunc<T2,TResult>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Max<T>(IEnumerable<T>)
  nameWithType: SeqModule.Max<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Max<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MaxBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MaxBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Min<T>(IEnumerable<T>)
  nameWithType: SeqModule.Min<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Min<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MinBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.MinBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: OfArray<T>(T[])
  nameWithType: SeqModule.OfArray<T>(T[])
  fullName: Microsoft.FSharp.Collections.SeqModule.OfArray<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: OfList<T>(FSharpList<T>)
  nameWithType: SeqModule.OfList<T>(FSharpList<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.OfList<T>(FSharpList<T>)
- uid: Microsoft.FSharp.Collections.FSharpList`1
  parent: Microsoft.FSharp.Collections
  isExternal: false
  name: FSharpList<T>
  nameWithType: FSharpList<T>
  fullName: Microsoft.FSharp.Collections.FSharpList<T>
- uid: Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Pairwise<T>(IEnumerable<T>)
  nameWithType: SeqModule.Pairwise<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Pairwise<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable{System.Tuple{T,T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<T,T>>
  nameWithType: IEnumerable<Tuple<T,T>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<T,T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Permute<T>(FSharpFunc<Int32,Int32>, IEnumerable<T>)
  nameWithType: SeqModule.Permute<T>(FSharpFunc<Int32,Int32>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Permute<T>(FSharpFunc<Int32,Int32>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Int32,Int32>
  nameWithType: FSharpFunc<Int32,Int32>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Int32,System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Pick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ReadOnly<T>(IEnumerable<T>)
  nameWithType: SeqModule.ReadOnly<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ReadOnly<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  nameWithType: SeqModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Reduce<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.FSharpFunc{T,T}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,FSharpFunc<T,T>>
  nameWithType: FSharpFunc<T,FSharpFunc<T,T>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.FSharpFunc<T,T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  nameWithType: SeqModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ReduceBack<T>(FSharpFunc<T,FSharpFunc<T,T>>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Replicate``1(System.Int32,``0)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Replicate<T>(Int32, T)
  nameWithType: SeqModule.Replicate<T>(Int32, T)
  fullName: Microsoft.FSharp.Collections.SeqModule.Replicate<T>(Int32, T)
- uid: Microsoft.FSharp.Collections.SeqModule.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Reverse<T>(IEnumerable<T>)
  nameWithType: SeqModule.Reverse<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Reverse<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  nameWithType: SeqModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Scan<T,TState>(FSharpFunc<TState,FSharpFunc<T,TState>>, TState, IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable{TState}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TState>
  nameWithType: IEnumerable<TState>
  fullName: System.Collections.Generic.IEnumerable<TState>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},System.Collections.Generic.IEnumerable{``0},``1)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  nameWithType: SeqModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.ScanBack<T,TState>(FSharpFunc<T,FSharpFunc<TState,TState>>, IEnumerable<T>, TState)
- uid: Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Singleton<T>(T)
  nameWithType: SeqModule.Singleton<T>(T)
  fullName: Microsoft.FSharp.Collections.SeqModule.Singleton<T>(T)
- uid: Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Skip<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Skip<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Skip<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SkipWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.SkipWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SkipWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Sort<T>(IEnumerable<T>)
  nameWithType: SeqModule.Sort<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Sort<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortBy<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.SortByDescending``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortByDescending<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  nameWithType: SeqModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortByDescending<T,TKey>(FSharpFunc<T,TKey>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.SortDescending``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortDescending<T>(IEnumerable<T>)
  nameWithType: SeqModule.SortDescending<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortDescending<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>)
  nameWithType: SeqModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SortWith<T>(FSharpFunc<T,FSharpFunc<T,Int32>>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.SplitInto``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SplitInto<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.SplitInto<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SplitInto<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Sum<T>(IEnumerable<T>)
  nameWithType: SeqModule.Sum<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Sum<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SumBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  nameWithType: SeqModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.SumBy<T,TResult>(FSharpFunc<T,TResult>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Tail``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Tail<T>(IEnumerable<T>)
  nameWithType: SeqModule.Tail<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Tail<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Take<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Take<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Take<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TakeWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TakeWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TakeWhile<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ToArray<T>(IEnumerable<T>)
  nameWithType: SeqModule.ToArray<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ToArray<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ToList<T>(IEnumerable<T>)
  nameWithType: SeqModule.ToList<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.ToList<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Truncate<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Truncate<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Truncate<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFind<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFind<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFind<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindIndex<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpOption{System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<Int32>
  nameWithType: FSharpOption<Int32>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TryHead``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryHead<T>(IEnumerable<T>)
  nameWithType: SeqModule.TryHead<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryHead<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TryItem``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryItem<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.TryItem<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryItem<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TryLast``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryLast<T>(IEnumerable<T>)
  nameWithType: SeqModule.TryLast<T>(IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryLast<T>(IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  nameWithType: SeqModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.TryPick<T,TResult>(FSharpFunc<T,FSharpOption<TResult>>, IEnumerable<T>)
- uid: Microsoft.FSharp.Core.FSharpOption{TResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<TResult>
  nameWithType: FSharpOption<TResult>
  fullName: Microsoft.FSharp.Core.FSharpOption<TResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Unfold<TState,T>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  nameWithType: SeqModule.Unfold<TState,T>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
  fullName: Microsoft.FSharp.Collections.SeqModule.Unfold<TState,T>(FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>, TState)
- uid: Microsoft.FSharp.Core.FSharpFunc{TState,Microsoft.FSharp.Core.FSharpOption{System.Tuple{T,TState}}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>
  nameWithType: FSharpFunc<TState,FSharpOption<Tuple<T,TState>>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TState,Microsoft.FSharp.Core.FSharpOption<System.Tuple<T,TState>>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TState
    name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Where<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  nameWithType: SeqModule.Where<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Where<T>(FSharpFunc<T,Boolean>, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Windowed<T>(Int32, IEnumerable<T>)
  nameWithType: SeqModule.Windowed<T>(Int32, IEnumerable<T>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Windowed<T>(Int32, IEnumerable<T>)
- uid: Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Zip<T1,T2>(IEnumerable<T1>, IEnumerable<T2>)
  nameWithType: SeqModule.Zip<T1,T2>(IEnumerable<T1>, IEnumerable<T2>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Zip<T1,T2>(IEnumerable<T1>, IEnumerable<T2>)
- uid: System.Collections.Generic.IEnumerable{System.Tuple{T1,T2}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<T1,T2>>
  nameWithType: IEnumerable<Tuple<T1,T2>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<T1,T2>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Zip3<T1,T2,T3>(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  nameWithType: SeqModule.Zip3<T1,T2,T3>(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
  fullName: Microsoft.FSharp.Collections.SeqModule.Zip3<T1,T2,T3>(IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>)
- uid: System.Tuple`3
  name: Tuple<T1,T2,T3>
  nameWithType: Tuple<T1,T2,T3>
  fullName: System.Tuple<T1,T2,T3>
- uid: System.Collections.Generic.IEnumerable{System.Tuple{T1,T2,T3}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<T1,T2,T3>>
  nameWithType: IEnumerable<Tuple<T1,T2,T3>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<T1,T2,T3>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Collections.SeqModule.Append``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Append<T>
  nameWithType: SeqModule.Append<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Append<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Average``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Average<T>
  nameWithType: SeqModule.Average<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Average<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.AverageBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: AverageBy<T,TResult>
  nameWithType: SeqModule.AverageBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.AverageBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Cache``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Cache<T>
  nameWithType: SeqModule.Cache<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Cache<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Cast``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Cast<T>
  nameWithType: SeqModule.Cast<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Cast<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Choose``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Choose<T,TResult>
  nameWithType: SeqModule.Choose<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.Choose<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ChunkBySize``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ChunkBySize<T>
  nameWithType: SeqModule.ChunkBySize<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.ChunkBySize<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Collect``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Collect<T,TCollection,TResult>
  nameWithType: SeqModule.Collect<T,TCollection,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.Collect<T,TCollection,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.CompareWith``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: CompareWith<T>
  nameWithType: SeqModule.CompareWith<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.CompareWith<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Concat``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Concat<TCollection,T>
  nameWithType: SeqModule.Concat<TCollection,T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Concat<TCollection,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Contains``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Contains<T>
  nameWithType: SeqModule.Contains<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Contains<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.CountBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: CountBy<T,TKey>
  nameWithType: SeqModule.CountBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.SeqModule.CountBy<T,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Delay``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Delay<T>
  nameWithType: SeqModule.Delay<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Delay<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Distinct``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Distinct<T>
  nameWithType: SeqModule.Distinct<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Distinct<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.DistinctBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: DistinctBy<T,TKey>
  nameWithType: SeqModule.DistinctBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.SeqModule.DistinctBy<T,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Empty``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Empty<T>
  nameWithType: SeqModule.Empty<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Empty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ExactlyOne<T>
  nameWithType: SeqModule.ExactlyOne<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.ExactlyOne<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Except``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Except<T>
  nameWithType: SeqModule.Except<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Except<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Exists``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Exists<T>
  nameWithType: SeqModule.Exists<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Exists<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Exists2``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Exists2<T1,T2>
  nameWithType: SeqModule.Exists2<T1,T2>
  fullName: Microsoft.FSharp.Collections.SeqModule.Exists2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Filter``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Filter<T>
  nameWithType: SeqModule.Filter<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Filter<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Find``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Find<T>
  nameWithType: SeqModule.Find<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Find<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FindBack``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FindBack<T>
  nameWithType: SeqModule.FindBack<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.FindBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FindIndex``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FindIndex<T>
  nameWithType: SeqModule.FindIndex<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.FindIndex<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FindIndexBack``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FindIndexBack<T>
  nameWithType: SeqModule.FindIndexBack<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.FindIndexBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Fold``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Fold<T,TState>
  nameWithType: SeqModule.Fold<T,TState>
  fullName: Microsoft.FSharp.Collections.SeqModule.Fold<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Fold2``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Fold2<T1,T2,TState>
  nameWithType: SeqModule.Fold2<T1,T2,TState>
  fullName: Microsoft.FSharp.Collections.SeqModule.Fold2<T1,T2,TState>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FoldBack``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FoldBack<T,TState>
  nameWithType: SeqModule.FoldBack<T,TState>
  fullName: Microsoft.FSharp.Collections.SeqModule.FoldBack<T,TState>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.FoldBack2``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: FoldBack2<T1,T2,TState>
  nameWithType: SeqModule.FoldBack2<T1,T2,TState>
  fullName: Microsoft.FSharp.Collections.SeqModule.FoldBack2<T1,T2,TState>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ForAll``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ForAll<T>
  nameWithType: SeqModule.ForAll<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.ForAll<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ForAll2``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ForAll2<T1,T2>
  nameWithType: SeqModule.ForAll2<T1,T2>
  fullName: Microsoft.FSharp.Collections.SeqModule.ForAll2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Get``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Get<T>
  nameWithType: SeqModule.Get<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Get<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.GroupBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: GroupBy<T,TKey>
  nameWithType: SeqModule.GroupBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.SeqModule.GroupBy<T,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Head``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Head<T>
  nameWithType: SeqModule.Head<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Head<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Indexed``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Indexed<T>
  nameWithType: SeqModule.Indexed<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Indexed<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Initialize``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Initialize<T>
  nameWithType: SeqModule.Initialize<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Initialize<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: InitializeInfinite<T>
  nameWithType: SeqModule.InitializeInfinite<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.InitializeInfinite<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.IsEmpty``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: IsEmpty<T>
  nameWithType: SeqModule.IsEmpty<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.IsEmpty<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Item``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Item<T>
  nameWithType: SeqModule.Item<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Item<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Iterate``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Iterate<T>
  nameWithType: SeqModule.Iterate<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Iterate<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Iterate2``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Iterate2<T1,T2>
  nameWithType: SeqModule.Iterate2<T1,T2>
  fullName: Microsoft.FSharp.Collections.SeqModule.Iterate2<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: IterateIndexed<T>
  nameWithType: SeqModule.IterateIndexed<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.IterateIndexed<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.IterateIndexed2``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: IterateIndexed2<T1,T2>
  nameWithType: SeqModule.IterateIndexed2<T1,T2>
  fullName: Microsoft.FSharp.Collections.SeqModule.IterateIndexed2<T1,T2>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Last``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Last<T>
  nameWithType: SeqModule.Last<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Last<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Length``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Length<T>
  nameWithType: SeqModule.Length<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Length<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Map``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Map<T,TResult>
  nameWithType: SeqModule.Map<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.Map<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Map2``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Map2<T1,T2,TResult>
  nameWithType: SeqModule.Map2<T1,T2,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.Map2<T1,T2,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Map3``4*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Map3<T1,T2,T3,TResult>
  nameWithType: SeqModule.Map3<T1,T2,T3,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.Map3<T1,T2,T3,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapFold``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapFold<T,TState,TResult>
  nameWithType: SeqModule.MapFold<T,TState,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.MapFold<T,TState,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapFoldBack``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapFoldBack<T,TState,TResult>
  nameWithType: SeqModule.MapFoldBack<T,TState,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.MapFoldBack<T,TState,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapIndexed``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapIndexed<T,TResult>
  nameWithType: SeqModule.MapIndexed<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.MapIndexed<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MapIndexed2``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MapIndexed2<T1,T2,TResult>
  nameWithType: SeqModule.MapIndexed2<T1,T2,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.MapIndexed2<T1,T2,TResult>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Max``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Max<T>
  nameWithType: SeqModule.Max<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Max<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MaxBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MaxBy<T,TResult>
  nameWithType: SeqModule.MaxBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.MaxBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Min``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Min<T>
  nameWithType: SeqModule.Min<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Min<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.MinBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: MinBy<T,TResult>
  nameWithType: SeqModule.MinBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.MinBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.OfArray``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: OfArray<T>
  nameWithType: SeqModule.OfArray<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.OfArray<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.OfList``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: OfList<T>
  nameWithType: SeqModule.OfList<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.OfList<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Pairwise``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Pairwise<T>
  nameWithType: SeqModule.Pairwise<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Pairwise<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Permute``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Permute<T>
  nameWithType: SeqModule.Permute<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Permute<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Pick``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Pick<T,TResult>
  nameWithType: SeqModule.Pick<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.Pick<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ReadOnly``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ReadOnly<T>
  nameWithType: SeqModule.ReadOnly<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.ReadOnly<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Reduce``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Reduce<T>
  nameWithType: SeqModule.Reduce<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Reduce<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ReduceBack``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ReduceBack<T>
  nameWithType: SeqModule.ReduceBack<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.ReduceBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Replicate``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Replicate<T>
  nameWithType: SeqModule.Replicate<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Replicate<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Reverse``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Reverse<T>
  nameWithType: SeqModule.Reverse<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Reverse<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Scan``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Scan<T,TState>
  nameWithType: SeqModule.Scan<T,TState>
  fullName: Microsoft.FSharp.Collections.SeqModule.Scan<T,TState>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ScanBack``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ScanBack<T,TState>
  nameWithType: SeqModule.ScanBack<T,TState>
  fullName: Microsoft.FSharp.Collections.SeqModule.ScanBack<T,TState>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Singleton``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Singleton<T>
  nameWithType: SeqModule.Singleton<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Singleton<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Skip``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Skip<T>
  nameWithType: SeqModule.Skip<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Skip<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SkipWhile``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SkipWhile<T>
  nameWithType: SeqModule.SkipWhile<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.SkipWhile<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Sort``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Sort<T>
  nameWithType: SeqModule.Sort<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Sort<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortBy<T,TKey>
  nameWithType: SeqModule.SortBy<T,TKey>
  fullName: Microsoft.FSharp.Collections.SeqModule.SortBy<T,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortByDescending``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortByDescending<T,TKey>
  nameWithType: SeqModule.SortByDescending<T,TKey>
  fullName: Microsoft.FSharp.Collections.SeqModule.SortByDescending<T,TKey>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortDescending``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortDescending<T>
  nameWithType: SeqModule.SortDescending<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.SortDescending<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SortWith``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SortWith<T>
  nameWithType: SeqModule.SortWith<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.SortWith<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SplitInto``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SplitInto<T>
  nameWithType: SeqModule.SplitInto<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.SplitInto<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Sum``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Sum<T>
  nameWithType: SeqModule.Sum<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Sum<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.SumBy``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: SumBy<T,TResult>
  nameWithType: SeqModule.SumBy<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.SumBy<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Tail``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Tail<T>
  nameWithType: SeqModule.Tail<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Tail<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Take``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Take<T>
  nameWithType: SeqModule.Take<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Take<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TakeWhile``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TakeWhile<T>
  nameWithType: SeqModule.TakeWhile<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TakeWhile<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ToArray``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ToArray<T>
  nameWithType: SeqModule.ToArray<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.ToArray<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.ToList``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: ToList<T>
  nameWithType: SeqModule.ToList<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.ToList<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Truncate``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Truncate<T>
  nameWithType: SeqModule.Truncate<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Truncate<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFind``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFind<T>
  nameWithType: SeqModule.TryFind<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFind<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindBack``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFindBack<T>
  nameWithType: SeqModule.TryFindBack<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFindIndex<T>
  nameWithType: SeqModule.TryFindIndex<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindIndex<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryFindIndexBack<T>
  nameWithType: SeqModule.TryFindIndexBack<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryFindIndexBack<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryHead``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryHead<T>
  nameWithType: SeqModule.TryHead<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryHead<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryItem``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryItem<T>
  nameWithType: SeqModule.TryItem<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryItem<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryLast``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryLast<T>
  nameWithType: SeqModule.TryLast<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryLast<T>
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.TryPick``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: TryPick<T,TResult>
  nameWithType: SeqModule.TryPick<T,TResult>
  fullName: Microsoft.FSharp.Collections.SeqModule.TryPick<T,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Unfold``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Unfold<TState,T>
  nameWithType: SeqModule.Unfold<TState,T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Unfold<TState,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Where``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Where<T>
  nameWithType: SeqModule.Where<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Where<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Windowed``1*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Windowed<T>
  nameWithType: SeqModule.Windowed<T>
  fullName: Microsoft.FSharp.Collections.SeqModule.Windowed<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Zip``2*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Zip<T1,T2>
  nameWithType: SeqModule.Zip<T1,T2>
  fullName: Microsoft.FSharp.Collections.SeqModule.Zip<T1,T2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
- uid: Microsoft.FSharp.Collections.SeqModule.Zip3``3*
  parent: Microsoft.FSharp.Collections.SeqModule
  isExternal: false
  name: Zip3<T1,T2,T3>
  nameWithType: SeqModule.Zip3<T1,T2,T3>
  fullName: Microsoft.FSharp.Collections.SeqModule.Zip3<T1,T2,T3>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Collections/SeqModule.xml
