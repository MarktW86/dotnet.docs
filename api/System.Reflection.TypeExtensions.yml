### YamlMime:ManagedReference
items:
- uid: System.Reflection.TypeExtensions
  commentId: T:System.Reflection.TypeExtensions
  id: TypeExtensions
  children:
  - System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  - System.Reflection.TypeExtensions.GetConstructors(System.Type)
  - System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetEvents(System.Type)
  - System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetFields(System.Type)
  - System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  - System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMembers(System.Type)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  - System.Reflection.TypeExtensions.GetMethods(System.Type)
  - System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperties(System.Type)
  - System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  - System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  - System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  langs:
  - csharp
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: System.Reflection.TypeExtensions
  type: Class
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static class TypeExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  commentId: M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  id: GetConstructor(System.Type,System.Type[])
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetConstructor(Type, Type[])
  nameWithType: TypeExtensions.GetConstructor(Type, Type[])
  fullName: TypeExtensions.GetConstructor(Type, Type[])
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.ConstructorInfo GetConstructor (this Type type, Type[] types);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    return:
      type: System.Reflection.ConstructorInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetConstructor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetConstructors(System.Type)
  id: GetConstructors(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetConstructors(Type)
  nameWithType: TypeExtensions.GetConstructors(Type)
  fullName: TypeExtensions.GetConstructors(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.ConstructorInfo[] GetConstructors (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.ConstructorInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetConstructors*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  id: GetConstructors(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetConstructors(Type, BindingFlags)
  nameWithType: TypeExtensions.GetConstructors(Type, BindingFlags)
  fullName: TypeExtensions.GetConstructors(Type, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.ConstructorInfo[] GetConstructors (this Type type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.ConstructorInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetConstructors*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  id: GetDefaultMembers(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetDefaultMembers(Type)
  nameWithType: TypeExtensions.GetDefaultMembers(Type)
  fullName: TypeExtensions.GetDefaultMembers(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MemberInfo[] GetDefaultMembers (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.MemberInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetDefaultMembers*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  id: GetEvent(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetEvent(Type, String)
  nameWithType: TypeExtensions.GetEvent(Type, String)
  fullName: TypeExtensions.GetEvent(Type, String)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.EventInfo GetEvent (this Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    return:
      type: System.Reflection.EventInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetEvent*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetEvent(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetEvent(Type, String, BindingFlags)
  fullName: TypeExtensions.GetEvent(Type, String, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.EventInfo GetEvent (this Type type, string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.EventInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetEvent*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetEvents(System.Type)
  id: GetEvents(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetEvents(Type)
  nameWithType: TypeExtensions.GetEvents(Type)
  fullName: TypeExtensions.GetEvents(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.EventInfo[] GetEvents (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.EventInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetEvents*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  id: GetEvents(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetEvents(Type, BindingFlags)
  nameWithType: TypeExtensions.GetEvents(Type, BindingFlags)
  fullName: TypeExtensions.GetEvents(Type, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.EventInfo[] GetEvents (this Type type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.EventInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetEvents*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetField(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetField(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetField(Type, String, BindingFlags)
  fullName: TypeExtensions.GetField(Type, String, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.FieldInfo GetField (this Type type, string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.FieldInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetField*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  id: GetField(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetField(Type, String)
  nameWithType: TypeExtensions.GetField(Type, String)
  fullName: TypeExtensions.GetField(Type, String)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.FieldInfo GetField (this Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    return:
      type: System.Reflection.FieldInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetField*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetFields(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetFields(System.Type)
  id: GetFields(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetFields(Type)
  nameWithType: TypeExtensions.GetFields(Type)
  fullName: TypeExtensions.GetFields(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.FieldInfo[] GetFields (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.FieldInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetFields*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  id: GetFields(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetFields(Type, BindingFlags)
  nameWithType: TypeExtensions.GetFields(Type, BindingFlags)
  fullName: TypeExtensions.GetFields(Type, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.FieldInfo[] GetFields (this Type type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.FieldInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetFields*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  id: GetGenericArguments(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetGenericArguments(Type)
  nameWithType: TypeExtensions.GetGenericArguments(Type)
  fullName: TypeExtensions.GetGenericArguments(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type[] GetGenericArguments (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Type[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetGenericArguments*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  id: GetInterfaces(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetInterfaces(Type)
  nameWithType: TypeExtensions.GetInterfaces(Type)
  fullName: TypeExtensions.GetInterfaces(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type[] GetInterfaces (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Type[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetInterfaces*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  id: GetMember(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMember(Type, String)
  nameWithType: TypeExtensions.GetMember(Type, String)
  fullName: TypeExtensions.GetMember(Type, String)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MemberInfo[] GetMember (this Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    return:
      type: System.Reflection.MemberInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMember*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMember(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMember(Type, String, BindingFlags)
  fullName: TypeExtensions.GetMember(Type, String, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MemberInfo[] GetMember (this Type type, string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.MemberInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMember*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  id: GetMembers(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMembers(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMembers(Type, BindingFlags)
  fullName: TypeExtensions.GetMembers(Type, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MemberInfo[] GetMembers (this Type type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.MemberInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMembers*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetMembers(System.Type)
  id: GetMembers(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMembers(Type)
  nameWithType: TypeExtensions.GetMembers(Type)
  fullName: TypeExtensions.GetMembers(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MemberInfo[] GetMembers (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.MemberInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMembers*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  id: GetMethod(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMethod(Type, String)
  nameWithType: TypeExtensions.GetMethod(Type, String)
  fullName: TypeExtensions.GetMethod(Type, String)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MethodInfo GetMethod (this Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    return:
      type: System.Reflection.MethodInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMethod*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMethod(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMethod(Type, String, BindingFlags)
  fullName: TypeExtensions.GetMethod(Type, String, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MethodInfo GetMethod (this Type type, string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.MethodInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMethod*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  id: GetMethod(System.Type,System.String,System.Type[])
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMethod(Type, String, Type[])
  nameWithType: TypeExtensions.GetMethod(Type, String, Type[])
  fullName: TypeExtensions.GetMethod(Type, String, Type[])
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MethodInfo GetMethod (this Type type, string name, Type[] types);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    return:
      type: System.Reflection.MethodInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMethod*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetMethods(System.Type)
  id: GetMethods(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMethods(Type)
  nameWithType: TypeExtensions.GetMethods(Type)
  fullName: TypeExtensions.GetMethods(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MethodInfo[] GetMethods (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.MethodInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMethods*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  id: GetMethods(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetMethods(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMethods(Type, BindingFlags)
  fullName: TypeExtensions.GetMethods(Type, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.MethodInfo[] GetMethods (this Type type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.MethodInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetMethods*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetNestedType(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetNestedType(Type, String, BindingFlags)
  fullName: TypeExtensions.GetNestedType(Type, String, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type GetNestedType (this Type type, string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Type
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetNestedType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetNestedTypes(Type, BindingFlags)
  nameWithType: TypeExtensions.GetNestedTypes(Type, BindingFlags)
  fullName: TypeExtensions.GetNestedTypes(Type, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type[] GetNestedTypes (this Type type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Type[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetNestedTypes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetProperties(System.Type)
  id: GetProperties(System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetProperties(Type)
  nameWithType: TypeExtensions.GetProperties(Type)
  fullName: TypeExtensions.GetProperties(Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo[] GetProperties (this Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetProperties*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  id: GetProperties(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetProperties(Type, BindingFlags)
  nameWithType: TypeExtensions.GetProperties(Type, BindingFlags)
  fullName: TypeExtensions.GetProperties(Type, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo[] GetProperties (this Type type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo[]
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetProperties*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  id: GetProperty(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetProperty(Type, String)
  nameWithType: TypeExtensions.GetProperty(Type, String)
  fullName: TypeExtensions.GetProperty(Type, String)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo GetProperty (this Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetProperty*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetProperty(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetProperty(Type, String, BindingFlags)
  fullName: TypeExtensions.GetProperty(Type, String, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo GetProperty (this Type type, string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetProperty*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  id: GetProperty(System.Type,System.String,System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetProperty(Type, String, Type)
  nameWithType: TypeExtensions.GetProperty(Type, String, Type)
  fullName: TypeExtensions.GetProperty(Type, String, Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo GetProperty (this Type type, string name, Type returnType);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: returnType
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetProperty*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  id: GetProperty(System.Type,System.String,System.Type,System.Type[])
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: GetProperty(Type, String, Type, Type[])
  nameWithType: TypeExtensions.GetProperty(Type, String, Type, Type[])
  fullName: TypeExtensions.GetProperty(Type, String, Type, Type[])
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo GetProperty (this Type type, string name, Type returnType, Type[] types);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: returnType
      type: System.Type
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo
      description: To be added.
  overload: System.Reflection.TypeExtensions.GetProperty*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  commentId: M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  id: IsAssignableFrom(System.Type,System.Type)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: IsAssignableFrom(Type, Type)
  nameWithType: TypeExtensions.IsAssignableFrom(Type, Type)
  fullName: TypeExtensions.IsAssignableFrom(Type, Type)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static bool IsAssignableFrom (this Type type, Type c);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: c
      type: System.Type
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Reflection.TypeExtensions.IsAssignableFrom*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  commentId: M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  id: IsInstanceOfType(System.Type,System.Object)
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  name: IsInstanceOfType(Type, Object)
  nameWithType: TypeExtensions.IsInstanceOfType(Type, Object)
  fullName: TypeExtensions.IsInstanceOfType(Type, Object)
  type: Method
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static bool IsInstanceOfType (this Type type, object o);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: o
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Reflection.TypeExtensions.IsInstanceOfType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructor(Type, Type[])
  nameWithType: TypeExtensions.GetConstructor(Type, Type[])
  fullName: TypeExtensions.GetConstructor(Type, Type[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructors(Type)
  nameWithType: TypeExtensions.GetConstructors(Type)
  fullName: TypeExtensions.GetConstructors(Type)
- uid: System.Reflection.ConstructorInfo[]
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo[]
  nameWithType: ConstructorInfo[]
  fullName: System.Reflection.ConstructorInfo[]
  spec.csharp:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructors(Type, BindingFlags)
  nameWithType: TypeExtensions.GetConstructors(Type, BindingFlags)
  fullName: TypeExtensions.GetConstructors(Type, BindingFlags)
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetDefaultMembers(Type)
  nameWithType: TypeExtensions.GetDefaultMembers(Type)
  fullName: TypeExtensions.GetDefaultMembers(Type)
- uid: System.Reflection.MemberInfo
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: false
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvent(Type, String)
  nameWithType: TypeExtensions.GetEvent(Type, String)
  fullName: TypeExtensions.GetEvent(Type, String)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvent(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetEvent(Type, String, BindingFlags)
  fullName: TypeExtensions.GetEvent(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvents(Type)
  nameWithType: TypeExtensions.GetEvents(Type)
  fullName: TypeExtensions.GetEvents(Type)
- uid: System.Reflection.EventInfo[]
  parent: System.Reflection
  isExternal: false
  name: EventInfo[]
  nameWithType: EventInfo[]
  fullName: System.Reflection.EventInfo[]
  spec.csharp:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvents(Type, BindingFlags)
  nameWithType: TypeExtensions.GetEvents(Type, BindingFlags)
  fullName: TypeExtensions.GetEvents(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetField(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetField(Type, String, BindingFlags)
  fullName: TypeExtensions.GetField(Type, String, BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetField(Type, String)
  nameWithType: TypeExtensions.GetField(Type, String)
  fullName: TypeExtensions.GetField(Type, String)
- uid: System.Reflection.TypeExtensions.GetFields(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetFields(Type)
  nameWithType: TypeExtensions.GetFields(Type)
  fullName: TypeExtensions.GetFields(Type)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: false
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetFields(Type, BindingFlags)
  nameWithType: TypeExtensions.GetFields(Type, BindingFlags)
  fullName: TypeExtensions.GetFields(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetGenericArguments(Type)
  nameWithType: TypeExtensions.GetGenericArguments(Type)
  fullName: TypeExtensions.GetGenericArguments(Type)
- uid: System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetInterfaces(Type)
  nameWithType: TypeExtensions.GetInterfaces(Type)
  fullName: TypeExtensions.GetInterfaces(Type)
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMember(Type, String)
  nameWithType: TypeExtensions.GetMember(Type, String)
  fullName: TypeExtensions.GetMember(Type, String)
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMember(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMember(Type, String, BindingFlags)
  fullName: TypeExtensions.GetMember(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMembers(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMembers(Type, BindingFlags)
  fullName: TypeExtensions.GetMembers(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMembers(Type)
  nameWithType: TypeExtensions.GetMembers(Type)
  fullName: TypeExtensions.GetMembers(Type)
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethod(Type, String)
  nameWithType: TypeExtensions.GetMethod(Type, String)
  fullName: TypeExtensions.GetMethod(Type, String)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethod(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMethod(Type, String, BindingFlags)
  fullName: TypeExtensions.GetMethod(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethod(Type, String, Type[])
  nameWithType: TypeExtensions.GetMethod(Type, String, Type[])
  fullName: TypeExtensions.GetMethod(Type, String, Type[])
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethods(Type)
  nameWithType: TypeExtensions.GetMethods(Type)
  fullName: TypeExtensions.GetMethods(Type)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: false
  name: MethodInfo[]
  nameWithType: MethodInfo[]
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethods(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMethods(Type, BindingFlags)
  fullName: TypeExtensions.GetMethods(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetNestedType(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetNestedType(Type, String, BindingFlags)
  fullName: TypeExtensions.GetNestedType(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetNestedTypes(Type, BindingFlags)
  nameWithType: TypeExtensions.GetNestedTypes(Type, BindingFlags)
  fullName: TypeExtensions.GetNestedTypes(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperties(Type)
  nameWithType: TypeExtensions.GetProperties(Type)
  fullName: TypeExtensions.GetProperties(Type)
- uid: System.Reflection.PropertyInfo
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperties(Type, BindingFlags)
  nameWithType: TypeExtensions.GetProperties(Type, BindingFlags)
  fullName: TypeExtensions.GetProperties(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String)
  nameWithType: TypeExtensions.GetProperty(Type, String)
  fullName: TypeExtensions.GetProperty(Type, String)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetProperty(Type, String, BindingFlags)
  fullName: TypeExtensions.GetProperty(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String, Type)
  nameWithType: TypeExtensions.GetProperty(Type, String, Type)
  fullName: TypeExtensions.GetProperty(Type, String, Type)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String, Type, Type[])
  nameWithType: TypeExtensions.GetProperty(Type, String, Type, Type[])
  fullName: TypeExtensions.GetProperty(Type, String, Type, Type[])
- uid: System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: IsAssignableFrom(Type, Type)
  nameWithType: TypeExtensions.IsAssignableFrom(Type, Type)
  fullName: TypeExtensions.IsAssignableFrom(Type, Type)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: IsInstanceOfType(Type, Object)
  nameWithType: TypeExtensions.IsInstanceOfType(Type, Object)
  fullName: TypeExtensions.IsInstanceOfType(Type, Object)
- uid: System.Reflection.TypeExtensions.GetConstructor*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructor
  nameWithType: TypeExtensions.GetConstructor
  fullName: TypeExtensions.GetConstructor
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetConstructors*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructors
  nameWithType: TypeExtensions.GetConstructors
  fullName: TypeExtensions.GetConstructors
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetDefaultMembers*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetDefaultMembers
  nameWithType: TypeExtensions.GetDefaultMembers
  fullName: TypeExtensions.GetDefaultMembers
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetEvent*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvent
  nameWithType: TypeExtensions.GetEvent
  fullName: TypeExtensions.GetEvent
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetEvents*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvents
  nameWithType: TypeExtensions.GetEvents
  fullName: TypeExtensions.GetEvents
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetField*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetField
  nameWithType: TypeExtensions.GetField
  fullName: TypeExtensions.GetField
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetFields*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetFields
  nameWithType: TypeExtensions.GetFields
  fullName: TypeExtensions.GetFields
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetGenericArguments*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetGenericArguments
  nameWithType: TypeExtensions.GetGenericArguments
  fullName: TypeExtensions.GetGenericArguments
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetInterfaces*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetInterfaces
  nameWithType: TypeExtensions.GetInterfaces
  fullName: TypeExtensions.GetInterfaces
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMember*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMember
  nameWithType: TypeExtensions.GetMember
  fullName: TypeExtensions.GetMember
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMembers*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMembers
  nameWithType: TypeExtensions.GetMembers
  fullName: TypeExtensions.GetMembers
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMethod*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethod
  nameWithType: TypeExtensions.GetMethod
  fullName: TypeExtensions.GetMethod
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetMethods*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethods
  nameWithType: TypeExtensions.GetMethods
  fullName: TypeExtensions.GetMethods
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetNestedType*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetNestedType
  nameWithType: TypeExtensions.GetNestedType
  fullName: TypeExtensions.GetNestedType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetNestedTypes*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetNestedTypes
  nameWithType: TypeExtensions.GetNestedTypes
  fullName: TypeExtensions.GetNestedTypes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperties*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperties
  nameWithType: TypeExtensions.GetProperties
  fullName: TypeExtensions.GetProperties
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.GetProperty*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty
  nameWithType: TypeExtensions.GetProperty
  fullName: TypeExtensions.GetProperty
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.IsAssignableFrom*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: IsAssignableFrom
  nameWithType: TypeExtensions.IsAssignableFrom
  fullName: TypeExtensions.IsAssignableFrom
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
- uid: System.Reflection.TypeExtensions.IsInstanceOfType*
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: IsInstanceOfType
  nameWithType: TypeExtensions.IsInstanceOfType
  fullName: TypeExtensions.IsInstanceOfType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeExtensions.xml
