### YamlMime:ManagedReference
items:
- uid: Mono.CodeGeneration.CodeExpression
  commentId: T:Mono.CodeGeneration.CodeExpression
  id: CodeExpression
  children:
  - Mono.CodeGeneration.CodeExpression.#ctor
  - Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.ArrayLength
  - Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.CallToString
  - Mono.CodeGeneration.CodeExpression.CastTo(System.Type)
  - Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeExpression.GetResultType
  - Mono.CodeGeneration.CodeExpression.Is(System.Type)
  - Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsNull
  - Mono.CodeGeneration.CodeExpression.IsNumber
  - Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.String)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.String)
  - Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.NullValue(System.Type)
  - Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  langs:
  - csharp
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: Mono.CodeGeneration.CodeExpression
  type: Class
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: 'public abstract class CodeExpression : Mono.CodeGeneration.CodeItem'
  inheritance:
  - System.Object
  - Mono.CodeGeneration.CodeItem
  derivedClasses:
  - Mono.CodeGeneration.CodeAddOne
  - Mono.CodeGeneration.CodeArgument
  - Mono.CodeGeneration.CodeArithmeticOperation
  - Mono.CodeGeneration.CodeArrayLength
  - Mono.CodeGeneration.CodeAssignment
  - Mono.CodeGeneration.CodeCast
  - Mono.CodeGeneration.CodeConditionExpression
  - Mono.CodeGeneration.CodeLiteral
  - Mono.CodeGeneration.CodeMethodCall
  - Mono.CodeGeneration.CodeNeg
  - Mono.CodeGeneration.CodeNew
  - Mono.CodeGeneration.CodeNewArray
  - Mono.CodeGeneration.CodeSelfIncrement
  - Mono.CodeGeneration.CodeSubstractOne
  - Mono.CodeGeneration.CodeValueReference
  - Mono.CodeGeneration.CodeWhen
  implements: []
  inheritedMembers:
  - Mono.CodeGeneration.CodeItem.Generate(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeItem.PrintCode(Mono.CodeGeneration.CodeWriter)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.#ctor
  commentId: M:Mono.CodeGeneration.CodeExpression.#ctor
  id: '#ctor'
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: CodeExpression()
  nameWithType: CodeExpression.CodeExpression()
  fullName: Mono.CodeGeneration.CodeExpression.CodeExpression()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: protected CodeExpression ();
    parameters: []
  overload: Mono.CodeGeneration.CodeExpression.#ctor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Add(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Add(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Add(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression Add (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Add*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)
  id: And(Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: And(CodeExpression)
  nameWithType: CodeExpression.And(CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.And(CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression And (Mono.CodeGeneration.CodeExpression other);
    parameters:
    - id: other
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.And*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: AreEqual(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.AreEqual(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.AreEqual(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression AreEqual (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.AreEqual*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: AreNotEqual(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.AreNotEqual(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.AreNotEqual(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression AreNotEqual (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.AreNotEqual*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.ArrayLength
  commentId: P:Mono.CodeGeneration.CodeExpression.ArrayLength
  id: ArrayLength
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: ArrayLength
  nameWithType: CodeExpression.ArrayLength
  fullName: Mono.CodeGeneration.CodeExpression.ArrayLength
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression ArrayLength { get; }
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.ArrayLength*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  commentId: M:Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  id: Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Call(MethodInfo, CodeExpression[])
  nameWithType: CodeExpression.Call(MethodInfo, CodeExpression[])
  fullName: Mono.CodeGeneration.CodeExpression.Call(MethodInfo, CodeExpression[])
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression Call (System.Reflection.MethodInfo method, Mono.CodeGeneration.CodeExpression[] parameters);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: To be added.
    - id: parameters
      type: Mono.CodeGeneration.CodeExpression[]
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Call*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])
  commentId: M:Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])
  id: Call(System.String,Mono.CodeGeneration.CodeExpression[])
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Call(String, CodeExpression[])
  nameWithType: CodeExpression.Call(String, CodeExpression[])
  fullName: Mono.CodeGeneration.CodeExpression.Call(String, CodeExpression[])
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression Call (string name, Mono.CodeGeneration.CodeExpression[] parameters);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: parameters
      type: Mono.CodeGeneration.CodeExpression[]
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Call*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.CallToString
  commentId: M:Mono.CodeGeneration.CodeExpression.CallToString
  id: CallToString
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: CallToString()
  nameWithType: CodeExpression.CallToString()
  fullName: Mono.CodeGeneration.CodeExpression.CallToString()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression CallToString ();
    parameters: []
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.CallToString*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.CastTo(System.Type)
  commentId: M:Mono.CodeGeneration.CodeExpression.CastTo(System.Type)
  id: CastTo(System.Type)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: CastTo(Type)
  nameWithType: CodeExpression.CastTo(Type)
  fullName: Mono.CodeGeneration.CodeExpression.CastTo(Type)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression CastTo (Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.CastTo*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Divide(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Divide(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Divide(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression Divide (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Divide*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  commentId: M:Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  id: GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: GenerateAsStatement(ILGenerator)
  nameWithType: CodeExpression.GenerateAsStatement(ILGenerator)
  fullName: Mono.CodeGeneration.CodeExpression.GenerateAsStatement(ILGenerator)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public virtual void GenerateAsStatement (System.Reflection.Emit.ILGenerator gen);
    parameters:
    - id: gen
      type: System.Reflection.Emit.ILGenerator
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.GenerateAsStatement*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.GetResultType
  commentId: M:Mono.CodeGeneration.CodeExpression.GetResultType
  id: GetResultType
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: GetResultType()
  nameWithType: CodeExpression.GetResultType()
  fullName: Mono.CodeGeneration.CodeExpression.GetResultType()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public abstract Type GetResultType ();
    parameters: []
    return:
      type: System.Type
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.GetResultType*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Is(System.Type)
  commentId: M:Mono.CodeGeneration.CodeExpression.Is(System.Type)
  id: Is(System.Type)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Is(Type)
  nameWithType: CodeExpression.Is(Type)
  fullName: Mono.CodeGeneration.CodeExpression.Is(Type)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression Is (Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Is*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: IsGreaterEqualThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsGreaterEqualThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression IsGreaterEqualThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: IsGreaterThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsGreaterThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsGreaterThan(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression IsGreaterThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.IsGreaterThan*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsNull
  commentId: P:Mono.CodeGeneration.CodeExpression.IsNull
  id: IsNull
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: IsNull
  nameWithType: CodeExpression.IsNull
  fullName: Mono.CodeGeneration.CodeExpression.IsNull
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeExpression IsNull { get; }
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.IsNull*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsNumber
  commentId: P:Mono.CodeGeneration.CodeExpression.IsNumber
  id: IsNumber
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: IsNumber
  nameWithType: CodeExpression.IsNumber
  fullName: Mono.CodeGeneration.CodeExpression.IsNumber
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public bool IsNumber { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.IsNumber*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: IsSmallerEqualThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsSmallerEqualThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression IsSmallerEqualThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: IsSmallerThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsSmallerThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsSmallerThan(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression IsSmallerThan (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.IsSmallerThan*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)
  commentId: P:Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)
  id: Item(Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Item(CodeExpression)
  nameWithType: CodeExpression.Item(CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Item(CodeExpression)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeValueReference this[Mono.CodeGeneration.CodeExpression index] { get; }
    parameters:
    - id: index
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeValueReference
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Item*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)
  commentId: P:Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)
  id: Item(System.Reflection.FieldInfo)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Item(FieldInfo)
  nameWithType: CodeExpression.Item(FieldInfo)
  fullName: Mono.CodeGeneration.CodeExpression.Item(FieldInfo)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeValueReference this[System.Reflection.FieldInfo field] { get; }
    parameters:
    - id: field
      type: System.Reflection.FieldInfo
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeValueReference
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Item*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)
  commentId: P:Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)
  id: Item(System.Reflection.PropertyInfo)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Item(PropertyInfo)
  nameWithType: CodeExpression.Item(PropertyInfo)
  fullName: Mono.CodeGeneration.CodeExpression.Item(PropertyInfo)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeValueReference this[System.Reflection.PropertyInfo prop] { get; }
    parameters:
    - id: prop
      type: System.Reflection.PropertyInfo
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeValueReference
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Item*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Item(System.String)
  commentId: P:Mono.CodeGeneration.CodeExpression.Item(System.String)
  id: Item(System.String)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Item(String)
  nameWithType: CodeExpression.Item(String)
  fullName: Mono.CodeGeneration.CodeExpression.Item(String)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeValueReference this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeValueReference
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Item*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)
  commentId: M:Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)
  id: MemGet(System.Reflection.MemberInfo)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: MemGet(MemberInfo)
  nameWithType: CodeExpression.MemGet(MemberInfo)
  fullName: Mono.CodeGeneration.CodeExpression.MemGet(MemberInfo)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeValueReference MemGet (System.Reflection.MemberInfo member);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeValueReference
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.MemGet*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.MemGet(System.String)
  commentId: M:Mono.CodeGeneration.CodeExpression.MemGet(System.String)
  id: MemGet(System.String)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: MemGet(String)
  nameWithType: CodeExpression.MemGet(String)
  fullName: Mono.CodeGeneration.CodeExpression.MemGet(String)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public Mono.CodeGeneration.CodeValueReference MemGet (string name);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeValueReference
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.MemGet*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Multiply(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Multiply(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Multiply(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression Multiply (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Multiply*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)
  id: Not(Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Not(CodeExpression)
  nameWithType: CodeExpression.Not(CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Not(CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression Not (Mono.CodeGeneration.CodeExpression e);
    parameters:
    - id: e
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Not*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.NullValue(System.Type)
  commentId: M:Mono.CodeGeneration.CodeExpression.NullValue(System.Type)
  id: NullValue(System.Type)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: NullValue(Type)
  nameWithType: CodeExpression.NullValue(Type)
  fullName: Mono.CodeGeneration.CodeExpression.NullValue(Type)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression NullValue (Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.NullValue*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  langs:
  - csharp
  name: Subtract(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Subtract(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Subtract(CodeExpression, CodeExpression)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public static Mono.CodeGeneration.CodeExpression Subtract (Mono.CodeGeneration.CodeExpression e1, Mono.CodeGeneration.CodeExpression e2);
    parameters:
    - id: e1
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: e2
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    return:
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeExpression.Subtract*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
references:
- uid: Mono.CodeGeneration.CodeItem
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeItem
  nameWithType: CodeItem
  fullName: Mono.CodeGeneration.CodeItem
- uid: Mono.CodeGeneration.CodeExpression.#ctor
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: CodeExpression()
  nameWithType: CodeExpression.CodeExpression()
  fullName: Mono.CodeGeneration.CodeExpression.CodeExpression()
- uid: Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Add(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Add(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Add(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: Mono.CodeGeneration.CodeExpression
- uid: Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: And(CodeExpression)
  nameWithType: CodeExpression.And(CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.And(CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: AreEqual(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.AreEqual(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.AreEqual(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: AreNotEqual(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.AreNotEqual(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.AreNotEqual(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.ArrayLength
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: ArrayLength
  nameWithType: CodeExpression.ArrayLength
  fullName: Mono.CodeGeneration.CodeExpression.ArrayLength
- uid: Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Call(MethodInfo, CodeExpression[])
  nameWithType: CodeExpression.Call(MethodInfo, CodeExpression[])
  fullName: Mono.CodeGeneration.CodeExpression.Call(MethodInfo, CodeExpression[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Mono.CodeGeneration.CodeExpression[]
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeExpression[]
  nameWithType: CodeExpression[]
  fullName: Mono.CodeGeneration.CodeExpression[]
  spec.csharp:
  - uid: Mono.CodeGeneration.CodeExpression
    name: CodeExpression
    nameWithType: CodeExpression
    fullName: Mono.CodeGeneration.CodeExpression
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Call(String, CodeExpression[])
  nameWithType: CodeExpression.Call(String, CodeExpression[])
  fullName: Mono.CodeGeneration.CodeExpression.Call(String, CodeExpression[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mono.CodeGeneration.CodeExpression.CallToString
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: CallToString()
  nameWithType: CodeExpression.CallToString()
  fullName: Mono.CodeGeneration.CodeExpression.CallToString()
- uid: Mono.CodeGeneration.CodeExpression.CastTo(System.Type)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: CastTo(Type)
  nameWithType: CodeExpression.CastTo(Type)
  fullName: Mono.CodeGeneration.CodeExpression.CastTo(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Divide(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Divide(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Divide(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: GenerateAsStatement(ILGenerator)
  nameWithType: CodeExpression.GenerateAsStatement(ILGenerator)
  fullName: Mono.CodeGeneration.CodeExpression.GenerateAsStatement(ILGenerator)
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: Mono.CodeGeneration.CodeExpression.GetResultType
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: GetResultType()
  nameWithType: CodeExpression.GetResultType()
  fullName: Mono.CodeGeneration.CodeExpression.GetResultType()
- uid: Mono.CodeGeneration.CodeExpression.Is(System.Type)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Is(Type)
  nameWithType: CodeExpression.Is(Type)
  fullName: Mono.CodeGeneration.CodeExpression.Is(Type)
- uid: Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsGreaterEqualThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsGreaterEqualThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsGreaterThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsGreaterThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsGreaterThan(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.IsNull
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsNull
  nameWithType: CodeExpression.IsNull
  fullName: Mono.CodeGeneration.CodeExpression.IsNull
- uid: Mono.CodeGeneration.CodeExpression.IsNumber
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsNumber
  nameWithType: CodeExpression.IsNumber
  fullName: Mono.CodeGeneration.CodeExpression.IsNumber
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsSmallerEqualThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsSmallerEqualThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsSmallerThan(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.IsSmallerThan(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.IsSmallerThan(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Item(CodeExpression)
  nameWithType: CodeExpression.Item(CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Item(CodeExpression)
- uid: Mono.CodeGeneration.CodeValueReference
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeValueReference
  nameWithType: CodeValueReference
  fullName: Mono.CodeGeneration.CodeValueReference
- uid: Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Item(FieldInfo)
  nameWithType: CodeExpression.Item(FieldInfo)
  fullName: Mono.CodeGeneration.CodeExpression.Item(FieldInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Item(PropertyInfo)
  nameWithType: CodeExpression.Item(PropertyInfo)
  fullName: Mono.CodeGeneration.CodeExpression.Item(PropertyInfo)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: Mono.CodeGeneration.CodeExpression.Item(System.String)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Item(String)
  nameWithType: CodeExpression.Item(String)
  fullName: Mono.CodeGeneration.CodeExpression.Item(String)
- uid: Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: MemGet(MemberInfo)
  nameWithType: CodeExpression.MemGet(MemberInfo)
  fullName: Mono.CodeGeneration.CodeExpression.MemGet(MemberInfo)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: Mono.CodeGeneration.CodeExpression.MemGet(System.String)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: MemGet(String)
  nameWithType: CodeExpression.MemGet(String)
  fullName: Mono.CodeGeneration.CodeExpression.MemGet(String)
- uid: Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Multiply(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Multiply(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Multiply(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Not(CodeExpression)
  nameWithType: CodeExpression.Not(CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Not(CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.NullValue(System.Type)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: NullValue(Type)
  nameWithType: CodeExpression.NullValue(Type)
  fullName: Mono.CodeGeneration.CodeExpression.NullValue(Type)
- uid: Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Subtract(CodeExpression, CodeExpression)
  nameWithType: CodeExpression.Subtract(CodeExpression, CodeExpression)
  fullName: Mono.CodeGeneration.CodeExpression.Subtract(CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeExpression.#ctor*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression.CodeExpression
  fullName: Mono.CodeGeneration.CodeExpression.CodeExpression
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Add*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Add
  nameWithType: CodeExpression.Add
  fullName: Mono.CodeGeneration.CodeExpression.Add
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.And*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: And
  nameWithType: CodeExpression.And
  fullName: Mono.CodeGeneration.CodeExpression.And
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.AreEqual*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: AreEqual
  nameWithType: CodeExpression.AreEqual
  fullName: Mono.CodeGeneration.CodeExpression.AreEqual
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.AreNotEqual*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: AreNotEqual
  nameWithType: CodeExpression.AreNotEqual
  fullName: Mono.CodeGeneration.CodeExpression.AreNotEqual
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.ArrayLength*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: ArrayLength
  nameWithType: CodeExpression.ArrayLength
  fullName: Mono.CodeGeneration.CodeExpression.ArrayLength
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Call*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Call
  nameWithType: CodeExpression.Call
  fullName: Mono.CodeGeneration.CodeExpression.Call
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.CallToString*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: CallToString
  nameWithType: CodeExpression.CallToString
  fullName: Mono.CodeGeneration.CodeExpression.CallToString
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.CastTo*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: CastTo
  nameWithType: CodeExpression.CastTo
  fullName: Mono.CodeGeneration.CodeExpression.CastTo
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Divide*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Divide
  nameWithType: CodeExpression.Divide
  fullName: Mono.CodeGeneration.CodeExpression.Divide
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.GenerateAsStatement*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: GenerateAsStatement
  nameWithType: CodeExpression.GenerateAsStatement
  fullName: Mono.CodeGeneration.CodeExpression.GenerateAsStatement
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.GetResultType*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: GetResultType
  nameWithType: CodeExpression.GetResultType
  fullName: Mono.CodeGeneration.CodeExpression.GetResultType
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Is*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Is
  nameWithType: CodeExpression.Is
  fullName: Mono.CodeGeneration.CodeExpression.Is
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsGreaterEqualThan
  nameWithType: CodeExpression.IsGreaterEqualThan
  fullName: Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsGreaterThan*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsGreaterThan
  nameWithType: CodeExpression.IsGreaterThan
  fullName: Mono.CodeGeneration.CodeExpression.IsGreaterThan
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsNull*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsNull
  nameWithType: CodeExpression.IsNull
  fullName: Mono.CodeGeneration.CodeExpression.IsNull
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsNumber*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsNumber
  nameWithType: CodeExpression.IsNumber
  fullName: Mono.CodeGeneration.CodeExpression.IsNumber
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsSmallerEqualThan
  nameWithType: CodeExpression.IsSmallerEqualThan
  fullName: Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.IsSmallerThan*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: IsSmallerThan
  nameWithType: CodeExpression.IsSmallerThan
  fullName: Mono.CodeGeneration.CodeExpression.IsSmallerThan
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Item*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Item
  nameWithType: CodeExpression.Item
  fullName: Mono.CodeGeneration.CodeExpression.Item
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.MemGet*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: MemGet
  nameWithType: CodeExpression.MemGet
  fullName: Mono.CodeGeneration.CodeExpression.MemGet
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Multiply*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Multiply
  nameWithType: CodeExpression.Multiply
  fullName: Mono.CodeGeneration.CodeExpression.Multiply
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Not*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Not
  nameWithType: CodeExpression.Not
  fullName: Mono.CodeGeneration.CodeExpression.Not
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.NullValue*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: NullValue
  nameWithType: CodeExpression.NullValue
  fullName: Mono.CodeGeneration.CodeExpression.NullValue
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
- uid: Mono.CodeGeneration.CodeExpression.Subtract*
  parent: Mono.CodeGeneration.CodeExpression
  isExternal: false
  name: Subtract
  nameWithType: CodeExpression.Subtract
  fullName: Mono.CodeGeneration.CodeExpression.Subtract
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeExpression.xml
