### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Linq.QueryBuilder
  commentId: T:Microsoft.FSharp.Linq.QueryBuilder
  id: QueryBuilder
  children:
  - Microsoft.FSharp.Linq.QueryBuilder.#ctor
  - Microsoft.FSharp.Linq.QueryBuilder.All``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  - Microsoft.FSharp.Linq.QueryBuilder.AverageBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.AverageByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.Contains``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},``0)
  - Microsoft.FSharp.Linq.QueryBuilder.Count``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.Distinct``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.ExactlyOne``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.ExactlyOneOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.Exists``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  - Microsoft.FSharp.Linq.QueryBuilder.Find``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  - Microsoft.FSharp.Linq.QueryBuilder.For``4(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Linq.QuerySource{``2,``3}})
  - Microsoft.FSharp.Linq.QueryBuilder.GroupBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.GroupJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  - Microsoft.FSharp.Linq.QueryBuilder.GroupValBy``4(Microsoft.FSharp.Linq.QuerySource{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.Head``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.HeadOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.Join``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``4}})
  - Microsoft.FSharp.Linq.QueryBuilder.Last``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.LastOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.LeftOuterJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  - Microsoft.FSharp.Linq.QueryBuilder.MaxBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.MaxByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.MinBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.MinByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.Nth``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  - Microsoft.FSharp.Linq.QueryBuilder.Quote``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})
  - Microsoft.FSharp.Linq.QueryBuilder.Run``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Linq.QuerySource{``0,System.Linq.IQueryable}})
  - Microsoft.FSharp.Linq.QueryBuilder.Select``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.Skip``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  - Microsoft.FSharp.Linq.QueryBuilder.SkipWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  - Microsoft.FSharp.Linq.QueryBuilder.SortBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.SortByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.SortByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.SortByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.Source``2(System.Linq.IQueryable{``0})
  - Microsoft.FSharp.Linq.QueryBuilder.Source``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.FSharp.Linq.QueryBuilder.SumBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.SumByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.Take``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  - Microsoft.FSharp.Linq.QueryBuilder.TakeWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  - Microsoft.FSharp.Linq.QueryBuilder.ThenBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.ThenByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  - Microsoft.FSharp.Linq.QueryBuilder.ThenByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.ThenByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  - Microsoft.FSharp.Linq.QueryBuilder.Where``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  - Microsoft.FSharp.Linq.QueryBuilder.Yield``2(``0)
  - Microsoft.FSharp.Linq.QueryBuilder.YieldFrom``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  - Microsoft.FSharp.Linq.QueryBuilder.Zero``2
  langs:
  - csharp
  name: QueryBuilder
  nameWithType: QueryBuilder
  fullName: Microsoft.FSharp.Linq.QueryBuilder
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.Class]

      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)]

      public class QueryBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.ClassAttribute
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.#ctor
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.#ctor
  id: '#ctor'
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: QueryBuilder()
  nameWithType: QueryBuilder.QueryBuilder()
  fullName: QueryBuilder.QueryBuilder()
  type: Constructor
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public QueryBuilder ();
    parameters: []
  overload: Microsoft.FSharp.Linq.QueryBuilder.#ctor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.All``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.All``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  id: All``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: All<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.All<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.All<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("all")]

      public bool All<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.All``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.AverageBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.AverageBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: AverageBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: AverageBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.AverageBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.AverageBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("averageBy")]

      public TValue AverageBy<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TValue> projection);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TValue}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: TValue
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.AverageBy``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.AverageByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.AverageByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: AverageByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: AverageByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.AverageByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.AverageByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("averageByNullable")]

      public Nullable<TValue> AverageByNullable<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TValue>> projection) where TValue : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TValue}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: System.Nullable{TValue}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.AverageByNullable``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Contains``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},``0)
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Contains``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},``0)
  id: Contains``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},``0)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Contains<T,Q>(QuerySource<T,Q>, T)
  nameWithType: QueryBuilder.Contains<T,Q>(QuerySource<T,Q>, T)
  fullName: QueryBuilder.Contains<T,Q>(QuerySource<T,Q>, T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("contains")]

      public bool Contains<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, T key);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: key
      type: T
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Contains``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Count``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Count``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: Count``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Count<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Count<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Count<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("count")]

      public int Count<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Count``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Distinct``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Distinct``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: Distinct``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Distinct<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Distinct<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Distinct<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("distinct", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> Distinct<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Distinct``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOne``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.ExactlyOne``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: ExactlyOne``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: ExactlyOne<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.ExactlyOne<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.ExactlyOne<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("exactlyOne")]

      public T ExactlyOne<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOne``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOneOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.ExactlyOneOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: ExactlyOneOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: ExactlyOneOrDefault<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.ExactlyOneOrDefault<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.ExactlyOneOrDefault<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("exactlyOneOrDefault")]

      public T ExactlyOneOrDefault<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOneOrDefault``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Exists``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Exists``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  id: Exists``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Exists<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.Exists<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.Exists<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("exists")]

      public bool Exists<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Exists``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Find``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Find``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  id: Find``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Find<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.Find<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.Find<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("find")]

      public T Find<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Find``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.For``4(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Linq.QuerySource{``2,``3}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.For``4(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Linq.QuerySource{``2,``3}})
  id: For``4(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Linq.QuerySource{``2,``3}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: For<T,Q,TResult,Q2>(QuerySource<T,Q>, FSharpFunc<T,QuerySource<TResult,Q2>>)
  nameWithType: QueryBuilder.For<T,Q,TResult,Q2>(QuerySource<T,Q>, FSharpFunc<T,QuerySource<TResult,Q2>>)
  fullName: QueryBuilder.For<T,Q,TResult,Q2>(QuerySource<T,Q>, FSharpFunc<T,QuerySource<TResult,Q2>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public Microsoft.FSharp.Linq.QuerySource<TResult,Q> For<T,Q,TResult,Q2> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Linq.QuerySource<TResult,Q2>> body);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: body
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Linq.QuerySource{TResult,Q2}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TResult
      description: To be added.
    - id: Q2
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{TResult,Q}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.For``4*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.GroupBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: GroupBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: GroupBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.GroupBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.GroupBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("groupBy", AllowIntoPattern=true)]

      public Microsoft.FSharp.Linq.QuerySource<System.Linq.IGrouping<TKey,T>,Q> GroupBy<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TKey> keySelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{System.Linq.IGrouping{TKey,T},Q}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.GroupBy``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.GroupJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  id: GroupJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: GroupJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  nameWithType: QueryBuilder.GroupJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  fullName: QueryBuilder.GroupJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("groupJoin", IsLikeGroupJoin=true, JoinConditionWord="on")]

      public Microsoft.FSharp.Linq.QuerySource<TResult,Q> GroupJoin<TOuter,Q,TInner,TKey,TResult> (Microsoft.FSharp.Linq.QuerySource<TOuter,Q> outerSource, Microsoft.FSharp.Linq.QuerySource<TInner,Q> innerSource, Microsoft.FSharp.Core.FSharpFunc<TOuter,TKey> outerKeySelector, Microsoft.FSharp.Core.FSharpFunc<TInner,TKey> innerKeySelector, Microsoft.FSharp.Core.FSharpFunc<TOuter,Microsoft.FSharp.Core.FSharpFunc<System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector);
    parameters:
    - id: outerSource
      type: Microsoft.FSharp.Linq.QuerySource{TOuter,Q}
      description: To be added.
    - id: innerSource
      type: Microsoft.FSharp.Linq.QuerySource{TInner,Q}
      description: To be added.
    - id: outerKeySelector
      type: Microsoft.FSharp.Core.FSharpFunc{TOuter,TKey}
      description: To be added.
    - id: innerKeySelector
      type: Microsoft.FSharp.Core.FSharpFunc{TInner,TKey}
      description: To be added.
    - id: resultSelector
      type: Microsoft.FSharp.Core.FSharpFunc{TOuter,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{TInner},TResult}}
      description: To be added.
    typeParameters:
    - id: TOuter
      description: To be added.
    - id: Q
      description: To be added.
    - id: TInner
      description: To be added.
    - id: TKey
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{TResult,Q}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.GroupJoin``5*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupValBy``4(Microsoft.FSharp.Linq.QuerySource{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.GroupValBy``4(Microsoft.FSharp.Linq.QuerySource{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``0,``1})
  id: GroupValBy``4(Microsoft.FSharp.Linq.QuerySource{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: GroupValBy<T,TKey,TValue,Q>(QuerySource<T,Q>, FSharpFunc<T,TValue>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.GroupValBy<T,TKey,TValue,Q>(QuerySource<T,Q>, FSharpFunc<T,TValue>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.GroupValBy<T,TKey,TValue,Q>(QuerySource<T,Q>, FSharpFunc<T,TValue>, FSharpFunc<T,TKey>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("groupValBy", AllowIntoPattern=true)]

      public Microsoft.FSharp.Linq.QuerySource<System.Linq.IGrouping<TKey,TValue>,Q> GroupValBy<T,TKey,TValue,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TValue> resultSelector, Microsoft.FSharp.Core.FSharpFunc<T,TKey> keySelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: resultSelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TValue}
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: TKey
      description: To be added.
    - id: TValue
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{System.Linq.IGrouping{TKey,TValue},Q}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.GroupValBy``4*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Head``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Head``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: Head``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Head<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Head<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Head<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("head")]

      public T Head<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Head``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.HeadOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.HeadOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: HeadOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: HeadOrDefault<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.HeadOrDefault<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.HeadOrDefault<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("headOrDefault")]

      public T HeadOrDefault<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.HeadOrDefault``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Join``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``4}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Join``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``4}})
  id: Join``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``4}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Join<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>)
  nameWithType: QueryBuilder.Join<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>)
  fullName: QueryBuilder.Join<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("join", IsLikeJoin=true, JoinConditionWord="on")]

      public Microsoft.FSharp.Linq.QuerySource<TResult,Q> Join<TOuter,Q,TInner,TKey,TResult> (Microsoft.FSharp.Linq.QuerySource<TOuter,Q> outerSource, Microsoft.FSharp.Linq.QuerySource<TInner,Q> innerSource, Microsoft.FSharp.Core.FSharpFunc<TOuter,TKey> outerKeySelector, Microsoft.FSharp.Core.FSharpFunc<TInner,TKey> innerKeySelector, Microsoft.FSharp.Core.FSharpFunc<TOuter,Microsoft.FSharp.Core.FSharpFunc<TInner,TResult>> resultSelector);
    parameters:
    - id: outerSource
      type: Microsoft.FSharp.Linq.QuerySource{TOuter,Q}
      description: To be added.
    - id: innerSource
      type: Microsoft.FSharp.Linq.QuerySource{TInner,Q}
      description: To be added.
    - id: outerKeySelector
      type: Microsoft.FSharp.Core.FSharpFunc{TOuter,TKey}
      description: To be added.
    - id: innerKeySelector
      type: Microsoft.FSharp.Core.FSharpFunc{TInner,TKey}
      description: To be added.
    - id: resultSelector
      type: Microsoft.FSharp.Core.FSharpFunc{TOuter,Microsoft.FSharp.Core.FSharpFunc{TInner,TResult}}
      description: To be added.
    typeParameters:
    - id: TOuter
      description: To be added.
    - id: Q
      description: To be added.
    - id: TInner
      description: To be added.
    - id: TKey
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{TResult,Q}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Join``5*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Last``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Last``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: Last``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Last<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Last<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Last<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("last")]

      public T Last<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Last``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.LastOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.LastOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: LastOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: LastOrDefault<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.LastOrDefault<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.LastOrDefault<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("lastOrDefault")]

      public T LastOrDefault<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.LastOrDefault``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.LeftOuterJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.LeftOuterJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  id: LeftOuterJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  nameWithType: QueryBuilder.LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  fullName: QueryBuilder.LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("leftOuterJoin", IsLikeGroupJoin=true, JoinConditionWord="on")]

      public Microsoft.FSharp.Linq.QuerySource<TResult,Q> LeftOuterJoin<TOuter,Q,TInner,TKey,TResult> (Microsoft.FSharp.Linq.QuerySource<TOuter,Q> outerSource, Microsoft.FSharp.Linq.QuerySource<TInner,Q> innerSource, Microsoft.FSharp.Core.FSharpFunc<TOuter,TKey> outerKeySelector, Microsoft.FSharp.Core.FSharpFunc<TInner,TKey> innerKeySelector, Microsoft.FSharp.Core.FSharpFunc<TOuter,Microsoft.FSharp.Core.FSharpFunc<System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector);
    parameters:
    - id: outerSource
      type: Microsoft.FSharp.Linq.QuerySource{TOuter,Q}
      description: To be added.
    - id: innerSource
      type: Microsoft.FSharp.Linq.QuerySource{TInner,Q}
      description: To be added.
    - id: outerKeySelector
      type: Microsoft.FSharp.Core.FSharpFunc{TOuter,TKey}
      description: To be added.
    - id: innerKeySelector
      type: Microsoft.FSharp.Core.FSharpFunc{TInner,TKey}
      description: To be added.
    - id: resultSelector
      type: Microsoft.FSharp.Core.FSharpFunc{TOuter,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{TInner},TResult}}
      description: To be added.
    typeParameters:
    - id: TOuter
      description: To be added.
    - id: Q
      description: To be added.
    - id: TInner
      description: To be added.
    - id: TKey
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{TResult,Q}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.LeftOuterJoin``5*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MaxBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.MaxBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: MaxBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: MaxBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.MaxBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.MaxBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("maxBy")]

      public TValue MaxBy<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TValue> valueSelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: valueSelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TValue}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: TValue
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.MaxBy``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MaxByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.MaxByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: MaxByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: MaxByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.MaxByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.MaxByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("maxByNullable")]

      public Nullable<TValue> MaxByNullable<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TValue>> valueSelector) where TValue : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: valueSelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TValue}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: System.Nullable{TValue}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.MaxByNullable``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MinBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.MinBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: MinBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: MinBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.MinBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.MinBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("minBy")]

      public TValue MinBy<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TValue> valueSelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: valueSelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TValue}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: TValue
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.MinBy``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MinByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.MinByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: MinByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: MinByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.MinByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.MinByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("minByNullable")]

      public Nullable<TValue> MinByNullable<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TValue>> valueSelector) where TValue : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: valueSelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TValue}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: System.Nullable{TValue}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.MinByNullable``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Nth``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Nth``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  id: Nth``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Nth<T,Q>(QuerySource<T,Q>, Int32)
  nameWithType: QueryBuilder.Nth<T,Q>(QuerySource<T,Q>, Int32)
  fullName: QueryBuilder.Nth<T,Q>(QuerySource<T,Q>, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("nth")]

      public T Nth<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, int index);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Nth``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Quote``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Quote``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})
  id: Quote``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Quote<T>(FSharpExpr<T>)
  nameWithType: QueryBuilder.Quote<T>(FSharpExpr<T>)
  fullName: QueryBuilder.Quote<T>(FSharpExpr<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public Microsoft.FSharp.Quotations.FSharpExpr<T> Quote<T> (Microsoft.FSharp.Quotations.FSharpExpr<T> q);
    parameters:
    - id: q
      type: Microsoft.FSharp.Quotations.FSharpExpr`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Quotations.FSharpExpr`1
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Quote``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Run``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Linq.QuerySource{``0,System.Linq.IQueryable}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Run``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Linq.QuerySource{``0,System.Linq.IQueryable}})
  id: Run``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Linq.QuerySource{``0,System.Linq.IQueryable}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Run<T>(FSharpExpr<QuerySource<T,IQueryable>>)
  nameWithType: QueryBuilder.Run<T>(FSharpExpr<QuerySource<T,IQueryable>>)
  fullName: QueryBuilder.Run<T>(FSharpExpr<QuerySource<T,IQueryable>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public System.Linq.IQueryable<T> Run<T> (Microsoft.FSharp.Quotations.FSharpExpr<Microsoft.FSharp.Linq.QuerySource<T,System.Linq.IQueryable>> q);
    parameters:
    - id: q
      type: Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Linq.QuerySource{T,System.Linq.IQueryable}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: System.Linq.IQueryable`1
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Run``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Select``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Select``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: Select``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Select<T,Q,TResult>(QuerySource<T,Q>, FSharpFunc<T,TResult>)
  nameWithType: QueryBuilder.Select<T,Q,TResult>(QuerySource<T,Q>, FSharpFunc<T,TResult>)
  fullName: QueryBuilder.Select<T,Q,TResult>(QuerySource<T,Q>, FSharpFunc<T,TResult>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("select", AllowIntoPattern=true)]

      public Microsoft.FSharp.Linq.QuerySource<TResult,Q> Select<T,Q,TResult> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TResult> projection);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TResult
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{TResult,Q}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Select``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Skip``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Skip``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  id: Skip``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Skip<T,Q>(QuerySource<T,Q>, Int32)
  nameWithType: QueryBuilder.Skip<T,Q>(QuerySource<T,Q>, Int32)
  fullName: QueryBuilder.Skip<T,Q>(QuerySource<T,Q>, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("skip", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> Skip<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, int count);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Skip``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SkipWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.SkipWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  id: SkipWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: SkipWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.SkipWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.SkipWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("skipWhile", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> SkipWhile<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.SkipWhile``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.SortBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: SortBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: SortBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.SortBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.SortBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("sortBy", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> SortBy<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TKey> keySelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.SortBy``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.SortByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: SortByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: SortByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.SortByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.SortByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("sortByDescending", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> SortByDescending<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TKey> keySelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.SortByDescending``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.SortByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: SortByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: SortByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.SortByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.SortByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("sortByNullable", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> SortByNullable<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TKey>> keySelector) where TKey : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TKey}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.SortByNullable``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.SortByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: SortByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: SortByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.SortByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.SortByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("sortByNullableDescending", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> SortByNullableDescending<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TKey>> keySelector) where TKey : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TKey}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.SortByNullableDescending``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Source``2(System.Linq.IQueryable{``0})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Source``2(System.Linq.IQueryable{``0})
  id: Source``2(System.Linq.IQueryable{``0})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Source<T,Q>(IQueryable<T>)
  nameWithType: QueryBuilder.Source<T,Q>(IQueryable<T>)
  fullName: QueryBuilder.Source<T,Q>(IQueryable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public Microsoft.FSharp.Linq.QuerySource<T,Q> Source<T,Q> (System.Linq.IQueryable<T> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Source``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Source``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Source``1(System.Collections.Generic.IEnumerable{``0})
  id: Source``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Source<T>(IEnumerable<T>)
  nameWithType: QueryBuilder.Source<T>(IEnumerable<T>)
  fullName: QueryBuilder.Source<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public Microsoft.FSharp.Linq.QuerySource<T,System.Collections.IEnumerable> Source<T> (System.Collections.Generic.IEnumerable<T> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource{T,System.Collections.IEnumerable}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Source``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SumBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.SumBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: SumBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: SumBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.SumBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.SumBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("sumBy")]

      public TValue SumBy<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TValue> projection);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: projection
      type: Microsoft.FSharp.Core.FSharpFunc{T,TValue}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: TValue
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.SumBy``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SumByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.SumByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: SumByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: SumByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.SumByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.SumByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("sumByNullable")]

      public Nullable<TValue> SumByNullable<T,Q,TValue> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TValue>> valueSelector) where TValue : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: valueSelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TValue}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TValue
      description: To be added.
    return:
      type: System.Nullable{TValue}
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.SumByNullable``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Take``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Take``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  id: Take``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Take<T,Q>(QuerySource<T,Q>, Int32)
  nameWithType: QueryBuilder.Take<T,Q>(QuerySource<T,Q>, Int32)
  fullName: QueryBuilder.Take<T,Q>(QuerySource<T,Q>, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("take", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> Take<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, int count);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Take``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.TakeWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.TakeWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  id: TakeWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: TakeWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.TakeWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.TakeWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("takeWhile", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> TakeWhile<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.TakeWhile``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.ThenBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: ThenBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: ThenBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.ThenBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.ThenBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("thenBy", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> ThenBy<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TKey> keySelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.ThenBy``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.ThenByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  id: ThenByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: ThenByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.ThenByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.ThenByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("thenByDescending", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> ThenByDescending<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,TKey> keySelector);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.ThenByDescending``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.ThenByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: ThenByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: ThenByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.ThenByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.ThenByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("thenByNullable", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> ThenByNullable<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TKey>> keySelector) where TKey : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TKey}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullable``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.ThenByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  id: ThenByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: ThenByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.ThenByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.ThenByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("thenByNullableDescending", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> ThenByNullableDescending<T,Q,TKey> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,Nullable<TKey>> keySelector) where TKey : struct;
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: keySelector
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TKey}}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    - id: TKey
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullableDescending``3*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Where``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Where``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  id: Where``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Where<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.Where<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.Where<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CustomOperation("where", AllowIntoPattern=true, MaintainsVariableSpace=true)]

      public Microsoft.FSharp.Linq.QuerySource<T,Q> Where<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> source, Microsoft.FSharp.Core.FSharpFunc<T,bool> predicate);
    parameters:
    - id: source
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    - id: predicate
      type: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Where``2*
  exceptions: []
  attributes:
  - type: Microsoft.FSharp.Core.CustomOperationAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Yield``2(``0)
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Yield``2(``0)
  id: Yield``2(``0)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Yield<T,Q>(T)
  nameWithType: QueryBuilder.Yield<T,Q>(T)
  fullName: QueryBuilder.Yield<T,Q>(T)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public Microsoft.FSharp.Linq.QuerySource<T,Q> Yield<T,Q> (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Yield``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.YieldFrom``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.YieldFrom``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  id: YieldFrom``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: YieldFrom<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.YieldFrom<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.YieldFrom<T,Q>(QuerySource<T,Q>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public Microsoft.FSharp.Linq.QuerySource<T,Q> YieldFrom<T,Q> (Microsoft.FSharp.Linq.QuerySource<T,Q> computation);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.YieldFrom``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Zero``2
  commentId: M:Microsoft.FSharp.Linq.QueryBuilder.Zero``2
  id: Zero``2
  parent: Microsoft.FSharp.Linq.QueryBuilder
  langs:
  - csharp
  name: Zero<T,Q>()
  nameWithType: QueryBuilder.Zero<T,Q>()
  fullName: QueryBuilder.Zero<T,Q>()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Linq
  syntax:
    content: public Microsoft.FSharp.Linq.QuerySource<T,Q> Zero<T,Q> ();
    parameters: []
    typeParameters:
    - id: T
      description: To be added.
    - id: Q
      description: To be added.
    return:
      type: Microsoft.FSharp.Linq.QuerySource`2
      description: To be added.
  overload: Microsoft.FSharp.Linq.QueryBuilder.Zero``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Linq.QueryBuilder.#ctor
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: QueryBuilder()
  nameWithType: QueryBuilder.QueryBuilder()
  fullName: QueryBuilder.QueryBuilder()
- uid: Microsoft.FSharp.Linq.QueryBuilder.All``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: All<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.All<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.All<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Linq.QuerySource`2
  parent: Microsoft.FSharp.Linq
  isExternal: false
  name: QuerySource<T,Q>
  nameWithType: QuerySource<T,Q>
  fullName: Microsoft.FSharp.Linq.QuerySource<T,Q>
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Boolean}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Boolean>
  nameWithType: FSharpFunc<T,Boolean>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.AverageBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: AverageBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.AverageBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.AverageBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Microsoft.FSharp.Core.FSharpFunc{T,TValue}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TValue>
  nameWithType: FSharpFunc<T,TValue>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TValue>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.AverageByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: AverageByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.AverageByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.AverageByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
- uid: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
- uid: System.Nullable{TValue}
  parent: System
  isExternal: false
  name: Nullable<TValue>
  nameWithType: Nullable<TValue>
  fullName: System.Nullable<TValue>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TValue}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Nullable<TValue>>
  nameWithType: FSharpFunc<T,Nullable<TValue>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Nullable<TValue>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.Contains``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},``0)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Contains<T,Q>(QuerySource<T,Q>, T)
  nameWithType: QueryBuilder.Contains<T,Q>(QuerySource<T,Q>, T)
  fullName: QueryBuilder.Contains<T,Q>(QuerySource<T,Q>, T)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Count``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Count<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Count<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Count<T,Q>(QuerySource<T,Q>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Linq.QueryBuilder.Distinct``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Distinct<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Distinct<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Distinct<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOne``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ExactlyOne<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.ExactlyOne<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.ExactlyOne<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOneOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ExactlyOneOrDefault<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.ExactlyOneOrDefault<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.ExactlyOneOrDefault<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Exists``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Exists<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.Exists<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.Exists<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Find``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Find<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.Find<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.Find<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.For``4(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Linq.QuerySource{``2,``3}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: For<T,Q,TResult,Q2>(QuerySource<T,Q>, FSharpFunc<T,QuerySource<TResult,Q2>>)
  nameWithType: QueryBuilder.For<T,Q,TResult,Q2>(QuerySource<T,Q>, FSharpFunc<T,QuerySource<TResult,Q2>>)
  fullName: QueryBuilder.For<T,Q,TResult,Q2>(QuerySource<T,Q>, FSharpFunc<T,QuerySource<TResult,Q2>>)
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Q
  name: Q
  nameWithType: Q
  fullName: Q
- uid: Microsoft.FSharp.Linq.QuerySource{TResult,Q}
  parent: Microsoft.FSharp.Linq
  isExternal: false
  name: QuerySource<TResult,Q>
  nameWithType: QuerySource<TResult,Q>
  fullName: Microsoft.FSharp.Linq.QuerySource<TResult,Q>
  spec.csharp:
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Q
    name: Q
    nameWithType: Q
    fullName: Q
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Q2
  name: Q2
  nameWithType: Q2
  fullName: Q2
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Linq.QuerySource{TResult,Q2}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,QuerySource<TResult,Q2>>
  nameWithType: FSharpFunc<T,QuerySource<TResult,Q2>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Linq.QuerySource<TResult,Q2>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Q2
    name: Q2
    nameWithType: Q2
    fullName: Q2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: GroupBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.GroupBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.GroupBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
- uid: System.Linq.IGrouping`2
  name: IGrouping<TKey,TElement>
  nameWithType: IGrouping<TKey,TElement>
  fullName: System.Linq.IGrouping<TKey,TElement>
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Microsoft.FSharp.Linq.QuerySource{System.Linq.IGrouping{TKey,T},Q}
  parent: Microsoft.FSharp.Linq
  isExternal: false
  name: QuerySource<IGrouping<TKey,T>,Q>
  nameWithType: QuerySource<IGrouping<TKey,T>,Q>
  fullName: Microsoft.FSharp.Linq.QuerySource<System.Linq.IGrouping<TKey,T>,Q>
  spec.csharp:
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Q
    name: Q
    nameWithType: Q
    fullName: Q
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{T,TKey}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,TKey>
  nameWithType: FSharpFunc<T,TKey>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TKey>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: GroupJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  nameWithType: QueryBuilder.GroupJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  fullName: QueryBuilder.GroupJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
- uid: TOuter
  name: TOuter
  nameWithType: TOuter
  fullName: TOuter
- uid: Microsoft.FSharp.Linq.QuerySource{TOuter,Q}
  parent: Microsoft.FSharp.Linq
  isExternal: false
  name: QuerySource<TOuter,Q>
  nameWithType: QuerySource<TOuter,Q>
  fullName: Microsoft.FSharp.Linq.QuerySource<TOuter,Q>
  spec.csharp:
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Q
    name: Q
    nameWithType: Q
    fullName: Q
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TInner
  name: TInner
  nameWithType: TInner
  fullName: TInner
- uid: Microsoft.FSharp.Linq.QuerySource{TInner,Q}
  parent: Microsoft.FSharp.Linq
  isExternal: false
  name: QuerySource<TInner,Q>
  nameWithType: QuerySource<TInner,Q>
  fullName: Microsoft.FSharp.Linq.QuerySource<TInner,Q>
  spec.csharp:
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Q
    name: Q
    nameWithType: Q
    fullName: Q
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{TOuter,TKey}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TOuter,TKey>
  nameWithType: FSharpFunc<TOuter,TKey>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TOuter,TKey>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{TInner,TKey}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TInner,TKey>
  nameWithType: FSharpFunc<TInner,TKey>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TInner,TKey>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: Microsoft.FSharp.Core.FSharpFunc{TOuter,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{TInner},TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>
  nameWithType: FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TOuter,Microsoft.FSharp.Core.FSharpFunc<System.Collections.Generic.IEnumerable<TInner>,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupValBy``4(Microsoft.FSharp.Linq.QuerySource{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: GroupValBy<T,TKey,TValue,Q>(QuerySource<T,Q>, FSharpFunc<T,TValue>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.GroupValBy<T,TKey,TValue,Q>(QuerySource<T,Q>, FSharpFunc<T,TValue>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.GroupValBy<T,TKey,TValue,Q>(QuerySource<T,Q>, FSharpFunc<T,TValue>, FSharpFunc<T,TKey>)
- uid: Microsoft.FSharp.Linq.QuerySource{System.Linq.IGrouping{TKey,TValue},Q}
  parent: Microsoft.FSharp.Linq
  isExternal: false
  name: QuerySource<IGrouping<TKey,TValue>,Q>
  nameWithType: QuerySource<IGrouping<TKey,TValue>,Q>
  fullName: Microsoft.FSharp.Linq.QuerySource<System.Linq.IGrouping<TKey,TValue>,Q>
  spec.csharp:
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Q
    name: Q
    nameWithType: Q
    fullName: Q
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.Head``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Head<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Head<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Head<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.HeadOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: HeadOrDefault<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.HeadOrDefault<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.HeadOrDefault<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Join``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``4}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Join<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>)
  nameWithType: QueryBuilder.Join<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>)
  fullName: QueryBuilder.Join<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>)
- uid: Microsoft.FSharp.Core.FSharpFunc{TOuter,Microsoft.FSharp.Core.FSharpFunc{TInner,TResult}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>
  nameWithType: FSharpFunc<TOuter,FSharpFunc<TInner,TResult>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TOuter,Microsoft.FSharp.Core.FSharpFunc<TInner,TResult>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.Last``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Last<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.Last<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.Last<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.LastOrDefault``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: LastOrDefault<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.LastOrDefault<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.LastOrDefault<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.LeftOuterJoin``5(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Linq.QuerySource{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``3},Microsoft.FSharp.Core.FSharpFunc{``2,``3},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``2},``4}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  nameWithType: QueryBuilder.LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
  fullName: QueryBuilder.LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>(QuerySource<TOuter,Q>, QuerySource<TInner,Q>, FSharpFunc<TOuter,TKey>, FSharpFunc<TInner,TKey>, FSharpFunc<TOuter,FSharpFunc<IEnumerable<TInner>,TResult>>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.MaxBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MaxBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.MaxBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.MaxBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.MaxByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MaxByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.MaxByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.MaxByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.MinBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MinBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.MinBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.MinBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.MinByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MinByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.MinByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.MinByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Nth``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Nth<T,Q>(QuerySource<T,Q>, Int32)
  nameWithType: QueryBuilder.Nth<T,Q>(QuerySource<T,Q>, Int32)
  fullName: QueryBuilder.Nth<T,Q>(QuerySource<T,Q>, Int32)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Quote``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Quote<T>(FSharpExpr<T>)
  nameWithType: QueryBuilder.Quote<T>(FSharpExpr<T>)
  fullName: QueryBuilder.Quote<T>(FSharpExpr<T>)
- uid: Microsoft.FSharp.Quotations.FSharpExpr`1
  parent: Microsoft.FSharp.Quotations
  isExternal: false
  name: FSharpExpr<T>
  nameWithType: FSharpExpr<T>
  fullName: Microsoft.FSharp.Quotations.FSharpExpr<T>
- uid: Microsoft.FSharp.Linq.QueryBuilder.Run``1(Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Linq.QuerySource{``0,System.Linq.IQueryable}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Run<T>(FSharpExpr<QuerySource<T,IQueryable>>)
  nameWithType: QueryBuilder.Run<T>(FSharpExpr<QuerySource<T,IQueryable>>)
  fullName: QueryBuilder.Run<T>(FSharpExpr<QuerySource<T,IQueryable>>)
- uid: System.Linq.IQueryable`1
  parent: System.Linq
  isExternal: false
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
- uid: System.Linq.IQueryable
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: Microsoft.FSharp.Quotations.FSharpExpr{Microsoft.FSharp.Linq.QuerySource{T,System.Linq.IQueryable}}
  parent: Microsoft.FSharp.Quotations
  isExternal: false
  name: FSharpExpr<QuerySource<T,IQueryable>>
  nameWithType: FSharpExpr<QuerySource<T,IQueryable>>
  fullName: Microsoft.FSharp.Quotations.FSharpExpr<Microsoft.FSharp.Linq.QuerySource<T,System.Linq.IQueryable>>
  spec.csharp:
  - uid: Microsoft.FSharp.Quotations.FSharpExpr`1
    name: FSharpExpr
    nameWithType: FSharpExpr
    fullName: Microsoft.FSharp.Quotations.FSharpExpr
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Linq.IQueryable
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.Select``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Select<T,Q,TResult>(QuerySource<T,Q>, FSharpFunc<T,TResult>)
  nameWithType: QueryBuilder.Select<T,Q,TResult>(QuerySource<T,Q>, FSharpFunc<T,TResult>)
  fullName: QueryBuilder.Select<T,Q,TResult>(QuerySource<T,Q>, FSharpFunc<T,TResult>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Skip``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Skip<T,Q>(QuerySource<T,Q>, Int32)
  nameWithType: QueryBuilder.Skip<T,Q>(QuerySource<T,Q>, Int32)
  fullName: QueryBuilder.Skip<T,Q>(QuerySource<T,Q>, Int32)
- uid: Microsoft.FSharp.Linq.QueryBuilder.SkipWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SkipWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.SkipWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.SkipWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.SortBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.SortBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.SortByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.SortByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.SortByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.SortByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,System.Nullable{TKey}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Nullable<TKey>>
  nameWithType: FSharpFunc<T,Nullable<TKey>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,System.Nullable<TKey>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.SortByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.SortByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Source``2(System.Linq.IQueryable{``0})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Source<T,Q>(IQueryable<T>)
  nameWithType: QueryBuilder.Source<T,Q>(IQueryable<T>)
  fullName: QueryBuilder.Source<T,Q>(IQueryable<T>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Source``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Source<T>(IEnumerable<T>)
  nameWithType: QueryBuilder.Source<T>(IEnumerable<T>)
  fullName: QueryBuilder.Source<T>(IEnumerable<T>)
- uid: System.Collections.IEnumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Microsoft.FSharp.Linq.QuerySource{T,System.Collections.IEnumerable}
  parent: Microsoft.FSharp.Linq
  isExternal: false
  name: QuerySource<T,IEnumerable>
  nameWithType: QuerySource<T,IEnumerable>
  fullName: Microsoft.FSharp.Linq.QuerySource<T,System.Collections.IEnumerable>
  spec.csharp:
  - uid: Microsoft.FSharp.Linq.QuerySource`2
    name: QuerySource
    nameWithType: QuerySource
    fullName: Microsoft.FSharp.Linq.QuerySource
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Linq.QueryBuilder.SumBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SumBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  nameWithType: QueryBuilder.SumBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
  fullName: QueryBuilder.SumBy<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,TValue>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.SumByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SumByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  nameWithType: QueryBuilder.SumByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
  fullName: QueryBuilder.SumByNullable<T,Q,TValue>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TValue>>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Take``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},System.Int32)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Take<T,Q>(QuerySource<T,Q>, Int32)
  nameWithType: QueryBuilder.Take<T,Q>(QuerySource<T,Q>, Int32)
  fullName: QueryBuilder.Take<T,Q>(QuerySource<T,Q>, Int32)
- uid: Microsoft.FSharp.Linq.QueryBuilder.TakeWhile``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: TakeWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.TakeWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.TakeWhile<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenBy``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.ThenBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.ThenBy<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  nameWithType: QueryBuilder.ThenByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
  fullName: QueryBuilder.ThenByDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,TKey>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullable``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.ThenByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.ThenByNullable<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullableDescending``3(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Nullable{``2}})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  nameWithType: QueryBuilder.ThenByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
  fullName: QueryBuilder.ThenByNullableDescending<T,Q,TKey>(QuerySource<T,Q>, FSharpFunc<T,Nullable<TKey>>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Where``2(Microsoft.FSharp.Linq.QuerySource{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Where<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  nameWithType: QueryBuilder.Where<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
  fullName: QueryBuilder.Where<T,Q>(QuerySource<T,Q>, FSharpFunc<T,Boolean>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Yield``2(``0)
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Yield<T,Q>(T)
  nameWithType: QueryBuilder.Yield<T,Q>(T)
  fullName: QueryBuilder.Yield<T,Q>(T)
- uid: Microsoft.FSharp.Linq.QueryBuilder.YieldFrom``2(Microsoft.FSharp.Linq.QuerySource{``0,``1})
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: YieldFrom<T,Q>(QuerySource<T,Q>)
  nameWithType: QueryBuilder.YieldFrom<T,Q>(QuerySource<T,Q>)
  fullName: QueryBuilder.YieldFrom<T,Q>(QuerySource<T,Q>)
- uid: Microsoft.FSharp.Linq.QueryBuilder.Zero``2
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Zero<T,Q>()
  nameWithType: QueryBuilder.Zero<T,Q>()
  fullName: QueryBuilder.Zero<T,Q>()
- uid: Microsoft.FSharp.Linq.QueryBuilder.#ctor*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: QueryBuilder
  nameWithType: QueryBuilder.QueryBuilder
  fullName: QueryBuilder.QueryBuilder
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.All``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: All<T,Q>
  nameWithType: QueryBuilder.All<T,Q>
  fullName: QueryBuilder.All<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.AverageBy``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: AverageBy<T,Q,TValue>
  nameWithType: QueryBuilder.AverageBy<T,Q,TValue>
  fullName: QueryBuilder.AverageBy<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.AverageByNullable``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: AverageByNullable<T,Q,TValue>
  nameWithType: QueryBuilder.AverageByNullable<T,Q,TValue>
  fullName: QueryBuilder.AverageByNullable<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Contains``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Contains<T,Q>
  nameWithType: QueryBuilder.Contains<T,Q>
  fullName: QueryBuilder.Contains<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Count``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Count<T,Q>
  nameWithType: QueryBuilder.Count<T,Q>
  fullName: QueryBuilder.Count<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Distinct``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Distinct<T,Q>
  nameWithType: QueryBuilder.Distinct<T,Q>
  fullName: QueryBuilder.Distinct<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOne``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ExactlyOne<T,Q>
  nameWithType: QueryBuilder.ExactlyOne<T,Q>
  fullName: QueryBuilder.ExactlyOne<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ExactlyOneOrDefault``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ExactlyOneOrDefault<T,Q>
  nameWithType: QueryBuilder.ExactlyOneOrDefault<T,Q>
  fullName: QueryBuilder.ExactlyOneOrDefault<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Exists``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Exists<T,Q>
  nameWithType: QueryBuilder.Exists<T,Q>
  fullName: QueryBuilder.Exists<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Find``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Find<T,Q>
  nameWithType: QueryBuilder.Find<T,Q>
  fullName: QueryBuilder.Find<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.For``4*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: For<T,Q,TResult,Q2>
  nameWithType: QueryBuilder.For<T,Q,TResult,Q2>
  fullName: QueryBuilder.For<T,Q,TResult,Q2>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupBy``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: GroupBy<T,Q,TKey>
  nameWithType: QueryBuilder.GroupBy<T,Q,TKey>
  fullName: QueryBuilder.GroupBy<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupJoin``5*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: GroupJoin<TOuter,Q,TInner,TKey,TResult>
  nameWithType: QueryBuilder.GroupJoin<TOuter,Q,TInner,TKey,TResult>
  fullName: QueryBuilder.GroupJoin<TOuter,Q,TInner,TKey,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.GroupValBy``4*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: GroupValBy<T,TKey,TValue,Q>
  nameWithType: QueryBuilder.GroupValBy<T,TKey,TValue,Q>
  fullName: QueryBuilder.GroupValBy<T,TKey,TValue,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Head``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Head<T,Q>
  nameWithType: QueryBuilder.Head<T,Q>
  fullName: QueryBuilder.Head<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.HeadOrDefault``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: HeadOrDefault<T,Q>
  nameWithType: QueryBuilder.HeadOrDefault<T,Q>
  fullName: QueryBuilder.HeadOrDefault<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Join``5*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Join<TOuter,Q,TInner,TKey,TResult>
  nameWithType: QueryBuilder.Join<TOuter,Q,TInner,TKey,TResult>
  fullName: QueryBuilder.Join<TOuter,Q,TInner,TKey,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Last``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Last<T,Q>
  nameWithType: QueryBuilder.Last<T,Q>
  fullName: QueryBuilder.Last<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.LastOrDefault``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: LastOrDefault<T,Q>
  nameWithType: QueryBuilder.LastOrDefault<T,Q>
  fullName: QueryBuilder.LastOrDefault<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.LeftOuterJoin``5*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>
  nameWithType: QueryBuilder.LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>
  fullName: QueryBuilder.LeftOuterJoin<TOuter,Q,TInner,TKey,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MaxBy``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MaxBy<T,Q,TValue>
  nameWithType: QueryBuilder.MaxBy<T,Q,TValue>
  fullName: QueryBuilder.MaxBy<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MaxByNullable``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MaxByNullable<T,Q,TValue>
  nameWithType: QueryBuilder.MaxByNullable<T,Q,TValue>
  fullName: QueryBuilder.MaxByNullable<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MinBy``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MinBy<T,Q,TValue>
  nameWithType: QueryBuilder.MinBy<T,Q,TValue>
  fullName: QueryBuilder.MinBy<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.MinByNullable``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: MinByNullable<T,Q,TValue>
  nameWithType: QueryBuilder.MinByNullable<T,Q,TValue>
  fullName: QueryBuilder.MinByNullable<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Nth``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Nth<T,Q>
  nameWithType: QueryBuilder.Nth<T,Q>
  fullName: QueryBuilder.Nth<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Quote``1*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Quote<T>
  nameWithType: QueryBuilder.Quote<T>
  fullName: QueryBuilder.Quote<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Run``1*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Run<T>
  nameWithType: QueryBuilder.Run<T>
  fullName: QueryBuilder.Run<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Select``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Select<T,Q,TResult>
  nameWithType: QueryBuilder.Select<T,Q,TResult>
  fullName: QueryBuilder.Select<T,Q,TResult>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Skip``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Skip<T,Q>
  nameWithType: QueryBuilder.Skip<T,Q>
  fullName: QueryBuilder.Skip<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SkipWhile``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SkipWhile<T,Q>
  nameWithType: QueryBuilder.SkipWhile<T,Q>
  fullName: QueryBuilder.SkipWhile<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortBy``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortBy<T,Q,TKey>
  nameWithType: QueryBuilder.SortBy<T,Q,TKey>
  fullName: QueryBuilder.SortBy<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByDescending``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortByDescending<T,Q,TKey>
  nameWithType: QueryBuilder.SortByDescending<T,Q,TKey>
  fullName: QueryBuilder.SortByDescending<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByNullable``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortByNullable<T,Q,TKey>
  nameWithType: QueryBuilder.SortByNullable<T,Q,TKey>
  fullName: QueryBuilder.SortByNullable<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SortByNullableDescending``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SortByNullableDescending<T,Q,TKey>
  nameWithType: QueryBuilder.SortByNullableDescending<T,Q,TKey>
  fullName: QueryBuilder.SortByNullableDescending<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Source``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Source<T,Q>
  nameWithType: QueryBuilder.Source<T,Q>
  fullName: QueryBuilder.Source<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Source``1*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Source<T>
  nameWithType: QueryBuilder.Source<T>
  fullName: QueryBuilder.Source<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SumBy``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SumBy<T,Q,TValue>
  nameWithType: QueryBuilder.SumBy<T,Q,TValue>
  fullName: QueryBuilder.SumBy<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.SumByNullable``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: SumByNullable<T,Q,TValue>
  nameWithType: QueryBuilder.SumByNullable<T,Q,TValue>
  fullName: QueryBuilder.SumByNullable<T,Q,TValue>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Take``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Take<T,Q>
  nameWithType: QueryBuilder.Take<T,Q>
  fullName: QueryBuilder.Take<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.TakeWhile``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: TakeWhile<T,Q>
  nameWithType: QueryBuilder.TakeWhile<T,Q>
  fullName: QueryBuilder.TakeWhile<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenBy``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenBy<T,Q,TKey>
  nameWithType: QueryBuilder.ThenBy<T,Q,TKey>
  fullName: QueryBuilder.ThenBy<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByDescending``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenByDescending<T,Q,TKey>
  nameWithType: QueryBuilder.ThenByDescending<T,Q,TKey>
  fullName: QueryBuilder.ThenByDescending<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullable``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenByNullable<T,Q,TKey>
  nameWithType: QueryBuilder.ThenByNullable<T,Q,TKey>
  fullName: QueryBuilder.ThenByNullable<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.ThenByNullableDescending``3*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: ThenByNullableDescending<T,Q,TKey>
  nameWithType: QueryBuilder.ThenByNullableDescending<T,Q,TKey>
  fullName: QueryBuilder.ThenByNullableDescending<T,Q,TKey>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Where``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Where<T,Q>
  nameWithType: QueryBuilder.Where<T,Q>
  fullName: QueryBuilder.Where<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Yield``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Yield<T,Q>
  nameWithType: QueryBuilder.Yield<T,Q>
  fullName: QueryBuilder.Yield<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.YieldFrom``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: YieldFrom<T,Q>
  nameWithType: QueryBuilder.YieldFrom<T,Q>
  fullName: QueryBuilder.YieldFrom<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
- uid: Microsoft.FSharp.Linq.QueryBuilder.Zero``2*
  parent: Microsoft.FSharp.Linq.QueryBuilder
  isExternal: false
  name: Zero<T,Q>
  nameWithType: QueryBuilder.Zero<T,Q>
  fullName: QueryBuilder.Zero<T,Q>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Linq/QueryBuilder.xml
