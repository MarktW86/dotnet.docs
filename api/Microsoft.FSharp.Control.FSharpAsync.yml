### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Control.FSharpAsync
  commentId: T:Microsoft.FSharp.Control.FSharpAsync
  id: FSharpAsync
  children:
  - Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})
  - Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  - Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  - Microsoft.FSharp.Control.FSharpAsync.AwaitTask(System.Threading.Tasks.Task)
  - Microsoft.FSharp.Control.FSharpAsync.AwaitTask``1(System.Threading.Tasks.Task{``0})
  - Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  - Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken
  - Microsoft.FSharp.Control.FSharpAsync.CancellationToken
  - Microsoft.FSharp.Control.FSharpAsync.Catch``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  - Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken
  - Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``0},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  - Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2(``0,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  - Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``2},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  - Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``3},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  - Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit})
  - Microsoft.FSharp.Control.FSharpAsync.Ignore``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  - Microsoft.FSharp.Control.FSharpAsync.OnCancel(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})
  - Microsoft.FSharp.Control.FSharpAsync.Parallel``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{``0}})
  - Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  - Microsoft.FSharp.Control.FSharpAsync.Sleep(System.Int32)
  - Microsoft.FSharp.Control.FSharpAsync.Start(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  - Microsoft.FSharp.Control.FSharpAsync.StartAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  - Microsoft.FSharp.Control.FSharpAsync.StartChild``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})
  - Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions})
  - Microsoft.FSharp.Control.FSharpAsync.StartImmediate(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  - Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  - Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(System.Threading.SynchronizationContext)
  - Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread
  - Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool
  - Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit})
  langs:
  - csharp
  name: FSharpAsync
  nameWithType: FSharpAsync
  fullName: Microsoft.FSharp.Control.FSharpAsync
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: >-
      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)]

      [Microsoft.FSharp.Core.CompiledName("FSharpAsync")]

      [Microsoft.FSharp.Core.Sealed]

      public sealed class FSharpAsync
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.CompiledNameAttribute
  - type: Microsoft.FSharp.Core.SealedAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})
  id: AsBeginEnd``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: AsBeginEnd<TArg,T>(FSharpFunc<TArg,FSharpAsync<T>>)
  nameWithType: FSharpAsync.AsBeginEnd<TArg,T>(FSharpFunc<TArg,FSharpAsync<T>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd<TArg,T>(FSharpFunc<TArg,FSharpAsync<T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Tuple<Microsoft.FSharp.Core.FSharpFunc<Tuple<TArg,AsyncCallback,object>,IAsyncResult>,Microsoft.FSharp.Core.FSharpFunc<IAsyncResult,T>,Microsoft.FSharp.Core.FSharpFunc<IAsyncResult,Microsoft.FSharp.Core.Unit>> AsBeginEnd<TArg,T> (Microsoft.FSharp.Core.FSharpFunc<TArg,Microsoft.FSharp.Control.FSharpAsync<T>> computation);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Core.FSharpFunc{TArg,Microsoft.FSharp.Control.FSharpAsync{T}}
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,T},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,Microsoft.FSharp.Core.Unit}}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  id: AwaitEvent``2(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: AwaitEvent<TDel,T>(IEvent<TDel,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.AwaitEvent<TDel,T>(IEvent<TDel,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitEvent<TDel,T>(IEvent<TDel,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: 'public static Microsoft.FSharp.Control.FSharpAsync<T> AwaitEvent<TDel,T> (Microsoft.FSharp.Control.IEvent<TDel,T> event, Microsoft.FSharp.Core.FSharpOption<Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit>> cancelAction) where TDel : Delegate;'
    parameters:
    - id: event
      type: Microsoft.FSharp.Control.IEvent{TDel,T}
      description: To be added.
    - id: cancelAction
      type: Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  id: AwaitIAsyncResult(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: AwaitIAsyncResult(IAsyncResult, FSharpOption<Int32>)
  nameWithType: FSharpAsync.AwaitIAsyncResult(IAsyncResult, FSharpOption<Int32>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(IAsyncResult, FSharpOption<Int32>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<bool> AwaitIAsyncResult (IAsyncResult iar, Microsoft.FSharp.Core.FSharpOption<int> millisecondsTimeout);
    parameters:
    - id: iar
      type: System.IAsyncResult
      description: To be added.
    - id: millisecondsTimeout
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{System.Boolean}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitTask(System.Threading.Tasks.Task)
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.AwaitTask(System.Threading.Tasks.Task)
  id: AwaitTask(System.Threading.Tasks.Task)
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: AwaitTask(Task)
  nameWithType: FSharpAsync.AwaitTask(Task)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitTask(Task)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> AwaitTask (System.Threading.Tasks.Task task);
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.AwaitTask*
  exceptions: []
  version:
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitTask``1(System.Threading.Tasks.Task{``0})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.AwaitTask``1(System.Threading.Tasks.Task{``0})
  id: AwaitTask``1(System.Threading.Tasks.Task{``0})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: AwaitTask<T>(Task<T>)
  nameWithType: FSharpAsync.AwaitTask<T>(Task<T>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitTask<T>(Task<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T> AwaitTask<T> (System.Threading.Tasks.Task<T> task);
    parameters:
    - id: task
      type: System.Threading.Tasks.Task{T}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.AwaitTask``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  id: AwaitWaitHandle(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: AwaitWaitHandle(WaitHandle, FSharpOption<Int32>)
  nameWithType: FSharpAsync.AwaitWaitHandle(WaitHandle, FSharpOption<Int32>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(WaitHandle, FSharpOption<Int32>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<bool> AwaitWaitHandle (System.Threading.WaitHandle waitHandle, Microsoft.FSharp.Core.FSharpOption<int> millisecondsTimeout);
    parameters:
    - id: waitHandle
      type: System.Threading.WaitHandle
      description: To be added.
    - id: millisecondsTimeout
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{System.Boolean}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken
  id: CancelDefaultToken
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: CancelDefaultToken()
  nameWithType: FSharpAsync.CancelDefaultToken()
  fullName: Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static void CancelDefaultToken ();
    parameters: []
  overload: Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.CancellationToken
  commentId: P:Microsoft.FSharp.Control.FSharpAsync.CancellationToken
  id: CancellationToken
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: CancellationToken
  nameWithType: FSharpAsync.CancellationToken
  fullName: Microsoft.FSharp.Control.FSharpAsync.CancellationToken
  type: Property
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<System.Threading.CancellationToken> CancellationToken { get; }
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{System.Threading.CancellationToken}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.CancellationToken*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Catch``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.Catch``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  id: Catch``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: Catch<T>(FSharpAsync<T>)
  nameWithType: FSharpAsync.Catch<T>(FSharpAsync<T>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Catch<T>(FSharpAsync<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.FSharpChoice<T,Exception>> Catch<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.FSharpChoice{T,System.Exception}}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.Catch``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken
  commentId: P:Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken
  id: DefaultCancellationToken
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: DefaultCancellationToken
  nameWithType: FSharpAsync.DefaultCancellationToken
  fullName: Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken
  type: Property
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static System.Threading.CancellationToken DefaultCancellationToken { get; }
    return:
      type: System.Threading.CancellationToken
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``0},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``0},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  id: FromBeginEnd``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``0},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: FromBeginEnd<T>(FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<T>(FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<T>(FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T> FromBeginEnd<T> (Microsoft.FSharp.Core.FSharpFunc<Tuple<AsyncCallback,object>,IAsyncResult> beginAction, Microsoft.FSharp.Core.FSharpFunc<IAsyncResult,T> endAction, Microsoft.FSharp.Core.FSharpOption<Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit>> cancelAction);
    parameters:
    - id: beginAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.AsyncCallback,System.Object},System.IAsyncResult}
      description: To be added.
    - id: endAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,T}
      description: To be added.
    - id: cancelAction
      type: Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2(``0,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2(``0,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  id: FromBeginEnd``2(``0,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: FromBeginEnd<TArg1,T>(TArg1, FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,T>(TArg1, FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,T>(TArg1, FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T> FromBeginEnd<TArg1,T> (TArg1 arg, Microsoft.FSharp.Core.FSharpFunc<Tuple<TArg1,AsyncCallback,object>,IAsyncResult> beginAction, Microsoft.FSharp.Core.FSharpFunc<IAsyncResult,T> endAction, Microsoft.FSharp.Core.FSharpOption<Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit>> cancelAction);
    parameters:
    - id: arg
      type: TArg1
      description: To be added.
    - id: beginAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg1,System.AsyncCallback,System.Object},System.IAsyncResult}
      description: To be added.
    - id: endAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,T}
      description: To be added.
    - id: cancelAction
      type: Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``2},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``2},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  id: FromBeginEnd``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``2},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: FromBeginEnd<TArg1,TArg2,T>(TArg1, TArg2, FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,TArg2,T>(TArg1, TArg2, FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,TArg2,T>(TArg1, TArg2, FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T> FromBeginEnd<TArg1,TArg2,T> (TArg1 arg1, TArg2 arg2, Microsoft.FSharp.Core.FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,object>,IAsyncResult> beginAction, Microsoft.FSharp.Core.FSharpFunc<IAsyncResult,T> endAction, Microsoft.FSharp.Core.FSharpOption<Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit>> cancelAction);
    parameters:
    - id: arg1
      type: TArg1
      description: To be added.
    - id: arg2
      type: TArg2
      description: To be added.
    - id: beginAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg1,TArg2,System.AsyncCallback,System.Object},System.IAsyncResult}
      description: To be added.
    - id: endAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,T}
      description: To be added.
    - id: cancelAction
      type: Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``3},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``3},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  id: FromBeginEnd``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``3},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: FromBeginEnd<TArg1,TArg2,TArg3,T>(TArg1, TArg2, TArg3, FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,TArg2,TArg3,T>(TArg1, TArg2, TArg3, FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,TArg2,TArg3,T>(TArg1, TArg2, TArg3, FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T> FromBeginEnd<TArg1,TArg2,TArg3,T> (TArg1 arg1, TArg2 arg2, TArg3 arg3, Microsoft.FSharp.Core.FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,object>,IAsyncResult> beginAction, Microsoft.FSharp.Core.FSharpFunc<IAsyncResult,T> endAction, Microsoft.FSharp.Core.FSharpOption<Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit>> cancelAction);
    parameters:
    - id: arg1
      type: TArg1
      description: To be added.
    - id: arg2
      type: TArg2
      description: To be added.
    - id: arg3
      type: TArg3
      description: To be added.
    - id: beginAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object},System.IAsyncResult}
      description: To be added.
    - id: endAction
      type: Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,T}
      description: To be added.
    - id: cancelAction
      type: Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit})
  id: FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: FromContinuations<T>(FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>)
  nameWithType: FSharpAsync.FromContinuations<T>(FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromContinuations<T>(FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T> FromContinuations<T> (Microsoft.FSharp.Core.FSharpFunc<Tuple<Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>,Microsoft.FSharp.Core.FSharpFunc<Exception,Microsoft.FSharp.Core.Unit>,Microsoft.FSharp.Core.FSharpFunc<OperationCanceledException,Microsoft.FSharp.Core.Unit>>,Microsoft.FSharp.Core.Unit> callback);
    parameters:
    - id: callback
      type: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Ignore``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.Ignore``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  id: Ignore``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: Ignore<T>(FSharpAsync<T>)
  nameWithType: FSharpAsync.Ignore<T>(FSharpAsync<T>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Ignore<T>(FSharpAsync<T>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> Ignore<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.Ignore``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.OnCancel(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.OnCancel(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})
  id: OnCancel(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: OnCancel(FSharpFunc<Unit,Unit>)
  nameWithType: FSharpAsync.OnCancel(FSharpFunc<Unit,Unit>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.OnCancel(FSharpFunc<Unit,Unit>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<IDisposable> OnCancel (Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit> interruption);
    parameters:
    - id: interruption
      type: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{System.IDisposable}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.OnCancel*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Parallel``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{``0}})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.Parallel``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{``0}})
  id: Parallel``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{``0}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: Parallel<T>(IEnumerable<FSharpAsync<T>>)
  nameWithType: FSharpAsync.Parallel<T>(IEnumerable<FSharpAsync<T>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Parallel<T>(IEnumerable<FSharpAsync<T>>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T[]> Parallel<T> (System.Collections.Generic.IEnumerable<Microsoft.FSharp.Control.FSharpAsync<T>> computations);
    parameters:
    - id: computations
      type: System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{T}}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{T[]}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.Parallel``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  id: RunSynchronously``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: RunSynchronously<T>(FSharpAsync<T>, FSharpOption<Int32>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.RunSynchronously<T>(FSharpAsync<T>, FSharpOption<Int32>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.RunSynchronously<T>(FSharpAsync<T>, FSharpOption<Int32>, FSharpOption<CancellationToken>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static T RunSynchronously<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation, Microsoft.FSharp.Core.FSharpOption<int> timeout, Microsoft.FSharp.Core.FSharpOption<System.Threading.CancellationToken> cancellationToken);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    - id: timeout
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
    - id: cancellationToken
      type: Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken}
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Sleep(System.Int32)
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.Sleep(System.Int32)
  id: Sleep(System.Int32)
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: Sleep(Int32)
  nameWithType: FSharpAsync.Sleep(Int32)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Sleep(Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> Sleep (int millisecondsDueTime);
    parameters:
    - id: millisecondsDueTime
      type: System.Int32
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.Sleep*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Start(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.Start(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  id: Start(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: Start(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.Start(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Start(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static void Start (Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> computation, Microsoft.FSharp.Core.FSharpOption<System.Threading.CancellationToken> cancellationToken);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: cancellationToken
      type: Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.Start*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.StartAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  id: StartAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: StartAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.StartAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>, FSharpOption<CancellationToken>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static System.Threading.Tasks.Task<T> StartAsTask<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation, Microsoft.FSharp.Core.FSharpOption<System.Threading.Tasks.TaskCreationOptions> taskCreationOptions, Microsoft.FSharp.Core.FSharpOption<System.Threading.CancellationToken> cancellationToken);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    - id: taskCreationOptions
      type: Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions}
      description: To be added.
    - id: cancellationToken
      type: Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{T}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.StartAsTask``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartChild``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.StartChild``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})
  id: StartChild``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: StartChild<T>(FSharpAsync<T>, FSharpOption<Int32>)
  nameWithType: FSharpAsync.StartChild<T>(FSharpAsync<T>, FSharpOption<Int32>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartChild<T>(FSharpAsync<T>, FSharpOption<Int32>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Control.FSharpAsync<T>> StartChild<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation, Microsoft.FSharp.Core.FSharpOption<int> millisecondsTimeout);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    - id: millisecondsTimeout
      type: Microsoft.FSharp.Core.FSharpOption{System.Int32}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Control.FSharpAsync{T}}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.StartChild``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions})
  id: StartChildAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: StartChildAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>)
  nameWithType: FSharpAsync.StartChildAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<System.Threading.Tasks.Task<T>> StartChildAsTask<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation, Microsoft.FSharp.Core.FSharpOption<System.Threading.Tasks.TaskCreationOptions> taskCreationOptions);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    - id: taskCreationOptions
      type: Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{System.Threading.Tasks.Task{T}}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartImmediate(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.StartImmediate(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  id: StartImmediate(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: StartImmediate(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.StartImmediate(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartImmediate(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static void StartImmediate (Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> computation, Microsoft.FSharp.Core.FSharpOption<System.Threading.CancellationToken> cancellationToken);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: cancellationToken
      type: Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.StartImmediate*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  id: StartWithContinuations``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: StartWithContinuations<T>(FSharpAsync<T>, FSharpFunc<T,Unit>, FSharpFunc<Exception,Unit>, FSharpFunc<OperationCanceledException,Unit>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.StartWithContinuations<T>(FSharpAsync<T>, FSharpFunc<T,Unit>, FSharpFunc<Exception,Unit>, FSharpFunc<OperationCanceledException,Unit>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations<T>(FSharpAsync<T>, FSharpFunc<T,Unit>, FSharpFunc<Exception,Unit>, FSharpFunc<OperationCanceledException,Unit>, FSharpOption<CancellationToken>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static void StartWithContinuations<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation, Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit> continuation, Microsoft.FSharp.Core.FSharpFunc<Exception,Microsoft.FSharp.Core.Unit> exceptionContinuation, Microsoft.FSharp.Core.FSharpFunc<OperationCanceledException,Microsoft.FSharp.Core.Unit> cancellationContinuation, Microsoft.FSharp.Core.FSharpOption<System.Threading.CancellationToken> cancellationToken);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    - id: continuation
      type: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: exceptionContinuation
      type: Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: cancellationContinuation
      type: Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}
      description: To be added.
    - id: cancellationToken
      type: Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(System.Threading.SynchronizationContext)
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(System.Threading.SynchronizationContext)
  id: SwitchToContext(System.Threading.SynchronizationContext)
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: SwitchToContext(SynchronizationContext)
  nameWithType: FSharpAsync.SwitchToContext(SynchronizationContext)
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(SynchronizationContext)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> SwitchToContext (System.Threading.SynchronizationContext syncContext);
    parameters:
    - id: syncContext
      type: System.Threading.SynchronizationContext
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.SwitchToContext*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread
  id: SwitchToNewThread
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: SwitchToNewThread()
  nameWithType: FSharpAsync.SwitchToNewThread()
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> SwitchToNewThread ();
    parameters: []
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool
  id: SwitchToThreadPool
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: SwitchToThreadPool()
  nameWithType: FSharpAsync.SwitchToThreadPool()
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool()
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit> SwitchToThreadPool ();
    parameters: []
    return:
      type: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit})
  commentId: M:Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit})
  id: TryCancelled``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit})
  parent: Microsoft.FSharp.Control.FSharpAsync
  langs:
  - csharp
  name: TryCancelled<T>(FSharpAsync<T>, FSharpFunc<OperationCanceledException,Unit>)
  nameWithType: FSharpAsync.TryCancelled<T>(FSharpAsync<T>, FSharpFunc<OperationCanceledException,Unit>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.TryCancelled<T>(FSharpAsync<T>, FSharpFunc<OperationCanceledException,Unit>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Control
  syntax:
    content: public static Microsoft.FSharp.Control.FSharpAsync<T> TryCancelled<T> (Microsoft.FSharp.Control.FSharpAsync<T> computation, Microsoft.FSharp.Core.FSharpFunc<OperationCanceledException,Microsoft.FSharp.Core.Unit> compensation);
    parameters:
    - id: computation
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
    - id: compensation
      type: Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}
      description: To be added.
    return:
      type: Microsoft.FSharp.Control.FSharpAsync`1
      description: To be added.
  overload: Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AsBeginEnd<TArg,T>(FSharpFunc<TArg,FSharpAsync<T>>)
  nameWithType: FSharpAsync.AsBeginEnd<TArg,T>(FSharpFunc<TArg,FSharpAsync<T>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd<TArg,T>(FSharpFunc<TArg,FSharpAsync<T>>)
- uid: System.Tuple`3
  name: Tuple<T1,T2,T3>
  nameWithType: Tuple<T1,T2,T3>
  fullName: System.Tuple<T1,T2,T3>
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: TArg
  name: TArg
  nameWithType: TArg
  fullName: TArg
- uid: System.AsyncCallback
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.FSharp.Core.Unit
  name: Unit
  nameWithType: Unit
  fullName: Microsoft.FSharp.Core.Unit
- uid: System.Tuple{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,T},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,Microsoft.FSharp.Core.Unit}}
  parent: System
  isExternal: false
  name: Tuple<FSharpFunc<Tuple<TArg,AsyncCallback,Object>,IAsyncResult>,FSharpFunc<IAsyncResult,T>,FSharpFunc<IAsyncResult,Unit>>
  nameWithType: Tuple<FSharpFunc<Tuple<TArg,AsyncCallback,Object>,IAsyncResult>,FSharpFunc<IAsyncResult,T>,FSharpFunc<IAsyncResult,Unit>>
  fullName: System.Tuple<Microsoft.FSharp.Core.FSharpFunc<System.Tuple<TArg,System.AsyncCallback,System.Object>,System.IAsyncResult>,Microsoft.FSharp.Core.FSharpFunc<System.IAsyncResult,T>,Microsoft.FSharp.Core.FSharpFunc<System.IAsyncResult,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg
    name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync`1
  name: FSharpAsync<T>
  nameWithType: FSharpAsync<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync<T>
- uid: Microsoft.FSharp.Core.FSharpFunc{TArg,Microsoft.FSharp.Control.FSharpAsync{T}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<TArg,FSharpAsync<T>>
  nameWithType: FSharpFunc<TArg,FSharpAsync<T>>
  fullName: Microsoft.FSharp.Core.FSharpFunc<TArg,Microsoft.FSharp.Control.FSharpAsync<T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg
    name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitEvent<TDel,T>(IEvent<TDel,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.AwaitEvent<TDel,T>(IEvent<TDel,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitEvent<TDel,T>(IEvent<TDel,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
- uid: Microsoft.FSharp.Control.IEvent`2
  name: IEvent<TDelegate,TArgs>
  nameWithType: IEvent<TDelegate,TArgs>
  fullName: Microsoft.FSharp.Control.IEvent<TDelegate,TArgs>
- uid: TDel
  name: TDel
  nameWithType: TDel
  fullName: TDel
- uid: Microsoft.FSharp.Control.IEvent{TDel,T}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: IEvent<TDel,T>
  nameWithType: IEvent<TDel,T>
  fullName: Microsoft.FSharp.Control.IEvent<TDel,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.IEvent`2
    name: IEvent
    nameWithType: IEvent
    fullName: Microsoft.FSharp.Control.IEvent
  - name: <
    nameWithType: <
    fullName: <
  - uid: TDel
    name: TDel
    nameWithType: TDel
    fullName: TDel
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<FSharpFunc<Unit,Unit>>
  nameWithType: FSharpOption<FSharpFunc<Unit,Unit>>
  fullName: Microsoft.FSharp.Core.FSharpOption<Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit>>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitIAsyncResult(IAsyncResult, FSharpOption<Int32>)
  nameWithType: FSharpAsync.AwaitIAsyncResult(IAsyncResult, FSharpOption<Int32>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(IAsyncResult, FSharpOption<Int32>)
- uid: System.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Control.FSharpAsync{System.Boolean}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<Boolean>
  nameWithType: FSharpAsync<Boolean>
  fullName: Microsoft.FSharp.Control.FSharpAsync<System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Core.FSharpOption{System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<Int32>
  nameWithType: FSharpOption<Int32>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitTask(System.Threading.Tasks.Task)
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitTask(Task)
  nameWithType: FSharpAsync.AwaitTask(Task)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitTask(Task)
- uid: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<Unit>
  nameWithType: FSharpAsync<Unit>
  fullName: Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitTask``1(System.Threading.Tasks.Task{``0})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitTask<T>(Task<T>)
  nameWithType: FSharpAsync.AwaitTask<T>(Task<T>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitTask<T>(Task<T>)
- uid: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task{T}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption{System.Int32})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitWaitHandle(WaitHandle, FSharpOption<Int32>)
  nameWithType: FSharpAsync.AwaitWaitHandle(WaitHandle, FSharpOption<Int32>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(WaitHandle, FSharpOption<Int32>)
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: CancelDefaultToken()
  nameWithType: FSharpAsync.CancelDefaultToken()
  fullName: Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken()
- uid: Microsoft.FSharp.Control.FSharpAsync.CancellationToken
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: CancellationToken
  nameWithType: FSharpAsync.CancellationToken
  fullName: Microsoft.FSharp.Control.FSharpAsync.CancellationToken
- uid: System.Threading.CancellationToken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.FSharp.Control.FSharpAsync{System.Threading.CancellationToken}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<CancellationToken>
  nameWithType: FSharpAsync<CancellationToken>
  fullName: Microsoft.FSharp.Control.FSharpAsync<System.Threading.CancellationToken>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.Catch``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Catch<T>(FSharpAsync<T>)
  nameWithType: FSharpAsync.Catch<T>(FSharpAsync<T>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Catch<T>(FSharpAsync<T>)
- uid: Microsoft.FSharp.Core.FSharpChoice`2
  name: FSharpChoice<T1,T2>
  nameWithType: FSharpChoice<T1,T2>
  fullName: Microsoft.FSharp.Core.FSharpChoice<T1,T2>
- uid: System.Exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.FSharpChoice{T,System.Exception}}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<FSharpChoice<T,Exception>>
  nameWithType: FSharpAsync<FSharpChoice<T,Exception>>
  fullName: Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Core.FSharpChoice<T,System.Exception>>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.FSharpChoice`2
    name: FSharpChoice
    nameWithType: FSharpChoice
    fullName: Microsoft.FSharp.Core.FSharpChoice
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: DefaultCancellationToken
  nameWithType: FSharpAsync.DefaultCancellationToken
  fullName: Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``0},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<T>(FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<T>(FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<T>(FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.AsyncCallback,System.Object},System.IAsyncResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>
  nameWithType: FSharpFunc<Tuple<AsyncCallback,Object>,IAsyncResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<System.AsyncCallback,System.Object>,System.IAsyncResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,T}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<IAsyncResult,T>
  nameWithType: FSharpFunc<IAsyncResult,T>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.IAsyncResult,T>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2(``0,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<TArg1,T>(TArg1, FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,T>(TArg1, FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,T>(TArg1, FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
- uid: TArg1
  isExternal: true
  name: TArg1
  nameWithType: TArg1
  fullName: TArg1
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg1,System.AsyncCallback,System.Object},System.IAsyncResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>
  nameWithType: FSharpFunc<Tuple<TArg1,AsyncCallback,Object>,IAsyncResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<TArg1,System.AsyncCallback,System.Object>,System.IAsyncResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``2},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<TArg1,TArg2,T>(TArg1, TArg2, FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,TArg2,T>(TArg1, TArg2, FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,TArg2,T>(TArg1, TArg2, FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
- uid: TArg2
  isExternal: true
  name: TArg2
  nameWithType: TArg2
  fullName: TArg2
- uid: System.Tuple`4
  name: Tuple<T1,T2,T3,T4>
  nameWithType: Tuple<T1,T2,T3,T4>
  fullName: System.Tuple<T1,T2,T3,T4>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg1,TArg2,System.AsyncCallback,System.Object},System.IAsyncResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>
  nameWithType: FSharpFunc<Tuple<TArg1,TArg2,AsyncCallback,Object>,IAsyncResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<TArg1,TArg2,System.AsyncCallback,System.Object>,System.IAsyncResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`4
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc{System.IAsyncResult,``3},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<TArg1,TArg2,TArg3,T>(TArg1, TArg2, TArg3, FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,TArg2,TArg3,T>(TArg1, TArg2, TArg3, FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,TArg2,TArg3,T>(TArg1, TArg2, TArg3, FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>, FSharpFunc<IAsyncResult,T>, FSharpOption<FSharpFunc<Unit,Unit>>)
- uid: TArg3
  isExternal: true
  name: TArg3
  nameWithType: TArg3
  fullName: TArg3
- uid: System.Tuple`5
  name: Tuple<T1,T2,T3,T4,T5>
  nameWithType: Tuple<T1,T2,T3,T4,T5>
  fullName: System.Tuple<T1,T2,T3,T4,T5>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object},System.IAsyncResult}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>
  nameWithType: FSharpFunc<Tuple<TArg1,TArg2,TArg3,AsyncCallback,Object>,IAsyncResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object>,System.IAsyncResult>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`5
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg3
    name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromContinuations<T>(FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>)
  nameWithType: FSharpAsync.FromContinuations<T>(FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromContinuations<T>(FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>)
- uid: System.OperationCanceledException
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>
  nameWithType: FSharpFunc<Tuple<FSharpFunc<T,Unit>,FSharpFunc<Exception,Unit>,FSharpFunc<OperationCanceledException,Unit>>,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Tuple<Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>,Microsoft.FSharp.Core.FSharpFunc<System.Exception,Microsoft.FSharp.Core.Unit>,Microsoft.FSharp.Core.FSharpFunc<System.OperationCanceledException,Microsoft.FSharp.Core.Unit>>,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.OperationCanceledException
    name: OperationCanceledException
    nameWithType: OperationCanceledException
    fullName: System.OperationCanceledException
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.Ignore``1(Microsoft.FSharp.Control.FSharpAsync{``0})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Ignore<T>(FSharpAsync<T>)
  nameWithType: FSharpAsync.Ignore<T>(FSharpAsync<T>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Ignore<T>(FSharpAsync<T>)
- uid: Microsoft.FSharp.Control.FSharpAsync.OnCancel(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: OnCancel(FSharpFunc<Unit,Unit>)
  nameWithType: FSharpAsync.OnCancel(FSharpFunc<Unit,Unit>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.OnCancel(FSharpFunc<Unit,Unit>)
- uid: System.IDisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.FSharp.Control.FSharpAsync{System.IDisposable}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<IDisposable>
  nameWithType: FSharpAsync<IDisposable>
  fullName: Microsoft.FSharp.Control.FSharpAsync<System.IDisposable>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Unit,Unit>
  nameWithType: FSharpFunc<Unit,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.Parallel``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{``0}})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Parallel<T>(IEnumerable<FSharpAsync<T>>)
  nameWithType: FSharpAsync.Parallel<T>(IEnumerable<FSharpAsync<T>>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Parallel<T>(IEnumerable<FSharpAsync<T>>)
- uid: Microsoft.FSharp.Control.FSharpAsync{T[]}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<T[]>
  nameWithType: FSharpAsync<T[]>
  fullName: Microsoft.FSharp.Control.FSharpAsync<T[]>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<FSharpAsync<T>>
  nameWithType: IEnumerable<FSharpAsync<T>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.FSharp.Control.FSharpAsync<T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: RunSynchronously<T>(FSharpAsync<T>, FSharpOption<Int32>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.RunSynchronously<T>(FSharpAsync<T>, FSharpOption<Int32>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.RunSynchronously<T>(FSharpAsync<T>, FSharpOption<Int32>, FSharpOption<CancellationToken>)
- uid: Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<CancellationToken>
  nameWithType: FSharpOption<CancellationToken>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Threading.CancellationToken>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.Sleep(System.Int32)
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Sleep(Int32)
  nameWithType: FSharpAsync.Sleep(Int32)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Sleep(Int32)
- uid: Microsoft.FSharp.Control.FSharpAsync.Start(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Start(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.Start(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.Start(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
- uid: Microsoft.FSharp.Control.FSharpAsync.StartAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.StartAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>, FSharpOption<CancellationToken>)
- uid: System.Threading.Tasks.TaskCreationOptions
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<TaskCreationOptions>
  nameWithType: FSharpOption<TaskCreationOptions>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Threading.Tasks.TaskCreationOptions>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.TaskCreationOptions
    name: TaskCreationOptions
    nameWithType: TaskCreationOptions
    fullName: System.Threading.Tasks.TaskCreationOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.StartChild``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartChild<T>(FSharpAsync<T>, FSharpOption<Int32>)
  nameWithType: FSharpAsync.StartChild<T>(FSharpAsync<T>, FSharpOption<Int32>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartChild<T>(FSharpAsync<T>, FSharpOption<Int32>)
- uid: Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Control.FSharpAsync{T}}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<FSharpAsync<T>>
  nameWithType: FSharpAsync<FSharpAsync<T>>
  fullName: Microsoft.FSharp.Control.FSharpAsync<Microsoft.FSharp.Control.FSharpAsync<T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartChildAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>)
  nameWithType: FSharpAsync.StartChildAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask<T>(FSharpAsync<T>, FSharpOption<TaskCreationOptions>)
- uid: Microsoft.FSharp.Control.FSharpAsync{System.Threading.Tasks.Task{T}}
  parent: Microsoft.FSharp.Control
  isExternal: false
  name: FSharpAsync<Task<T>>
  nameWithType: FSharpAsync<Task<T>>
  fullName: Microsoft.FSharp.Control.FSharpAsync<System.Threading.Tasks.Task<T>>
  spec.csharp:
  - uid: Microsoft.FSharp.Control.FSharpAsync`1
    name: FSharpAsync
    nameWithType: FSharpAsync
    fullName: Microsoft.FSharp.Control.FSharpAsync
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.StartImmediate(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartImmediate(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.StartImmediate(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartImmediate(FSharpAsync<Unit>, FSharpOption<CancellationToken>)
- uid: Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartWithContinuations<T>(FSharpAsync<T>, FSharpFunc<T,Unit>, FSharpFunc<Exception,Unit>, FSharpFunc<OperationCanceledException,Unit>, FSharpOption<CancellationToken>)
  nameWithType: FSharpAsync.StartWithContinuations<T>(FSharpAsync<T>, FSharpFunc<T,Unit>, FSharpFunc<Exception,Unit>, FSharpFunc<OperationCanceledException,Unit>, FSharpOption<CancellationToken>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations<T>(FSharpAsync<T>, FSharpFunc<T,Unit>, FSharpFunc<Exception,Unit>, FSharpFunc<OperationCanceledException,Unit>, FSharpOption<CancellationToken>)
- uid: Microsoft.FSharp.Core.FSharpFunc{T,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<T,Unit>
  nameWithType: FSharpFunc<T,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Exception,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Exception,Unit>
  nameWithType: FSharpFunc<Exception,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Exception,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<OperationCanceledException,Unit>
  nameWithType: FSharpFunc<OperationCanceledException,Unit>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.OperationCanceledException,Microsoft.FSharp.Core.Unit>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.OperationCanceledException
    name: OperationCanceledException
    nameWithType: OperationCanceledException
    fullName: System.OperationCanceledException
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.Unit
    name: Unit
    nameWithType: Unit
    fullName: Microsoft.FSharp.Core.Unit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(System.Threading.SynchronizationContext)
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: SwitchToContext(SynchronizationContext)
  nameWithType: FSharpAsync.SwitchToContext(SynchronizationContext)
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(SynchronizationContext)
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: SwitchToNewThread()
  nameWithType: FSharpAsync.SwitchToNewThread()
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread()
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: SwitchToThreadPool()
  nameWithType: FSharpAsync.SwitchToThreadPool()
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool()
- uid: Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc{System.OperationCanceledException,Microsoft.FSharp.Core.Unit})
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: TryCancelled<T>(FSharpAsync<T>, FSharpFunc<OperationCanceledException,Unit>)
  nameWithType: FSharpAsync.TryCancelled<T>(FSharpAsync<T>, FSharpFunc<OperationCanceledException,Unit>)
  fullName: Microsoft.FSharp.Control.FSharpAsync.TryCancelled<T>(FSharpAsync<T>, FSharpFunc<OperationCanceledException,Unit>)
- uid: Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AsBeginEnd<TArg,T>
  nameWithType: FSharpAsync.AsBeginEnd<TArg,T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd<TArg,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitEvent<TDel,T>
  nameWithType: FSharpAsync.AwaitEvent<TDel,T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitEvent<TDel,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitIAsyncResult
  nameWithType: FSharpAsync.AwaitIAsyncResult
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitTask*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitTask
  nameWithType: FSharpAsync.AwaitTask
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitTask
  monikers:
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitTask``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitTask<T>
  nameWithType: FSharpAsync.AwaitTask<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitTask<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: AwaitWaitHandle
  nameWithType: FSharpAsync.AwaitWaitHandle
  fullName: Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: CancelDefaultToken
  nameWithType: FSharpAsync.CancelDefaultToken
  fullName: Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.CancellationToken*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: CancellationToken
  nameWithType: FSharpAsync.CancellationToken
  fullName: Microsoft.FSharp.Control.FSharpAsync.CancellationToken
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Catch``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Catch<T>
  nameWithType: FSharpAsync.Catch<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.Catch<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: DefaultCancellationToken
  nameWithType: FSharpAsync.DefaultCancellationToken
  fullName: Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<T>
  nameWithType: FSharpAsync.FromBeginEnd<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<TArg1,T>
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<TArg1,TArg2,T>
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,TArg2,T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,TArg2,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromBeginEnd<TArg1,TArg2,TArg3,T>
  nameWithType: FSharpAsync.FromBeginEnd<TArg1,TArg2,TArg3,T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd<TArg1,TArg2,TArg3,T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: FromContinuations<T>
  nameWithType: FSharpAsync.FromContinuations<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.FromContinuations<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Ignore``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Ignore<T>
  nameWithType: FSharpAsync.Ignore<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.Ignore<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.OnCancel*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: OnCancel
  nameWithType: FSharpAsync.OnCancel
  fullName: Microsoft.FSharp.Control.FSharpAsync.OnCancel
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Parallel``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Parallel<T>
  nameWithType: FSharpAsync.Parallel<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.Parallel<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: RunSynchronously<T>
  nameWithType: FSharpAsync.RunSynchronously<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.RunSynchronously<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Sleep*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Sleep
  nameWithType: FSharpAsync.Sleep
  fullName: Microsoft.FSharp.Control.FSharpAsync.Sleep
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.Start*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: Start
  nameWithType: FSharpAsync.Start
  fullName: Microsoft.FSharp.Control.FSharpAsync.Start
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartAsTask``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartAsTask<T>
  nameWithType: FSharpAsync.StartAsTask<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartAsTask<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartChild``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartChild<T>
  nameWithType: FSharpAsync.StartChild<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartChild<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartChildAsTask<T>
  nameWithType: FSharpAsync.StartChildAsTask<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartImmediate*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartImmediate
  nameWithType: FSharpAsync.StartImmediate
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartImmediate
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: StartWithContinuations<T>
  nameWithType: FSharpAsync.StartWithContinuations<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToContext*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: SwitchToContext
  nameWithType: FSharpAsync.SwitchToContext
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToContext
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: SwitchToNewThread
  nameWithType: FSharpAsync.SwitchToNewThread
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: SwitchToThreadPool
  nameWithType: FSharpAsync.SwitchToThreadPool
  fullName: Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
- uid: Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1*
  parent: Microsoft.FSharp.Control.FSharpAsync
  isExternal: false
  name: TryCancelled<T>
  nameWithType: FSharpAsync.TryCancelled<T>
  fullName: Microsoft.FSharp.Control.FSharpAsync.TryCancelled<T>
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Control/FSharpAsync.xml
