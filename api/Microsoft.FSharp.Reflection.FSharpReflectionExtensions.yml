### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  commentId: T:Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  id: FSharpReflectionExtensions
  children:
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetExceptionFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetRecordFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetUnionCases#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsExceptionRepresentation#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsRecord#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsUnion#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetExceptionFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetRecordFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetUnionFields#Static(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeRecord#Static(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeUnion#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructor#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructorInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructor#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructorInfo#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionReader#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagMemberInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  - Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  langs:
  - csharp
  name: FSharpReflectionExtensions
  nameWithType: FSharpReflectionExtensions
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: >-
      [Microsoft.FSharp.Core.AutoOpen]

      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.Module)]

      public static class FSharpReflectionExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.AutoOpenAttribute
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetExceptionFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetExceptionFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpType#GetExceptionFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: GetExceptionFields.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetExceptionFields.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetExceptionFields.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo[] FSharpType.GetExceptionFields.Static (Type exceptionType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: exceptionType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetExceptionFields#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetRecordFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetRecordFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpType#GetRecordFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: GetRecordFields.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetRecordFields.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetRecordFields.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.PropertyInfo[] FSharpType.GetRecordFields.Static (Type recordType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetRecordFields#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetUnionCases#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetUnionCases#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpType#GetUnionCases#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: GetUnionCases.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetUnionCases.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetUnionCases.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Reflection.UnionCaseInfo[] FSharpType.GetUnionCases.Static (Type unionType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: unionType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: Microsoft.FSharp.Reflection.UnionCaseInfo[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetUnionCases#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsExceptionRepresentation#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsExceptionRepresentation#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpType#IsExceptionRepresentation#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: IsExceptionRepresentation.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.IsExceptionRepresentation.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.IsExceptionRepresentation.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool FSharpType.IsExceptionRepresentation.Static (Type exceptionType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: exceptionType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsExceptionRepresentation#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsRecord#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsRecord#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpType#IsRecord#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: IsRecord.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.IsRecord.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.IsRecord.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool FSharpType.IsRecord.Static (Type typ, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: typ
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsRecord#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsUnion#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsUnion#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpType#IsUnion#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: IsUnion.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.IsUnion.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.IsUnion.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static bool FSharpType.IsUnion.Static (Type typ, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: typ
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsUnion#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetExceptionFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetExceptionFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#GetExceptionFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: GetExceptionFields.Static(Object, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetExceptionFields.Static(Object, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetExceptionFields.Static(Object, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object[] FSharpValue.GetExceptionFields.Static (object exn, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: exn
      type: System.Object
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Object[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetExceptionFields#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetRecordFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetRecordFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#GetRecordFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: GetRecordFields.Static(Object, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetRecordFields.Static(Object, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetRecordFields.Static(Object, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object[] FSharpValue.GetRecordFields.Static (object record, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: record
      type: System.Object
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Object[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetRecordFields#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetUnionFields#Static(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetUnionFields#Static(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#GetUnionFields#Static(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: GetUnionFields.Static(Object, Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetUnionFields.Static(Object, Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetUnionFields.Static(Object, Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Tuple<Microsoft.FSharp.Reflection.UnionCaseInfo,object[]> FSharpValue.GetUnionFields.Static (object value, Type unionType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: value
      type: System.Object
      description: To be added.
    - id: unionType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetUnionFields#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeRecord#Static(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeRecord#Static(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#MakeRecord#Static(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: MakeRecord.Static(Type, Object[], FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.MakeRecord.Static(Type, Object[], FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.MakeRecord.Static(Type, Object[], FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object FSharpValue.MakeRecord.Static (Type recordType, object[] values, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: values
      type: System.Object[]
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeRecord#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeUnion#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeUnion#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#MakeUnion#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: MakeUnion.Static(UnionCaseInfo, Object[], FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.MakeUnion.Static(UnionCaseInfo, Object[], FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.MakeUnion.Static(UnionCaseInfo, Object[], FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object FSharpValue.MakeUnion.Static (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, object[] args, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: args
      type: System.Object[]
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeUnion#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructor#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructor#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeRecordConstructor#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeRecordConstructor.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeRecordConstructor.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeRecordConstructor.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object[],object> FSharpValue.PreComputeRecordConstructor.Static (Type recordType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object[],System.Object}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructor#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructorInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructorInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeRecordConstructorInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeRecordConstructorInfo.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeRecordConstructorInfo.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeRecordConstructorInfo.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.ConstructorInfo FSharpValue.PreComputeRecordConstructorInfo.Static (Type recordType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Reflection.ConstructorInfo
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructorInfo#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeRecordReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeRecordReader.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeRecordReader.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeRecordReader.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,object[]> FSharpValue.PreComputeRecordReader.Static (Type recordType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object[]}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordReader#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructor#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructor#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeUnionConstructor#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeUnionConstructor.Static(UnionCaseInfo, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionConstructor.Static(UnionCaseInfo, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionConstructor.Static(UnionCaseInfo, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object[],object> FSharpValue.PreComputeUnionConstructor.Static (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object[],System.Object}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructor#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructorInfo#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructorInfo#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeUnionConstructorInfo#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeUnionConstructorInfo.Static(UnionCaseInfo, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionConstructorInfo.Static(UnionCaseInfo, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionConstructorInfo.Static(UnionCaseInfo, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.MethodInfo FSharpValue.PreComputeUnionConstructorInfo.Static (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Reflection.MethodInfo
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructorInfo#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionReader#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionReader#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeUnionReader#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeUnionReader.Static(UnionCaseInfo, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionReader.Static(UnionCaseInfo, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionReader.Static(UnionCaseInfo, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,object[]> FSharpValue.PreComputeUnionReader.Static (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object[]}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionReader#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagMemberInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagMemberInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeUnionTagMemberInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeUnionTagMemberInfo.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionTagMemberInfo.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionTagMemberInfo.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.MemberInfo FSharpValue.PreComputeUnionTagMemberInfo.Static (Type unionType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: unionType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: System.Reflection.MemberInfo
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagMemberInfo#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  commentId: M:Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  id: FSharpValue#PreComputeUnionTagReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  isEii: true
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  langs:
  - csharp
  name: PreComputeUnionTagReader.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionTagReader.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionTagReader.Static(Type, FSharpOption<Boolean>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,int> FSharpValue.PreComputeUnionTagReader.Static (Type unionType, Microsoft.FSharp.Core.FSharpOption<bool> allowAccessToPrivateRepresentation);
    parameters:
    - id: unionType
      type: System.Type
      description: To be added.
    - id: allowAccessToPrivateRepresentation
      type: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagReader#Static*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetExceptionFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: GetExceptionFields.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetExceptionFields.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetExceptionFields.Static(Type, FSharpOption<Boolean>)
- uid: System.Reflection.PropertyInfo
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: System.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.FSharp.Core.FSharpOption{System.Boolean}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<Boolean>
  nameWithType: FSharpOption<Boolean>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Boolean>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetRecordFields#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: GetRecordFields.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetRecordFields.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetRecordFields.Static(Type, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetUnionCases#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: GetUnionCases.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetUnionCases.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetUnionCases.Static(Type, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.UnionCaseInfo
  name: UnionCaseInfo
  nameWithType: UnionCaseInfo
  fullName: Microsoft.FSharp.Reflection.UnionCaseInfo
- uid: Microsoft.FSharp.Reflection.UnionCaseInfo[]
  parent: Microsoft.FSharp.Reflection
  isExternal: false
  name: UnionCaseInfo[]
  nameWithType: UnionCaseInfo[]
  fullName: Microsoft.FSharp.Reflection.UnionCaseInfo[]
  spec.csharp:
  - uid: Microsoft.FSharp.Reflection.UnionCaseInfo
    name: UnionCaseInfo
    nameWithType: UnionCaseInfo
    fullName: Microsoft.FSharp.Reflection.UnionCaseInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsExceptionRepresentation#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: IsExceptionRepresentation.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.IsExceptionRepresentation.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.IsExceptionRepresentation.Static(Type, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsRecord#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: IsRecord.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.IsRecord.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.IsRecord.Static(Type, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsUnion#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: IsUnion.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.IsUnion.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.IsUnion.Static(Type, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetExceptionFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: GetExceptionFields.Static(Object, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetExceptionFields.Static(Object, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetExceptionFields.Static(Object, FSharpOption<Boolean>)
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetRecordFields#Static(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: GetRecordFields.Static(Object, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetRecordFields.Static(Object, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetRecordFields.Static(Object, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetUnionFields#Static(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: GetUnionFields.Static(Object, Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.GetUnionFields.Static(Object, Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.GetUnionFields.Static(Object, Type, FSharpOption<Boolean>)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: System.Tuple{Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]}
  parent: System
  isExternal: false
  name: Tuple<UnionCaseInfo,Object[]>
  nameWithType: Tuple<UnionCaseInfo,Object[]>
  fullName: System.Tuple<Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Reflection.UnionCaseInfo
    name: UnionCaseInfo
    nameWithType: UnionCaseInfo
    fullName: Microsoft.FSharp.Reflection.UnionCaseInfo
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeRecord#Static(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: MakeRecord.Static(Type, Object[], FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.MakeRecord.Static(Type, Object[], FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.MakeRecord.Static(Type, Object[], FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeUnion#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: MakeUnion.Static(UnionCaseInfo, Object[], FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.MakeUnion.Static(UnionCaseInfo, Object[], FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.MakeUnion.Static(UnionCaseInfo, Object[], FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructor#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeRecordConstructor.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeRecordConstructor.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeRecordConstructor.Static(Type, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Object[],System.Object}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Object[],Object>
  nameWithType: FSharpFunc<Object[],Object>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Object[],System.Object>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructorInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeRecordConstructorInfo.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeRecordConstructorInfo.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeRecordConstructorInfo.Static(Type, FSharpOption<Boolean>)
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeRecordReader.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeRecordReader.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeRecordReader.Static(Type, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object[]}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Object,Object[]>
  nameWithType: FSharpFunc<Object,Object[]>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Object,System.Object[]>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructor#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeUnionConstructor.Static(UnionCaseInfo, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionConstructor.Static(UnionCaseInfo, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionConstructor.Static(UnionCaseInfo, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructorInfo#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeUnionConstructorInfo.Static(UnionCaseInfo, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionConstructorInfo.Static(UnionCaseInfo, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionConstructorInfo.Static(UnionCaseInfo, FSharpOption<Boolean>)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionReader#Static(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeUnionReader.Static(UnionCaseInfo, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionReader.Static(UnionCaseInfo, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionReader.Static(UnionCaseInfo, FSharpOption<Boolean>)
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagMemberInfo#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeUnionTagMemberInfo.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionTagMemberInfo.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionTagMemberInfo.Static(Type, FSharpOption<Boolean>)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagReader#Static(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: PreComputeUnionTagReader.Static(Type, FSharpOption<Boolean>)
  nameWithType: FSharpReflectionExtensions.PreComputeUnionTagReader.Static(Type, FSharpOption<Boolean>)
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.PreComputeUnionTagReader.Static(Type, FSharpOption<Boolean>)
- uid: System.Int32
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Object,Int32>
  nameWithType: FSharpFunc<Object,Int32>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Object,System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetExceptionFields#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpType.GetExceptionFields.Static
  nameWithType: FSharpReflectionExtensions.FSharpType.GetExceptionFields.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType.GetExceptionFields.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetRecordFields#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpType.GetRecordFields.Static
  nameWithType: FSharpReflectionExtensions.FSharpType.GetRecordFields.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType.GetRecordFields.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#GetUnionCases#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpType.GetUnionCases.Static
  nameWithType: FSharpReflectionExtensions.FSharpType.GetUnionCases.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType.GetUnionCases.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsExceptionRepresentation#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpType.IsExceptionRepresentation.Static
  nameWithType: FSharpReflectionExtensions.FSharpType.IsExceptionRepresentation.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType.IsExceptionRepresentation.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsRecord#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpType.IsRecord.Static
  nameWithType: FSharpReflectionExtensions.FSharpType.IsRecord.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType.IsRecord.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType#IsUnion#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpType.IsUnion.Static
  nameWithType: FSharpReflectionExtensions.FSharpType.IsUnion.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpType.IsUnion.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetExceptionFields#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.GetExceptionFields.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.GetExceptionFields.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.GetExceptionFields.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetRecordFields#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.GetRecordFields.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.GetRecordFields.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.GetRecordFields.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#GetUnionFields#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.GetUnionFields.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.GetUnionFields.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.GetUnionFields.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeRecord#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.MakeRecord.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.MakeRecord.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.MakeRecord.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#MakeUnion#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.MakeUnion.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.MakeUnion.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.MakeUnion.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructor#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeRecordConstructor.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeRecordConstructor.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeRecordConstructor.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordConstructorInfo#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeRecordConstructorInfo.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeRecordConstructorInfo.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeRecordConstructorInfo.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeRecordReader#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeRecordReader.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeRecordReader.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeRecordReader.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructor#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeUnionConstructor.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeUnionConstructor.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeUnionConstructor.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionConstructorInfo#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeUnionConstructorInfo.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeUnionConstructorInfo.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeUnionConstructorInfo.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionReader#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeUnionReader.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeUnionReader.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeUnionReader.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagMemberInfo#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeUnionTagMemberInfo.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeUnionTagMemberInfo.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeUnionTagMemberInfo.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
- uid: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue#PreComputeUnionTagReader#Static*
  parent: Microsoft.FSharp.Reflection.FSharpReflectionExtensions
  isExternal: false
  name: FSharpValue.PreComputeUnionTagReader.Static
  nameWithType: FSharpReflectionExtensions.FSharpValue.PreComputeUnionTagReader.Static
  fullName: Microsoft.FSharp.Reflection.FSharpReflectionExtensions.FSharpValue.PreComputeUnionTagReader.Static
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpReflectionExtensions.xml
