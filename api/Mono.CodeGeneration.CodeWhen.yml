### YamlMime:ManagedReference
items:
- uid: Mono.CodeGeneration.CodeWhen
  commentId: T:Mono.CodeGeneration.CodeWhen
  id: CodeWhen
  children:
  - Mono.CodeGeneration.CodeWhen.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeWhen.Generate(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeWhen.GetResultType
  - Mono.CodeGeneration.CodeWhen.PrintCode(Mono.CodeGeneration.CodeWriter)
  langs:
  - csharp
  name: CodeWhen
  nameWithType: CodeWhen
  fullName: Mono.CodeGeneration.CodeWhen
  type: Class
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: 'public class CodeWhen : Mono.CodeGeneration.CodeExpression'
  inheritance:
  - System.Object
  - Mono.CodeGeneration.CodeItem
  - Mono.CodeGeneration.CodeExpression
  implements: []
  inheritedMembers:
  - Mono.CodeGeneration.CodeExpression.Add(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.And(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.AreNotEqual(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.ArrayLength
  - Mono.CodeGeneration.CodeExpression.Call(System.Reflection.MethodInfo,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.Call(System.String,Mono.CodeGeneration.CodeExpression[])
  - Mono.CodeGeneration.CodeExpression.CallToString
  - Mono.CodeGeneration.CodeExpression.CastTo(System.Type)
  - Mono.CodeGeneration.CodeExpression.Divide(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.GenerateAsStatement(System.Reflection.Emit.ILGenerator)
  - Mono.CodeGeneration.CodeExpression.Is(System.Type)
  - Mono.CodeGeneration.CodeExpression.IsGreaterEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsGreaterThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsNull
  - Mono.CodeGeneration.CodeExpression.IsNumber
  - Mono.CodeGeneration.CodeExpression.IsSmallerEqualThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.IsSmallerThan(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.FieldInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.Reflection.PropertyInfo)
  - Mono.CodeGeneration.CodeExpression.Item(System.String)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.Reflection.MemberInfo)
  - Mono.CodeGeneration.CodeExpression.MemGet(System.String)
  - Mono.CodeGeneration.CodeExpression.Multiply(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.Not(Mono.CodeGeneration.CodeExpression)
  - Mono.CodeGeneration.CodeExpression.NullValue(System.Type)
  - Mono.CodeGeneration.CodeExpression.Subtract(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
- uid: Mono.CodeGeneration.CodeWhen.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  commentId: M:Mono.CodeGeneration.CodeWhen.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  id: '#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)'
  parent: Mono.CodeGeneration.CodeWhen
  langs:
  - csharp
  name: CodeWhen(CodeExpression, CodeExpression, CodeExpression)
  nameWithType: CodeWhen.CodeWhen(CodeExpression, CodeExpression, CodeExpression)
  fullName: CodeWhen.CodeWhen(CodeExpression, CodeExpression, CodeExpression)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public CodeWhen (Mono.CodeGeneration.CodeExpression condition, Mono.CodeGeneration.CodeExpression trueResult, Mono.CodeGeneration.CodeExpression falseResult);
    parameters:
    - id: condition
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: trueResult
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
    - id: falseResult
      type: Mono.CodeGeneration.CodeExpression
      description: To be added.
  overload: Mono.CodeGeneration.CodeWhen.#ctor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
- uid: Mono.CodeGeneration.CodeWhen.Generate(System.Reflection.Emit.ILGenerator)
  commentId: M:Mono.CodeGeneration.CodeWhen.Generate(System.Reflection.Emit.ILGenerator)
  id: Generate(System.Reflection.Emit.ILGenerator)
  parent: Mono.CodeGeneration.CodeWhen
  langs:
  - csharp
  name: Generate(ILGenerator)
  nameWithType: CodeWhen.Generate(ILGenerator)
  fullName: CodeWhen.Generate(ILGenerator)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public override void Generate (System.Reflection.Emit.ILGenerator gen);
    parameters:
    - id: gen
      type: System.Reflection.Emit.ILGenerator
      description: To be added.
  overload: Mono.CodeGeneration.CodeWhen.Generate*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
- uid: Mono.CodeGeneration.CodeWhen.GetResultType
  commentId: M:Mono.CodeGeneration.CodeWhen.GetResultType
  id: GetResultType
  parent: Mono.CodeGeneration.CodeWhen
  langs:
  - csharp
  name: GetResultType()
  nameWithType: CodeWhen.GetResultType()
  fullName: CodeWhen.GetResultType()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public override Type GetResultType ();
    parameters: []
    return:
      type: System.Type
      description: To be added.
  overload: Mono.CodeGeneration.CodeWhen.GetResultType*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
- uid: Mono.CodeGeneration.CodeWhen.PrintCode(Mono.CodeGeneration.CodeWriter)
  commentId: M:Mono.CodeGeneration.CodeWhen.PrintCode(Mono.CodeGeneration.CodeWriter)
  id: PrintCode(Mono.CodeGeneration.CodeWriter)
  parent: Mono.CodeGeneration.CodeWhen
  langs:
  - csharp
  name: PrintCode(CodeWriter)
  nameWithType: CodeWhen.PrintCode(CodeWriter)
  fullName: CodeWhen.PrintCode(CodeWriter)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: Mono.CodeGeneration
  syntax:
    content: public override void PrintCode (Mono.CodeGeneration.CodeWriter cp);
    parameters:
    - id: cp
      type: Mono.CodeGeneration.CodeWriter
      description: To be added.
  overload: Mono.CodeGeneration.CodeWhen.PrintCode*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
references:
- uid: Mono.CodeGeneration.CodeExpression
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: Mono.CodeGeneration.CodeExpression
- uid: Mono.CodeGeneration.CodeWhen.#ctor(Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression,Mono.CodeGeneration.CodeExpression)
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: CodeWhen(CodeExpression, CodeExpression, CodeExpression)
  nameWithType: CodeWhen.CodeWhen(CodeExpression, CodeExpression, CodeExpression)
  fullName: CodeWhen.CodeWhen(CodeExpression, CodeExpression, CodeExpression)
- uid: Mono.CodeGeneration.CodeWhen.Generate(System.Reflection.Emit.ILGenerator)
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: Generate(ILGenerator)
  nameWithType: CodeWhen.Generate(ILGenerator)
  fullName: CodeWhen.Generate(ILGenerator)
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: Mono.CodeGeneration.CodeWhen.GetResultType
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: GetResultType()
  nameWithType: CodeWhen.GetResultType()
  fullName: CodeWhen.GetResultType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Mono.CodeGeneration.CodeWhen.PrintCode(Mono.CodeGeneration.CodeWriter)
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: PrintCode(CodeWriter)
  nameWithType: CodeWhen.PrintCode(CodeWriter)
  fullName: CodeWhen.PrintCode(CodeWriter)
- uid: Mono.CodeGeneration.CodeWriter
  parent: Mono.CodeGeneration
  isExternal: false
  name: CodeWriter
  nameWithType: CodeWriter
  fullName: Mono.CodeGeneration.CodeWriter
- uid: Mono.CodeGeneration.CodeWhen.#ctor*
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: CodeWhen
  nameWithType: CodeWhen.CodeWhen
  fullName: CodeWhen.CodeWhen
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
- uid: Mono.CodeGeneration.CodeWhen.Generate*
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: Generate
  nameWithType: CodeWhen.Generate
  fullName: CodeWhen.Generate
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
- uid: Mono.CodeGeneration.CodeWhen.GetResultType*
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: GetResultType
  nameWithType: CodeWhen.GetResultType
  fullName: CodeWhen.GetResultType
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
- uid: Mono.CodeGeneration.CodeWhen.PrintCode*
  parent: Mono.CodeGeneration.CodeWhen
  isExternal: false
  name: PrintCode
  nameWithType: CodeWhen.PrintCode
  fullName: CodeWhen.PrintCode
  monikers:
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Mono.CodeGeneration/CodeWhen.xml
