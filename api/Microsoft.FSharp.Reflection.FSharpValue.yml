### YamlMime:ManagedReference
items:
- uid: Microsoft.FSharp.Reflection.FSharpValue
  commentId: T:Microsoft.FSharp.Reflection.FSharpValue
  id: FSharpValue
  children:
  - Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.GetRecordField(System.Object,System.Reflection.PropertyInfo)
  - Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.GetTupleField(System.Object,System.Int32)
  - Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields(System.Object)
  - Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.MakeFunction(System.Type,Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object})
  - Microsoft.FSharp.Reflection.FSharpValue.MakeRecord(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(System.Object[],System.Type)
  - Microsoft.FSharp.Reflection.FSharpValue.MakeUnion(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader(System.Reflection.PropertyInfo)
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor(System.Type)
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo(System.Type)
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo(System.Type,System.Int32)
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader(System.Type)
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  - Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  langs:
  - csharp
  name: FSharpValue
  nameWithType: FSharpValue
  fullName: Microsoft.FSharp.Reflection.FSharpValue
  type: Class
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: >-
      [Microsoft.FSharp.Core.AbstractClass]

      [Microsoft.FSharp.Core.CompilationMapping(Microsoft.FSharp.Core.SourceConstructFlags.ObjectType)]

      [Microsoft.FSharp.Core.Sealed]

      public static class FSharpValue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.FSharp.Core.AbstractClassAttribute
  - type: Microsoft.FSharp.Core.CompilationMappingAttribute
  - type: Microsoft.FSharp.Core.SealedAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: GetExceptionFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: GetExceptionFields(Object, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.GetExceptionFields(Object, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields(Object, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object[] GetExceptionFields (object exn, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: exn
      type: System.Object
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Object[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetRecordField(System.Object,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.GetRecordField(System.Object,System.Reflection.PropertyInfo)
  id: GetRecordField(System.Object,System.Reflection.PropertyInfo)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: GetRecordField(Object, PropertyInfo)
  nameWithType: FSharpValue.GetRecordField(Object, PropertyInfo)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetRecordField(Object, PropertyInfo)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object GetRecordField (object record, System.Reflection.PropertyInfo info);
    parameters:
    - id: record
      type: System.Object
      description: To be added.
    - id: info
      type: System.Reflection.PropertyInfo
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.GetRecordField*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: GetRecordFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: GetRecordFields(Object, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.GetRecordFields(Object, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields(Object, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object[] GetRecordFields (object record, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: record
      type: System.Object
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Object[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetTupleField(System.Object,System.Int32)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.GetTupleField(System.Object,System.Int32)
  id: GetTupleField(System.Object,System.Int32)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: GetTupleField(Object, Int32)
  nameWithType: FSharpValue.GetTupleField(Object, Int32)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetTupleField(Object, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object GetTupleField (object tuple, int index);
    parameters:
    - id: tuple
      type: System.Object
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.GetTupleField*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields(System.Object)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields(System.Object)
  id: GetTupleFields(System.Object)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: GetTupleFields(Object)
  nameWithType: FSharpValue.GetTupleFields(Object)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields(Object)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object[] GetTupleFields (object tuple);
    parameters:
    - id: tuple
      type: System.Object
      description: To be added.
    return:
      type: System.Object[]
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: GetUnionFields(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: GetUnionFields(Object, Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.GetUnionFields(Object, Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields(Object, Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Tuple<Microsoft.FSharp.Reflection.UnionCaseInfo,object[]> GetUnionFields (object value, Type unionType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: value
      type: System.Object
      description: To be added.
    - id: unionType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Tuple{Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeFunction(System.Type,Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.MakeFunction(System.Type,Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object})
  id: MakeFunction(System.Type,Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: MakeFunction(Type, FSharpFunc<Object,Object>)
  nameWithType: FSharpValue.MakeFunction(Type, FSharpFunc<Object,Object>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeFunction(Type, FSharpFunc<Object,Object>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object MakeFunction (Type functionType, Microsoft.FSharp.Core.FSharpFunc<object,object> implementation);
    parameters:
    - id: functionType
      type: System.Type
      description: To be added.
    - id: implementation
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.MakeFunction*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeRecord(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.MakeRecord(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: MakeRecord(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: MakeRecord(Type, Object[], FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.MakeRecord(Type, Object[], FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeRecord(Type, Object[], FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object MakeRecord (Type recordType, object[] values, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: values
      type: System.Object[]
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.MakeRecord*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(System.Object[],System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(System.Object[],System.Type)
  id: MakeTuple(System.Object[],System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: MakeTuple(Object[], Type)
  nameWithType: FSharpValue.MakeTuple(Object[], Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(Object[], Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object MakeTuple (object[] tupleElements, Type tupleType);
    parameters:
    - id: tupleElements
      type: System.Object[]
      description: To be added.
    - id: tupleType
      type: System.Type
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.MakeTuple*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeUnion(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.MakeUnion(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: MakeUnion(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: MakeUnion(UnionCaseInfo, Object[], FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.MakeUnion(UnionCaseInfo, Object[], FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeUnion(UnionCaseInfo, Object[], FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static object MakeUnion (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, object[] args, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: args
      type: System.Object[]
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.MakeUnion*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeRecordConstructor(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeRecordConstructor(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeRecordConstructor(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object[],object> PreComputeRecordConstructor (Type recordType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object[],System.Object}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeRecordConstructorInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeRecordConstructorInfo(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeRecordConstructorInfo(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.ConstructorInfo PreComputeRecordConstructorInfo (Type recordType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Reflection.ConstructorInfo
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader(System.Reflection.PropertyInfo)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader(System.Reflection.PropertyInfo)
  id: PreComputeRecordFieldReader(System.Reflection.PropertyInfo)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeRecordFieldReader(PropertyInfo)
  nameWithType: FSharpValue.PreComputeRecordFieldReader(PropertyInfo)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader(PropertyInfo)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,object> PreComputeRecordFieldReader (System.Reflection.PropertyInfo info);
    parameters:
    - id: info
      type: System.Reflection.PropertyInfo
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeRecordReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeRecordReader(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeRecordReader(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,object[]> PreComputeRecordReader (Type recordType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: recordType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object[]}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor(System.Type)
  id: PreComputeTupleConstructor(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeTupleConstructor(Type)
  nameWithType: FSharpValue.PreComputeTupleConstructor(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object[],object> PreComputeTupleConstructor (Type tupleType);
    parameters:
    - id: tupleType
      type: System.Type
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object[],System.Object}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo(System.Type)
  id: PreComputeTupleConstructorInfo(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeTupleConstructorInfo(Type)
  nameWithType: FSharpValue.PreComputeTupleConstructorInfo(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Tuple<System.Reflection.ConstructorInfo,Microsoft.FSharp.Core.FSharpOption<Type>> PreComputeTupleConstructorInfo (Type tupleType);
    parameters:
    - id: tupleType
      type: System.Type
      description: To be added.
    return:
      type: System.Tuple{System.Reflection.ConstructorInfo,Microsoft.FSharp.Core.FSharpOption{System.Type}}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo(System.Type,System.Int32)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo(System.Type,System.Int32)
  id: PreComputeTuplePropertyInfo(System.Type,System.Int32)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeTuplePropertyInfo(Type, Int32)
  nameWithType: FSharpValue.PreComputeTuplePropertyInfo(Type, Int32)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo(Type, Int32)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Tuple<System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption<Tuple<Type,int>>> PreComputeTuplePropertyInfo (Type tupleType, int index);
    parameters:
    - id: tupleType
      type: System.Type
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Tuple{System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Type,System.Int32}}}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader(System.Type)
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader(System.Type)
  id: PreComputeTupleReader(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeTupleReader(Type)
  nameWithType: FSharpValue.PreComputeTupleReader(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader(Type)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,object[]> PreComputeTupleReader (Type tupleType);
    parameters:
    - id: tupleType
      type: System.Type
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object[]}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeUnionConstructor(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeUnionConstructor(UnionCaseInfo, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionConstructor(UnionCaseInfo, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor(UnionCaseInfo, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object[],object> PreComputeUnionConstructor (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object[],System.Object}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeUnionConstructorInfo(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeUnionConstructorInfo(UnionCaseInfo, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionConstructorInfo(UnionCaseInfo, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo(UnionCaseInfo, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.MethodInfo PreComputeUnionConstructorInfo (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Reflection.MethodInfo
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeUnionReader(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeUnionReader(UnionCaseInfo, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionReader(UnionCaseInfo, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader(UnionCaseInfo, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,object[]> PreComputeUnionReader (Microsoft.FSharp.Reflection.UnionCaseInfo unionCase, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: unionCase
      type: Microsoft.FSharp.Reflection.UnionCaseInfo
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object[]}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeUnionTagMemberInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeUnionTagMemberInfo(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionTagMemberInfo(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static System.Reflection.MemberInfo PreComputeUnionTagMemberInfo (Type unionType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: unionType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: System.Reflection.MemberInfo
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  commentId: M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  id: PreComputeUnionTagReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  langs:
  - csharp
  name: PreComputeUnionTagReader(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionTagReader(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader(Type, FSharpOption<BindingFlags>)
  type: Method
  assemblies:
  - FSharp.Core
  namespace: Microsoft.FSharp.Reflection
  syntax:
    content: public static Microsoft.FSharp.Core.FSharpFunc<object,int> PreComputeUnionTagReader (Type unionType, Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags> bindingFlags);
    parameters:
    - id: unionType
      type: System.Type
      description: To be added.
    - id: bindingFlags
      type: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
      description: To be added.
    return:
      type: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Int32}
      description: To be added.
  overload: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader*
  exceptions: []
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetExceptionFields(Object, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.GetExceptionFields(Object, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields(Object, FSharpOption<BindingFlags>)
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.FSharp.Core.FSharpOption`1
  name: FSharpOption<T>
  nameWithType: FSharpOption<T>
  fullName: Microsoft.FSharp.Core.FSharpOption<T>
- uid: System.Reflection.BindingFlags
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpOption<BindingFlags>
  nameWithType: FSharpOption<BindingFlags>
  fullName: Microsoft.FSharp.Core.FSharpOption<System.Reflection.BindingFlags>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetRecordField(System.Object,System.Reflection.PropertyInfo)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetRecordField(Object, PropertyInfo)
  nameWithType: FSharpValue.GetRecordField(Object, PropertyInfo)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetRecordField(Object, PropertyInfo)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetRecordFields(Object, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.GetRecordFields(Object, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields(Object, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetTupleField(System.Object,System.Int32)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetTupleField(Object, Int32)
  nameWithType: FSharpValue.GetTupleField(Object, Int32)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetTupleField(Object, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields(System.Object)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetTupleFields(Object)
  nameWithType: FSharpValue.GetTupleFields(Object)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields(Object)
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetUnionFields(Object, Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.GetUnionFields(Object, Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields(Object, Type, FSharpOption<BindingFlags>)
- uid: System.Tuple`2
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: Microsoft.FSharp.Reflection.UnionCaseInfo
  name: UnionCaseInfo
  nameWithType: UnionCaseInfo
  fullName: Microsoft.FSharp.Reflection.UnionCaseInfo
- uid: System.Tuple{Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]}
  parent: System
  isExternal: false
  name: Tuple<UnionCaseInfo,Object[]>
  nameWithType: Tuple<UnionCaseInfo,Object[]>
  fullName: System.Tuple<Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[]>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.FSharp.Reflection.UnionCaseInfo
    name: UnionCaseInfo
    nameWithType: UnionCaseInfo
    fullName: Microsoft.FSharp.Reflection.UnionCaseInfo
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeFunction(System.Type,Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeFunction(Type, FSharpFunc<Object,Object>)
  nameWithType: FSharpValue.MakeFunction(Type, FSharpFunc<Object,Object>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeFunction(Type, FSharpFunc<Object,Object>)
- uid: Microsoft.FSharp.Core.FSharpFunc`2
  name: FSharpFunc<T,TResult>
  nameWithType: FSharpFunc<T,TResult>
  fullName: Microsoft.FSharp.Core.FSharpFunc<T,TResult>
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Object,Object>
  nameWithType: FSharpFunc<Object,Object>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Object,System.Object>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeRecord(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeRecord(Type, Object[], FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.MakeRecord(Type, Object[], FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeRecord(Type, Object[], FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(System.Object[],System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeTuple(Object[], Type)
  nameWithType: FSharpValue.MakeTuple(Object[], Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(Object[], Type)
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeUnion(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeUnion(UnionCaseInfo, Object[], FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.MakeUnion(UnionCaseInfo, Object[], FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeUnion(UnionCaseInfo, Object[], FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordConstructor(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeRecordConstructor(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor(Type, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Object[],System.Object}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Object[],Object>
  nameWithType: FSharpFunc<Object[],Object>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Object[],System.Object>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordConstructorInfo(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeRecordConstructorInfo(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo(Type, FSharpOption<BindingFlags>)
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader(System.Reflection.PropertyInfo)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordFieldReader(PropertyInfo)
  nameWithType: FSharpValue.PreComputeRecordFieldReader(PropertyInfo)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader(PropertyInfo)
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordReader(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeRecordReader(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader(Type, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object[]}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Object,Object[]>
  nameWithType: FSharpFunc<Object,Object[]>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Object,System.Object[]>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTupleConstructor(Type)
  nameWithType: FSharpValue.PreComputeTupleConstructor(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor(Type)
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTupleConstructorInfo(Type)
  nameWithType: FSharpValue.PreComputeTupleConstructorInfo(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo(Type)
- uid: System.Tuple{System.Reflection.ConstructorInfo,Microsoft.FSharp.Core.FSharpOption{System.Type}}
  parent: System
  isExternal: false
  name: Tuple<ConstructorInfo,FSharpOption<Type>>
  nameWithType: Tuple<ConstructorInfo,FSharpOption<Type>>
  fullName: System.Tuple<System.Reflection.ConstructorInfo,Microsoft.FSharp.Core.FSharpOption<System.Type>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo(System.Type,System.Int32)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTuplePropertyInfo(Type, Int32)
  nameWithType: FSharpValue.PreComputeTuplePropertyInfo(Type, Int32)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo(Type, Int32)
- uid: System.Tuple{System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Type,System.Int32}}}
  parent: System
  isExternal: false
  name: Tuple<PropertyInfo,FSharpOption<Tuple<Type,Int32>>>
  nameWithType: Tuple<PropertyInfo,FSharpOption<Tuple<Type,Int32>>>
  fullName: System.Tuple<System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption<System.Tuple<System.Type,System.Int32>>>
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.FSharp.Core.FSharpOption`1
    name: FSharpOption
    nameWithType: FSharpOption
    fullName: Microsoft.FSharp.Core.FSharpOption
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader(System.Type)
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTupleReader(Type)
  nameWithType: FSharpValue.PreComputeTupleReader(Type)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader(Type)
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionConstructor(UnionCaseInfo, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionConstructor(UnionCaseInfo, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor(UnionCaseInfo, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionConstructorInfo(UnionCaseInfo, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionConstructorInfo(UnionCaseInfo, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo(UnionCaseInfo, FSharpOption<BindingFlags>)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionReader(UnionCaseInfo, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionReader(UnionCaseInfo, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader(UnionCaseInfo, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionTagMemberInfo(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionTagMemberInfo(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo(Type, FSharpOption<BindingFlags>)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionTagReader(Type, FSharpOption<BindingFlags>)
  nameWithType: FSharpValue.PreComputeUnionTagReader(Type, FSharpOption<BindingFlags>)
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader(Type, FSharpOption<BindingFlags>)
- uid: Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Int32}
  parent: Microsoft.FSharp.Core
  isExternal: false
  name: FSharpFunc<Object,Int32>
  nameWithType: FSharpFunc<Object,Int32>
  fullName: Microsoft.FSharp.Core.FSharpFunc<System.Object,System.Int32>
  spec.csharp:
  - uid: Microsoft.FSharp.Core.FSharpFunc`2
    name: FSharpFunc
    nameWithType: FSharpFunc
    fullName: Microsoft.FSharp.Core.FSharpFunc
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetExceptionFields
  nameWithType: FSharpValue.GetExceptionFields
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetRecordField*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetRecordField
  nameWithType: FSharpValue.GetRecordField
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetRecordField
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetRecordFields
  nameWithType: FSharpValue.GetRecordFields
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetTupleField*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetTupleField
  nameWithType: FSharpValue.GetTupleField
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetTupleField
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetTupleFields
  nameWithType: FSharpValue.GetTupleFields
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: GetUnionFields
  nameWithType: FSharpValue.GetUnionFields
  fullName: Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeFunction*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeFunction
  nameWithType: FSharpValue.MakeFunction
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeFunction
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeRecord*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeRecord
  nameWithType: FSharpValue.MakeRecord
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeRecord
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeTuple*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeTuple
  nameWithType: FSharpValue.MakeTuple
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeTuple
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.MakeUnion*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: MakeUnion
  nameWithType: FSharpValue.MakeUnion
  fullName: Microsoft.FSharp.Reflection.FSharpValue.MakeUnion
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordConstructor
  nameWithType: FSharpValue.PreComputeRecordConstructor
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordConstructorInfo
  nameWithType: FSharpValue.PreComputeRecordConstructorInfo
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordFieldReader
  nameWithType: FSharpValue.PreComputeRecordFieldReader
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeRecordReader
  nameWithType: FSharpValue.PreComputeRecordReader
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTupleConstructor
  nameWithType: FSharpValue.PreComputeTupleConstructor
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTupleConstructorInfo
  nameWithType: FSharpValue.PreComputeTupleConstructorInfo
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTuplePropertyInfo
  nameWithType: FSharpValue.PreComputeTuplePropertyInfo
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeTupleReader
  nameWithType: FSharpValue.PreComputeTupleReader
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionConstructor
  nameWithType: FSharpValue.PreComputeUnionConstructor
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionConstructorInfo
  nameWithType: FSharpValue.PreComputeUnionConstructorInfo
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionReader
  nameWithType: FSharpValue.PreComputeUnionReader
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionTagMemberInfo
  nameWithType: FSharpValue.PreComputeUnionTagMemberInfo
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
- uid: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader*
  parent: Microsoft.FSharp.Reflection.FSharpValue
  isExternal: false
  name: PreComputeUnionTagReader
  nameWithType: FSharpValue.PreComputeUnionTagReader
  fullName: Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.FSharp.Reflection/FSharpValue.xml
